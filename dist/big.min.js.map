{"version":3,"sources":["webpack://Big/webpack/universalModuleDefinition","webpack://Big/webpack/bootstrap","webpack://Big/./src/functional/setBase.ts","webpack://Big/./src/util/intUtils.ts","webpack://Big/./src/util/arrayUtils.ts","webpack://Big/./src/functional/copy.ts","webpack://Big/./src/util/numUtils.ts","webpack://Big/./src/functional/compare.ts","webpack://Big/./src/algorithm/subtraction.ts","webpack://Big/./src/globals.ts","webpack://Big/./src/algorithm/addition.ts","webpack://Big/./src/functional/negate.ts","webpack://Big/./src/functional/square.ts","webpack://Big/./src/algorithm/karatsubaMultiplication.ts","webpack://Big/./src/functional/isInteger.ts","webpack://Big/./src/functional/isEven.ts","webpack://Big/./src/algorithm/halve.ts","webpack://Big/./src/functional/decrement.ts","webpack://Big/./src/algorithm/increment.ts","webpack://Big/./src/algorithm/decrement.ts","webpack://Big/./src/algorithm/compare.ts","webpack://Big/./src/functional/subtract.ts","webpack://Big/./src/algorithm/double.ts","webpack://Big/./src/functional/double.ts","webpack://Big/./src/functional/add.ts","webpack://Big/./src/functional/toString.ts","webpack://Big/./src/functional/toInteger.ts","webpack://Big/./src/functional/signum.ts","webpack://Big/./src/functional/pow.ts","webpack://Big/./src/algorithm/karatsubaSquare.ts","webpack://Big/./src/functional/multiply.ts","webpack://Big/./src/functional/min.ts","webpack://Big/./src/functional/max.ts","webpack://Big/./src/functional/lcm.ts","webpack://Big/./src/functional/increment.ts","webpack://Big/./src/functional/halve.ts","webpack://Big/./src/algorithm/isEven.ts","webpack://Big/./src/algorithm/steinGCD.ts","webpack://Big/./src/functional/gcd.ts","webpack://Big/./src/algorithm/singleDigitMultiplication.ts","webpack://Big/./src/algorithm/basicDivision.ts","webpack://Big/./src/functional/divideAndRemainder.ts","webpack://Big/./src/algorithm/reverseAddition.ts","webpack://Big/./src/functional/abs.ts","webpack://Big/./src/oop/bigInt.ts","webpack://Big/./src/algorithm/exponentiation.ts","webpack://Big/./src/algorithm/longMultiplication.ts","webpack://Big/./src/algorithm/longSquare.ts","webpack://Big/./src/algorithm/lcm.ts","webpack://Big/./src/algorithm/singleDigitDivision.ts","webpack://Big/./src/functional/clone.ts","webpack://Big/./src/algorithm/reverseSubtraction.ts","webpack://Big/./src/algorithm/setBase.ts","webpack://Big/./src/index.ts"],"names":["root","factory","exports","module","define","amd","Big","window","e","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","globals_1","setBase_1","setBase","A","base","Globals","MIN_BASE","RangeError","MAX_BASE","_a","digits","precision","assign","target","source","isNegative","copy","slice","setOne","setZero","toInteger","to","minTo","from","minFrom","maxFrom","growArray","minNewLen","maxNewLen","newLen","MAX_PRECISION","length","printArr","min","max","minSub","maxSub","map","v","join","safeShiftUp","shifts","unsafeShiftUp","intUtils_1","a","b","strToDigits","trim","TypeError","replace","match","Array","j","zero","compare_1","compare","B","ratio","Math","log","ceil","out","decrement_1","subtraction","minA","maxA","minB","maxB","borrow","decrement","DEFAULT_BASE","CIPHER","freeze","increment_1","addition","carry","increment","negate","karatsubaSquare_1","longSquare_1","arrayUtils_1","square","longSquare","karatsubaSquare","addition_1","reverseAddition_1","subtraction_1","numUtils_1","karatsubaMultiplication","halfLen","halfA","midA","midB","mediumB","mediumMaxB","medium","mediumMax","lowMax","reverseAddition","highMin","isInteger","isEven_1","isEven","halve","remainder","add_1","copy_1","negate_1","reverseSubtraction_1","subtract","add","reverseSubtraction","double","double_1","subtract_1","toString","cipher","sign","reverse","strings","isInteger_1","signum","exponentiation_1","pow","EvalError","exponentiation","mid","square_1","karatsubaMultiplication_1","longMultiplication_1","singleDigitMultiplication_1","multiply","multiplicand","singleDigitMultiplication","longMultiplication","lcm_1","lcm","halve_1","xor","steinGCD","C","steinGCD_1","gcd","multiplier","divThreeHalvesByTwo","a1","a2","a3","b1","b2","q","basicDivision","X","minX","maxX","Y","minY","maxY","lenY","nMt","Q","maxR","yt","ytm1","QY","iMt","maxQY","basicDivision_1","singleDigitDivision_1","divideAndRemainder","_b","R","singleDigitDivision","newMaxB","abs","abs_1","divideAndRemainder_1","gcd_1","max_1","min_1","multiply_1","pow_1","signum_1","toInteger_1","toString_1","BigInt","input","this","tryBigInt","addend","clone","compareTo","divide","divisor","ZERO","getBase","isBigInt","isOdd","minusminus","plusplus","power","set","subtrahend","baseA","baseB","maxC","lenB","minC","newMax","digit","quotient","product","D","maxD","curBase","newBase","__globals__","clone_1","bigInt_1","Int"],"mappings":"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","file":"big.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 51);\n","import {Globals} from '../globals';\nimport {Integer} from '../integer';\nimport {setBase as _setBase} from '../algorithm/setBase';\n\nexport function setBase(A: Integer, base: number): Integer {\n\n  //Sanitize base\n  base = 0 | base;\n\n  //If new base too low\n  if(base < Globals.MIN_BASE){\n    throw RangeError(`${base} < MIN_BASE (${Globals.MIN_BASE})`);\n  }\n\n  //If new base too high\n  if(base > Globals.MAX_BASE){\n    throw RangeError(`${base} > MAX_BASE (${Globals.MAX_BASE})`);\n  }\n\n  //Convert to base\n  [A.digits, A.precision] = _setBase(A.digits, 0, A.precision, A.base, base);\n  A.base = base;\n  return A;\n}\n","import {Integer} from '../integer';\n\n// tslint:disable-next-line:no-any\nexport function assign(target: any, source: Integer): Integer {\n  target.base = source.base;\n  target.digits = source.digits;\n  target.precision = source.precision;\n  target.isNegative = source.isNegative;\n  return target;\n}\n\n// tslint:disable-next-line:no-any\nexport function copy(target: any, source: Integer): Integer {\n  const A: Integer = assign(target, source);\n  A.digits = A.digits.slice(0, A.precision);\n  return A;\n}\n\n// tslint:disable-next-line:no-any\nexport function setOne(A: any): Integer {\n  A.precision = 1;\n  A.digits = [1];\n  A.isNegative = false;\n  return A;\n}\n\n// tslint:disable-next-line:no-any\nexport function setZero(A: any): Integer {\n  A.precision = 0;\n  A.digits = [];\n  A.isNegative = false;\n  return A;\n}\n\nexport function toInteger(\n  digits: number[],\n  precision: number,\n  isNegative: boolean,\n  base: number\n): Integer {\n  return {base, digits, precision, isNegative};\n}\n","import {Globals} from '../globals';\n\n//Assumes A and B not same array or sections A and B do not intersect\nexport function copy<T>(to: T[], minTo: number, from: ReadonlyArray<T>, minFrom: number, maxFrom: number): void {\n  while(minFrom < maxFrom){\n    to[minTo++] = from[minFrom++];\n  }\n}\n\n// tslint:disable-next-line:no-any\nexport function growArray(A: any[], minNewLen: number, maxNewLen: number): void {\n  let newLen: number = maxNewLen;\n  if(newLen > Globals.MAX_PRECISION){\n    if(minNewLen > Globals.MAX_PRECISION){\n      throw new RangeError(\n        `Array length greater than supported length ${Globals.MAX_PRECISION}`\n      );\n    }\n    newLen = minNewLen;\n  }\n\n  if(A.length < newLen){\n    A.length = newLen;\n  }\n}\n\n// tslint:disable-next-line:no-any\nexport function printArr(A: any[], min: number, max: number, minSub: number = min, maxSub: number = max): string {\n  A = A.map(v => (v == null || v !== v) ? v + '' : v);\n  return \"[\" +\n    A.slice(min,minSub).join(', ') +\n    \"|\" + A.slice(minSub,maxSub).join(', ') +\n    \"|\" + A.slice(maxSub,max).join(', ') +\n  \"]\";\n}\n\n// tslint:disable-next-line:no-any\nexport function safeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = max + shifts; max > min; A[--i] = A[--max]){\n  }\n}\n\n//Assumes shifts >= max - min, shifts > 0\n// tslint:disable-next-line:no-any\nexport function unsafeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = min + shifts; min < max; A[i++] = A[min++]){\n  }\n}\n","import {Integer} from '../integer';\nimport {copy as _copy} from '../util/intUtils';\n\n// tslint:disable-next-line:no-any\nexport function copy(target: any, source: Integer): Integer {\n  return _copy(target, source);\n}\n","export function max(a: number, b: number): number {\n  return (a < b) ? b : a;\n}\n\nexport function min(a: number, b: number): number {\n  return (a > b) ? b : a;\n}\n\nexport function strToDigits(s: string): [number[], boolean] {\n  s = s.trim();\n\n  //Check if empty string\n  if(s.length < 1){\n    throw new TypeError(\"NaN\");\n  }\n\n  //Check for leading sign\n  const isNegative: boolean = s[0] === '-';\n\n  //Trim signs, leading zeros and decimal part\n  s = s.replace(/^[-+]?0*/, '').replace(/\\.[0-9]+$/, '');\n\n  //Check if string is not a number\n  if(s.match(/[^\\d]/)){\n    throw new TypeError(\"NaN\");\n  }\n\n  //If zero\n  const precision: number = s.length;\n  if(precision === 0){\n    return [[], false];\n  }\n\n  //Convert to decimal array\n  const digits: number[] = new Array<number>(precision);\n  for(let i = 0, j = precision; j > 0; ++i){\n    digits[i] = +s[--j];\n  }\n\n  return [digits, isNegative];\n}\n\n//Sets indices between [min, max) to 0\nexport function zero(A: number[], min: number, max: number): void {\n  while(min < max){\n    A[min++] = 0;\n  }\n}\n","import {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {compare as _compare} from '../algorithm/compare';\n\nexport function compare(A: Integer, B: Integer): number {\n\n  //If self\n  if(A === B){\n    return 0;\n  }\n\n  //Check if different signs\n  if(A.isNegative !== B.isNegative){\n    return (A.isNegative) ? -1 : 1;\n  }\n\n  const base: number = A.base;\n\n  //If not same base\n  if(A.base !== B.base){\n\n    //Estimate number of digits of A if converted to B's base\n    const ratio: number = Math.log(A.base) / Math.log(B.base);\n    if(Math.ceil(A.precision * ratio) < B.precision){\n      return -1;\n    }\n    if(Math.ceil((A.precision - 1) * ratio) > B.precision){\n      return 1;\n    }\n\n    //Convert A to B's base\n    setBase(A, B.base);\n  }\n\n  //Compare A and B\n  const out: number = _compare(\n    A.digits, 0, A.precision,\n    B.digits, 0, B.precision\n  );\n\n  //Change A back to original base (if needed)\n  setBase(A, base);\n\n  //Return result\n  return out;\n}\n","import {decrement} from './decrement';\n\n/*\n  f(A, B) = A - B\n  Assumes\n     A >= B\n  Note\n     Overwrites A\n*/\nexport function subtraction(\n  A: number[], minA: number, maxA: number,\n  B: ReadonlyArray<number>, minB: number, maxB: number,\n  base: number\n): number {\n  let a: number = minA;\n  let borrow = 0;\n\n  //Subtract common digits\n  while(minB < maxB){\n    let v: number = A[a] - borrow - B[minB++];\n    if(v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[a++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    return decrement(A, a, maxA, base);\n  }\n\n  //Find new length\n  if(a === maxA){\n    while(a-- > minA && A[a] === 0){\n    }\n    maxA = a + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n","export namespace Globals {\n  export const MIN_BASE = 2;\n  export const MAX_BASE = 94906265; //2^26 < sqrt(Number.MAX_SAFE_INTEGER) < 2^27\n  export const MAX_PRECISION = 4294967295; //2^32 - 1\n\n  export let DEFAULT_BASE = 67108864; // 2^26\n  export let CIPHER: ReadonlyArray<string> = Object.freeze([\n    '0','1','2','3','4','5','6','7','8','9',\n    'A','B','C','D','E','F','G','H','I','J',\n    'K','L','M','N','O','P','Q','R','S','T',\n    'U','V','W','X','Y','Z'\n  ]);\n}\n","import {increment} from './increment';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A.length >= B.length\n    A and B not same array or non-intersecting segments\n*/\nexport function addition(\n  A: number[], minA: number, maxA: number,\n  B: ReadonlyArray<number>, minB: number, maxB: number,\n  base: number\n): number{\n  let carry = 0;\n\n  //Add common digits\n  while (minB < maxB){\n    let v: number = A[minA] + B[minB++] + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Return length\n  return (carry > 0) ? increment(A, minA, maxA, base) : maxA;\n}\n","import {Integer} from '../integer';\n\nexport function negate(A: Integer): Integer {\n  A.isNegative = A.precision > 0 && !A.isNegative;\n  return A;\n}\n","import {Integer} from '../integer';\nimport {karatsubaSquare} from '../algorithm/karatsubaSquare';\nimport {longSquare} from '../algorithm/longSquare';\nimport {growArray} from '../util/arrayUtils';\n\nexport function square(A: Integer): Integer {\n\n  //If zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //Make positive\n  A.isNegative = false;\n\n  //Make minimum room for squaring\n  const maxNewLen: number = 2 * A.precision;\n  growArray(A.digits, maxNewLen - 1, maxNewLen);\n\n  //Choose best performing algorithm\n  if(A.precision < 100){\n    A.precision = longSquare(A.digits, 0, A.precision, A.base);\n  } else {\n    A.precision = karatsubaSquare(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n","import {addition} from './addition';\nimport {reverseAddition} from './reverseAddition';\nimport {subtraction} from './subtraction';\nimport {copy, unsafeShiftUp} from '../util/arrayUtils';\nimport {min, max, zero} from '../util/numUtils';\n\n/*\n  f(A) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n  Explanation: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaMultiplication(\n  A: number[], minA: number, maxA: number,\n  B: ReadonlyArray<number>, minB: number, maxB: number,\n  base: number\n): number {\n  let halfLen: number = max(maxA - minA, maxB - minB);\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[minA] * B[minB];\n    if(halfLen < base){\n      A[maxA] = 0;\n    } else {\n      A[maxA++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[minA] = halfLen;\n    return maxA;\n  }\n\n  //Split the numbers in half\n  halfLen = (halfLen + 1) >>> 1;\n  const halfA: number = minA + halfLen;\n  const midA: number = min(halfA, maxA);\n  const midB: number = min(minB + halfLen, maxB);\n\n  //mediumB = lowB + highB\n  const mediumB: number[] = new Array(midB - minB + 1);\n  copy(mediumB, 0, B, minB, midB);\n  const mediumMaxB: number = addition(\n    mediumB, 0, midB - minB, B, midB, maxB, base\n  );\n\n  //medium = lowA + highA\n  const medium: number[] = new Array(midA - minA + 1 + mediumMaxB);\n  copy(medium, 0, A, minA, midA);\n  let mediumMax: number = addition(medium, 0, midA - minA, A, midA, maxA, base);\n\n  //medium = medium * mediumB\n  mediumMax = karatsubaMultiplication(\n    medium, 0, mediumMax, mediumB, 0, mediumMaxB, base\n  );\n\n  //Shift highA left\n  A[maxA] = 0;\n  unsafeShiftUp(A, midA, maxA, halfLen);\n\n  //lowA = lowA * lowB\n  const lowMax: number = karatsubaMultiplication(\n    A, minA, midA, B, minB, midB, base\n  );\n\n  //medium = medium - lowA\n  mediumMax = subtraction(medium, 0, mediumMax, A, minA, lowMax, base);\n\n  //A = medium*(base^halfLen) + lowA\n  if(midA === maxA || midB === maxB){\n    if(lowMax <= halfA){\n      maxA = halfA + mediumMax;\n      zero(A, lowMax, halfA);\n      copy(A, halfA, medium, 0, mediumMax);\n    } else if(mediumMax > lowMax - halfA){\n      maxA = reverseAddition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    } else {\n      maxA = addition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    }\n    return maxA;\n  }\n\n  //Fill unused space with zero\n  zero(A, lowMax, maxA);\n\n  //highA = highA * highB\n  const highMin: number = midA + halfLen;\n  maxA = karatsubaMultiplication(\n    A, highMin, maxA + halfLen, B, midB, maxB, base\n  );\n\n  //medium = medium - highA\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, maxA, base);\n\n  //A = highA*(base^len) + medium*(base^halfLen) + lowA\n  maxA = addition(A, halfA, maxA, medium, 0, mediumMax, base);\n  return maxA;\n}\n","import {Integer} from '../integer';\n\n// tslint:disable-next-line:no-any\nexport function isInteger(A: any): A is Integer {\n  return A.hasOwnProperty('base')\n  && A.hasOwnProperty('digits')\n  && A.hasOwnProperty('precision')\n  && A.hasOwnProperty('isNegative');\n}\n","import {Integer} from '../integer';\nimport {isEven as _isEven} from '../algorithm/isEven';\n\nexport function isEven(A: Integer): boolean {\n  return _isEven(A.digits, 0, A.precision, A.base);\n}\n","/*\n  f(A) = A / 2\n  Overwrites A\n  Assumes A > 0\n*/\nexport function halve(\n  A: number[], minA: number, maxA: number, base: number\n): [number, number] {\n\n  //Halve\n  let remainder = 0;\n  for(let i: number = maxA; i-- > minA; A[i] = A[i] >>> 1){\n    A[i] = A[i] + (base & -remainder);\n    remainder = A[i] & 1;\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n","import {Integer} from '../integer';\nimport {decrement as _decrement} from '../algorithm/decrement';\nimport {increment} from '../algorithm/increment';\nimport {setOne} from '../util/intUtils';\n\nexport function decrement(A: Integer): Integer {\n\n  //If negative\n  if(A.isNegative){\n    A.precision = increment(A.digits, 0, A.precision, A.base);\n\n  //If zero\n  } else if (A.precision === 0){\n    setOne(A);\n    A.isNegative = true;\n\n  //If positive\n  } else {\n    A.precision = _decrement(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n","/*\n  f(A) = A + 1\n  Overwrites A\n  Assumes A >= 0\n*/\n\nexport function increment(\n  A: number[], minA: number, maxA: number, base: number\n): number {\n\n  //Deal with any carries\n  for(--base; minA < maxA && A[minA] === base; A[minA++] = 0){\n  }\n\n  //Add one\n  if(minA === maxA){\n    A[maxA++] = 1;\n  } else {\n    A[minA] = A[minA] + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n","/*\n  f(A) = A - 1\n  Overwrites A\n  Assumes A > 0\n*/\nexport function decrement(\n  A: number[], minA: number, maxA: number, base: number\n): number {\n\n  //Deal with any borrows\n  for(const borrow: number = base - 1; A[minA] === 0; A[minA++] = borrow){\n  }\n\n  //Subtract one\n  A[minA] = A[minA] - 1;\n\n  //Return length\n  return (minA+1 === maxA && A[minA] === 0) ? maxA - 1 : maxA;\n}\n","//Assumes valid inputs\n//Assumes numbers are in same base\nexport function compare(\n  A: ReadonlyArray<number>, minA: number, maxA: number,\n  B: ReadonlyArray<number>, minB: number, maxB: number\n): number {\n\n  //Compare number of digits\n  const d: number = maxA - minA - maxB + minB;\n  if(d !== 0){\n    return d < 0 ? -1 : 1;\n  }\n\n  //Compare digits\n  while(maxA > minA){\n    if(A[--maxA] !== B[--maxB]){\n      return A[maxA] < B[maxB] ? -1 : 1;\n    }\n  }\n\n  //Numbers are equal\n  return 0;\n}\n","import {Integer} from '../integer';\nimport {add} from './add';\nimport {compare} from './compare';\nimport {copy} from './copy';\nimport {negate} from './negate';\nimport {setBase} from './setBase';\nimport {reverseSubtraction} from '../algorithm/reverseSubtraction';\nimport {subtraction} from '../algorithm/subtraction';\nimport {setZero} from '../util/intUtils';\n\nexport function subtract(A: Integer, B: Integer): Integer {\n\n  //If subtracting itself\n  if(A === B){\n    return setZero(A);\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A is zero\n  if(A.precision === 0){\n\n    //Copy B\n    copy(A, B);\n    negate(A);\n    return setBase(A, base);\n  }\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, add, change sign again\n    negate(A);\n    add(A, B);\n    return negate(A);\n  }\n\n  //Normalize to B's base\n  setBase(A, B.base);\n\n  //Compare A and B\n  const c: number = compare(A, B);\n\n  //If A == B\n  if(c === 0){\n    A.base = base;\n    return setZero(A);\n  }\n\n  //If A < B\n  if(c < 0){\n\n    //Switch sign\n    negate(A);\n\n    //Make room for subtraction\n    if(A.digits.length < B.precision){\n      A.digits.length = B.precision;\n    }\n\n    //Subtract\n    A.precision = reverseSubtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A > B\n  } else {\n    A.precision = subtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  return setBase(A, base);\n}\n","/*\nf(A) = A + A\nOverwrites A\n*/\nexport function double(\n  A: number[], minA: number, maxA: number, base: number\n): number {\n\n  //Double\n  let carry = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] << 1) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add carry\n  if (carry > 0){\n    A[minA++] = 1;\n  }\n\n  //Return length\n  return minA;\n}\n","import {Integer} from '../integer';\nimport {double as _double} from '../algorithm/double';\n\nexport function double(A: Integer): Integer {\n  A.precision = _double(A.digits, 0, A.precision, A.base);\n  return A;\n}\n","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {double} from './double';\nimport {negate} from './negate';\nimport {setBase} from './setBase';\nimport {subtract} from './subtract';\nimport {addition} from '../algorithm/addition';\nimport {reverseAddition} from '../algorithm/reverseAddition';\nimport {growArray} from '../util/arrayUtils';\n\nexport function add(A: Integer, B: Integer): Integer {\n\n  //If self\n  if(A === B){\n    return double(A);\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If C is zero\n  if(A.precision === 0){\n    copy(A, B);\n    return setBase(A, base);\n  }\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, subtract, change sign again\n    negate(A);\n    subtract(A, B);\n    return negate(A);\n  }\n\n  //Normalize to B's base\n  setBase(A, B.base);\n\n  //If C < B\n  if(A.precision < B.precision){\n\n    //Update C's digit array to minimum result size\n    growArray(A.digits, B.precision, B.precision + 1);\n\n    //Add\n    A.precision = reverseAddition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A >= B\n  } else {\n\n    //Add\n    A.precision = addition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  //Change A back to original base\n  return setBase(A, base);\n}\n","import {Globals} from '../globals';\nimport {Integer} from '../integer';\n\n//Assumes input cipher is adequate for base\nexport function toString(A: Integer): string {\n  const cipher = Globals.CIPHER;\n\n  //If zero\n  if(A.precision === 0){\n    return (cipher.length < A.base) ? '0' : cipher[0];\n  }\n\n  //If negative\n  const sign: string = A.isNegative ? \"-\" : \"\";\n\n  //Print without cipher if cipher too small for base\n  if(cipher.length < A.base){\n    return sign + A.digits.slice(0, A.precision).reverse().join(':');\n  }\n\n  //Print with cipher\n  let i = 0;\n  let n: number = A.precision;\n  const digits = A.digits;\n  const strings = new Array(n);\n  while(n > 0){\n    strings[i++] = cipher[digits[--n]];\n  }\n  return sign + strings.join('');\n}\n","import {Globals} from '../globals';\nimport {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {isInteger} from './isInteger';\nimport {setZero} from '../util/intUtils';\nimport {strToDigits} from '../util/numUtils';\n\nexport function toInteger(A: Integer | number | string, base?: number): Integer {\n\n  //If already an integer\n  if(isInteger(A)){\n    return A;\n  }\n\n  //Convert numbers to string\n  if(typeof A === \"number\"){\n    A = '' + A;\n\n  //If not an expected type\n  } else if(typeof A !== \"string\"){\n    throw TypeError(\"Expecting type Integer | string | number\");\n  }\n\n  //Convert string to base 10\n  const B: Integer = setZero({base: 10});\n  [B.digits, B.isNegative] = strToDigits(A);\n  B.precision = B.digits.length;\n\n  //Convert to chosen base\n  return setBase(B, (base == null) ? Globals.DEFAULT_BASE : base);\n}\n","import {Integer} from '../integer';\n\nexport function signum(A: Integer): number {\n  return A.isNegative ? -1 : A.precision === 0 ? 0 : 1;\n}\n","import {Integer} from '../integer';\nimport {isEven} from './isEven';\nimport {exponentiation} from '../algorithm/exponentiation';\nimport {growArray} from '../util/arrayUtils';\nimport {setOne, setZero} from '../util/intUtils';\n\nexport function pow(A: Integer, B: Integer): Integer {\n\n  //C^0 = 1\n  if(B.precision === 0){\n    return setOne(A);\n  }\n\n  //If power is negative\n  if(B.isNegative){\n\n    //If 1 / 0\n    if(A.precision === 0){\n      throw new EvalError(\"Divide by zero\");\n    }\n\n    return setZero(A);\n  }\n\n  //0^B = zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If negative base and even power\n  A.isNegative = A.isNegative && !isEven(B);\n\n  //1^B = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    return A;\n  }\n\n  //Set new size\n  growArray(A.digits,\n\n    //Min new size\n    (A.precision - 1) * (B.base ** (B.precision - 1)) + 1,\n\n    //Max new size\n    A.precision * ((B.base ** B.precision) - 1)\n  );\n\n  //C = C^B\n  A.precision = exponentiation(\n    A.digits, 0, A.precision, A.base,\n    B.digits.slice(0,B.precision), 0, B.precision, B.base\n  );\n\n  return A;\n}\n","import {addition} from './addition';\nimport {subtraction} from './subtraction';\nimport {copy, unsafeShiftUp} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n  Assumes A > 0\n  See: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaSquare(\n  A: number[], min: number, max: number, base: number\n): number {\n  let halfLen: number = max - min;\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[min] * A[min];\n    if(halfLen < base){\n      A[max] = 0;\n    } else {\n      A[max++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[min] = halfLen;\n    return max;\n  }\n\n  //Split the number in half\n  halfLen = (halfLen + 1) >>> 1;\n  const mid: number = min + halfLen;\n\n  //medium = low + high\n  const medium: number[] = new Array(2*halfLen + 2);\n  copy(medium, 0, A, min, mid);\n  let mediumMax: number = addition(medium, 0, halfLen, A, mid, max, base);\n\n  //Shift high left\n  A[max] = 0;\n  unsafeShiftUp(A, mid, max, halfLen);\n\n  //low * low\n  const lowMax: number = karatsubaSquare(A, min, mid, base);\n\n  //Fill unused space with zero\n  zero(A, lowMax, max);\n\n  //high * high\n  const highMin = mid + halfLen;\n  max = karatsubaSquare(A, highMin, max + halfLen, base);\n\n  //medium = medium * medium - low - high\n  mediumMax = karatsubaSquare(medium, 0, mediumMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, min, lowMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, max, base);\n\n  //A = high*(base^len) + medium*(base ^ halfLen) + low\n  return addition(A, mid, max, medium, 0, mediumMax, base);\n}\n","import {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {square} from './square';\nimport {double} from '../algorithm/double';\nimport {karatsubaMultiplication} from '../algorithm/karatsubaMultiplication';\nimport {longMultiplication} from '../algorithm/longMultiplication';\nimport {singleDigitMultiplication} from '../algorithm/singleDigitMultiplication';\nimport {growArray} from '../util/arrayUtils';\nimport {setZero} from '../util/intUtils';\n\nexport function multiply(A: Integer, B: Integer): Integer {\n\n  //If self\n  if(A === B){\n    return square(A);\n  }\n\n  //If A is zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  //Multiply signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //Normalize to B's base\n  const base: number = A.base;\n  setBase(A, B.base);\n\n  //If B is single digit\n  if(B.precision === 1){\n    const multiplicand: number = B.digits[0];\n\n    //If more than doubling\n    if(multiplicand > 2){\n      A.precision = singleDigitMultiplication(\n        A.digits, 0, A.precision, multiplicand, A.base\n      );\n\n    //If doubling\n    } else if(multiplicand === 2){\n      A.precision = double(A.digits, 0, A.precision, A.base);\n    }\n\n  //If A is single digit\n  } else if(A.precision === 1){\n    const multiplicand: number = A.digits[0];\n\n    //Copy B to A\n    A.precision = B.precision;\n    A.digits = B.digits.slice(0, B.precision);\n\n    //If more than doubling\n    if(multiplicand > 2){\n      A.precision = singleDigitMultiplication(\n        A.digits, 0, A.precision, multiplicand, A.base\n      );\n    } else if(multiplicand === 2){\n      A.precision = double(A.digits, 0, A.precision, A.base);\n    }\n\n  } else {\n\n    //Make room for multiplication\n    const maxNewLen: number = A.precision + B.precision;\n    growArray(A.digits, maxNewLen - 1, maxNewLen);\n\n    //Choose best performing algorithm\n    if(A.precision < 100 && B.precision < 100){\n      A.precision = longMultiplication(\n        A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n      );\n    } else {\n      A.precision = karatsubaMultiplication(\n        A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n      );\n    }\n  }\n\n  return setBase(A, base);\n}\n","import {Integer} from '../integer';\nimport {compare} from './compare';\n\nexport function min(A: Integer, B: Integer): Integer {\n  return compare(A, B) > 0 ? B : A;\n}\n","import {Integer} from '../integer';\nimport {compare} from './compare';\n\nexport function max(A: Integer, B: Integer): Integer {\n  return compare(A, B) < 0 ? B : A;\n}\n","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {setBase} from './setBase';\nimport {lcm as _lcm} from '../algorithm/lcm';\nimport {setZero} from '../util/intUtils';\n\n//See: https://en.wikipedia.org/wiki/Least_common_multiple\nexport function lcm(A: Integer, B: Integer): Integer {\n\n  //Make A positive\n  A.isNegative = false;\n\n  //If LCM of self or A = 0 or B = 1\n  if(A === B || A.precision === 0 || (B.precision === 1 && B.digits[0] === 1)){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  const base: number = A.base;\n\n  //If A = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    copy(A, B);\n    A.isNegative = false;\n\n  //If A > 1 and B > 1\n  } else {\n\n    //Normalize bases\n    setBase(A, B.base);\n\n    //Calculate LCM\n    [A.digits, A.precision] = _lcm(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Change A to original base\n  return setBase(A, base);\n}\n","import {Integer} from '../integer';\nimport {decrement} from '../algorithm/decrement';\nimport {increment as _increment} from '../algorithm/increment';\n\nexport function increment(A: Integer): Integer {\n\n  //If negative\n  if(A.isNegative){\n    A.precision = decrement(A.digits, 0, A.precision, A.base);\n\n    //If now zero\n    if(A.precision === 0){\n      A.isNegative = false;\n    }\n\n  //If positive\n  } else {\n    A.precision = _increment(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n","import {Integer} from '../integer';\nimport {decrement} from './decrement';\nimport {halve as _halve} from '../algorithm/halve';\nimport {setZero, setOne} from '../util/intUtils';\n\nexport function halve(A: Integer): [Integer, Integer] {\n  const remainder: Integer = setZero({base: A.base});\n\n  //If zero\n  if(A.precision === 0){\n    return [A, remainder];\n  }\n\n  //Halve\n  [A.precision, remainder.precision] = _halve(A.digits, 0, A.precision, A.base);\n\n  //If no remainder\n  if(remainder.precision === 0){\n    return [A, remainder];\n  }\n\n  //If remainder and C is negative\n  if(A.isNegative){\n\n    //Round down (e.g. Math.floor(-49.5) = -50)\n    decrement(A);\n  }\n\n  return [A, setOne(remainder)];\n}\n","export function isEven(\n  A: ReadonlyArray<number>, minA: number, maxA: number, base: number\n): boolean {\n\n  //If zero\n  if(minA === maxA){\n    return true;\n  }\n\n  //If even base\n  if((base & 1) === 0){\n    return (A[minA] & 1) === 0;\n  }\n\n  //If odd base\n  let xor = 0;\n  do {\n    xor = xor ^ A[minA++];\n  } while(minA < maxA);\n  return (xor & 1) === 0;\n}\n","import {compare} from './compare';\nimport {double} from './double';\nimport {halve} from './halve';\nimport {isEven} from './isEven';\nimport {subtraction} from './subtraction';\n\n/*\nf(A, B) = GCD(A, B)\nOverwrites A, B\nExpects A > 0, B > 0\n//Assumes A != B\nSee: https://en.wikipedia.org/wiki/Binary_GCD_algorithm\n*/\nexport function steinGCD(\n  A: number[], minA: number, maxA: number,\n  B: number[], minB: number, maxB: number,\n  base: number\n): [number[], number, number] {\n\n  //Count and remove common factors of 2\n  let shifts = 0;\n  while(isEven(A, minA, maxA, base) && isEven(B, minB, maxB, base)){\n    [maxA] = halve(A, minA, maxA, base);\n    [maxB] = halve(B, minB, maxB, base);\n    ++shifts;\n  }\n\n  //Remove extra factors of 2 in A\n  while(isEven(A, minA, maxA, base)){\n    [maxA] = halve(A, minA, maxA, base);\n  }\n\n  //Remove extra factors of 2 in B\n  while(isEven(B, minB, maxB, base)){\n    [maxB] = halve(B, minB, maxB, base);\n  }\n\n  //A will always be odd from now on\n  //While A != B\n  while (true) {\n    let c = compare(A, minA, maxA, B, minB, maxB);\n\n    if (c === 0){\n      break;\n    }\n\n    //Switch A and B iff A > B\n    if(c > 0){\n      const C: number[] = A;\n      A = B;\n      B = C;\n      c = minA;\n      minA = minB;\n      minB = c;\n      c = maxA;\n      maxA = maxB;\n      maxB = c;\n    }\n\n    //B = B - A\n    maxB = subtraction(B, minB, maxB, A, minA, maxA, base);\n\n    //B is now even so halve it at least once\n    do {\n      [maxB] = halve(B, minB, maxB, base);\n    } while (isEven(B, minB, maxB, base));\n  }\n\n  //Restore common factors of 2 (A = A << shifts)\n  while(shifts-- > 0){\n    maxA = double(A, minA, maxA, base);\n  }\n\n  return [A, minA, maxA];\n}\n","import {Integer} from '../integer';\nimport {compare} from './compare';\nimport {copy} from './copy';\nimport {setBase} from './setBase';\nimport {steinGCD} from '../algorithm/steinGCD';\n\nexport function gcd(A: Integer, B: Integer): Integer {\n\n  //Make A positive\n  A.isNegative = false;\n\n  //If GCD of self or B = 0\n  if(A === B || B.precision === 0){\n    return A;\n  }\n\n  //If A = 0\n  if(A.precision === 0){\n    copy(A, B);\n    A.isNegative = false;\n    return A;\n  }\n\n  //If |A| > 0 && |B| > 0\n  const base: number = A.base;\n\n  //Normalize the bases\n  setBase(A, B.base);\n\n  //If A != B\n  if(compare(A, B) !== 0){\n\n    //Calculate GCD\n    [A.digits,,A.precision] = steinGCD(\n      A.digits, 0, A.precision,\n      B.digits.slice(0, B.precision), 0, B.precision,\n      A.base\n    );\n  }\n\n  //Return A to original base\n  return setBase(A, base);\n}\n","/*\n  f(A,B) = A*B\n  Overwrites A\n  Assumes B > 0\n*/\nexport function singleDigitMultiplication(\n  A: number[], minA: number, maxA: number,\n  multiplier: number, base: number\n): number {\n\n  //Multiply multiplicand by multiplier\n  let carry = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] * multiplier) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 0 | (v / base);\n      v = v % base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add remaining carry\n  if(carry > 0){\n    A[minA++] = carry;\n  }\n\n  //Return length\n  return minA;\n}\n","import {compare} from './compare';\nimport {singleDigitMultiplication} from './singleDigitMultiplication';\nimport {subtraction} from './subtraction';\nimport {copy} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(X, Y) = X / Y\n  Overwrites X\n  Assumes no leading zeros\n  Assumes X.length >= Y.length >= 2\n  See: http://cacr.uwaterloo.ca/hac/about/chap14.pdf\n\n  INPUT: positive integers x = (xn ··· x1x0)b, y = (yt ··· y1y0)b with n ≥ t ≥ 1, yt != 0\n  OUTPUT: the quotient q = (qn−t ··· q1q0)b and remainder r = (rt ··· r1r0)b such that x = qy + r, 0 ≤ r < y\n*/\nexport function basicDivision(\n  X: number[], minX: number, maxX: number,\n  Y: ReadonlyArray<number>, minY: number, maxY: number,\n  base: number\n): [number[], number[], number, number] {\n\n  //1. Initialize the quotient\n  const lenY: number = maxY - minY;\n  const nMt: number = maxX - minX - lenY;\n  const Q: number[] = new Array(nMt + 1);\n  zero(Q, 0, nMt + 1);\n\n  //2. While X ≥ Yb^(n−t)\n  let maxR: number = maxX;\n  while(compare(X, minX + nMt, maxR, Y, minY, maxY) >= 0){\n\n    //Q[n−t] ← Q[n−t] + 1\n    ++Q[nMt];\n\n    //x ← x − Bb^(n−t)\n    maxR = subtraction(X, minX + nMt, maxR, Y, minY, maxY, base);\n  }\n\n  //3. For i from n down to (t + 1)\n  const yt: number = Y[maxY-1];\n  const ytm1: number = Y[maxY-2];\n  const QY: number[] = new Array(lenY + 1);\n  for(let i: number = maxX - 1, iMt: number = nMt; iMt-- > 0; --i){\n\n    //3.1 If x[i] = y[t] then set q[i−t−1] ← b − 1; otherwise set q[i−t−1] ← (x[i]b + x[i−1]) / y[t]\n    //3.2 While q[i−t−1] * (y[t]b + y[t−1]) > x[i]b^2 + x[i−1]b + x[i−2]\n    Q[iMt] = divThreeHalvesByTwo(X[i], X[i-1], X[i-2], yt, ytm1, base);\n\n    //3.3 x ← x − q[i−t−1] * yb^(i−t−1)\n    //3.4 If x < 0 then set x ← x + yb^(i−t−1) and q[i−t−1] ← q[i−t−1] − 1\n    if(Q[iMt] === 0){\n      continue;\n    }\n    copy(QY, 0, Y, minY, maxY);\n    let maxQY: number = singleDigitMultiplication(QY, 0, lenY, Q[iMt], base);\n    if(compare(QY, 0, maxQY, X, minX + iMt, maxR) > 0){\n      --Q[iMt];\n      maxQY = subtraction(QY, 0, maxQY, Y, minY, maxY, base);\n    }\n    maxR = subtraction(X, minX + iMt, maxR, QY, 0, maxQY, base);\n  }\n\n  //4. r ← x\n  //Adjust length of remainder\n  while(maxR > minX && X[maxR - 1] === 0){\n    --maxR;\n  }\n\n  //5. Return(q,r)\n  return [Q, X, (Q[nMt] === 0) ? nMt : nMt + 1, maxR];\n}\n\n/*\n  See: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.565&rep=rep1&type=pdf\n*/\nfunction divThreeHalvesByTwo(a1: number, a2: number, a3: number, b1: number, b2: number, base: number): number {\n  let q: number = a1*base + a2;\n  let r: number = q % b1;\n  q = 0 | (q / b1);\n  r = r*base - q*b2 + a3;\n  if(r < 0){\n    r = r + b1*base + b2;\n    q = (r < 0) ? q - 2 : q - 1;\n  }\n  return q;\n}\n","import {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {basicDivision} from '../algorithm/basicDivision';\nimport {singleDigitDivision} from '../algorithm/singleDigitDivision';\nimport {assign, setOne, setZero} from '../util/intUtils';\n\nexport function divideAndRemainder(A: Integer, B: Integer): [Integer, Integer] {\n\n  //If A / 0\n  if(B.precision === 0){\n    throw new EvalError(\"Divide by zero\");\n  }\n\n  //If self\n  if(A === B){\n    return [setOne(A), setZero({base: A.base})];\n  }\n\n  //Divide signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //If 0 / B or B = 1\n  if(A.precision === 0 || (B.precision === 1 && B.digits[0] === 1)){\n    return [A, setZero({base: A.base})];\n  }\n\n  //If A = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    return [setZero(A), setOne({base: A.base})];\n  }\n\n  //If different bases\n  const base: number = A.base;\n  if(base !== B.base){\n\n    //If A's max length in B's base < B's length\n    const ratio: number = Math.log(base) / Math.log(B.base);\n    if(Math.ceil(A.precision * ratio) < B.precision){\n      const remainder: Integer = assign({}, A);\n      return [setZero(A), remainder];\n    }\n\n    //Normalize bases\n    setBase(A, B.base);\n  }\n\n  //If A's length < B's length\n  if(A.precision < B.precision){\n    setBase(A, base);\n    const remainder: Integer = assign({}, A);\n    return [setZero(A), remainder];\n  }\n\n  //Choose best algorithm\n  const R: Integer = setOne({base: A.base});\n  if(B.precision < 2){\n    [A.precision, R.digits[0]] = singleDigitDivision(\n      A.digits, 0, A.precision, B.digits[0], A.base\n    );\n    if(R.digits[0] === 0){\n      setZero(R);\n    }\n  } else {\n    [\n      A.digits, R.digits, A.precision, R.precision\n    ] = basicDivision(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Return A and R\n  setBase(A, base);\n  setBase(R, base);\n  return [A, R];\n}\n","import {addition} from './addition';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A < B\n    A and B not overlapping array segments\n*/\nexport function reverseAddition(\n  A: number[], minA: number, maxA: number,\n  B: ReadonlyArray<number>, minB: number, maxB: number,\n  base: number\n): number{\n\n  //Add extra digits to A\n  const newMaxB: number = minB - minA + maxA;\n  for(let b: number = newMaxB; b < maxB; A[maxA++] = B[b++]){\n  }\n\n  //Do normal addition\n  return addition(A, minA, maxA, B, minB, newMaxB, base);\n}\n","import {Integer} from '../integer';\n\nexport function abs(A: Integer): Integer {\n  A.isNegative = false;\n  return A;\n}\n","import {Integer} from '../integer';\nimport {abs} from '../functional/abs';\nimport {add} from '../functional/add';\nimport {compare} from '../functional/compare';\nimport {copy} from '../functional/copy';\nimport {decrement} from '../functional/decrement';\nimport {divideAndRemainder} from '../functional/divideAndRemainder';\nimport {double} from '../functional/double';\nimport {gcd} from '../functional/gcd';\nimport {halve} from '../functional/halve';\nimport {increment} from '../functional/increment';\nimport {isEven} from '../functional/isEven';\nimport {lcm} from '../functional/lcm';\nimport {max} from '../functional/max';\nimport {min} from '../functional/min';\nimport {multiply} from '../functional/multiply';\nimport {negate} from '../functional/negate';\nimport {pow} from '../functional/pow';\nimport {signum} from '../functional/signum';\nimport {setBase} from '../functional/setBase';\nimport {subtract} from '../functional/subtract';\nimport {square} from '../functional/square';\nimport {isInteger} from '../functional/isInteger';\nimport {toInteger} from '../functional/toInteger';\nimport {toString} from '../functional/toString';\nimport {assign} from '../util/intUtils';\n\nexport class BigInt implements Integer {\n  static get MINUS_ONE(): BigInt {return new BigInt(-1);}\n  static get ZERO(): BigInt {return new BigInt(0);}\n  static get ONE(): BigInt {return new BigInt(1);}\n\n  base!: number;\n  digits!: number[];\n  precision!: number;\n  isNegative!: boolean;\n\n  constructor(input: Integer | number | string) {\n    if(isInteger(input)){\n      copy(this, input);\n    } else {\n      assign(this, toInteger(input));\n    }\n  }\n\n  abs(): BigInt {\n    return BigInt.tryBigInt(abs(this));\n  }\n\n  add(addend: Integer): BigInt {\n    return BigInt.tryBigInt(add(this, addend));\n  }\n\n  clone(): BigInt {\n    return new BigInt(this);\n  }\n\n  compareTo(B: Integer): number {\n    return compare(this, B);\n  }\n\n  divide(divisor: Integer): BigInt {\n    return this.divideAndRemainder(divisor)[0];\n  }\n\n  divideAndRemainder(divisor: Integer): [BigInt, BigInt] {\n    const [Q, R]: [Integer, Integer] = divideAndRemainder(this, divisor);\n    return [BigInt.tryBigInt(Q), assign(BigInt.ZERO, R) as BigInt];\n  }\n\n  double(): BigInt {\n    return BigInt.tryBigInt(double(this));\n  }\n\n  gcd(B: Integer): BigInt {\n    return BigInt.tryBigInt(gcd(this, B));\n  }\n\n  getBase(): number {\n    return this.base;\n  }\n\n  halve(): [BigInt, BigInt] {\n    const [Q, R]: [Integer, Integer] = halve(this);\n    return [BigInt.tryBigInt(Q), new BigInt(R.precision)];\n  }\n\n  // tslint:disable-next-line:no-any\n  static isBigInt(n: any): n is BigInt {\n    return n instanceof BigInt;\n  }\n\n  isEven(): boolean {\n    return isEven(this);\n  }\n\n  isOdd(): boolean {\n    return !isEven(this);\n  }\n\n  lcm(B: Integer): BigInt {\n    return BigInt.tryBigInt(lcm(this, B));\n  }\n\n  static max(A: Integer, B: Integer): BigInt {\n    return BigInt.tryBigInt(max(A, B));\n  }\n\n  max(B: Integer): BigInt {\n    const C: Integer = max(this, B);\n    if(C === this){\n      return this;\n    }\n    if(C === B){\n      return copy(this, C) as BigInt;\n    }\n    return assign(BigInt.ZERO, C) as BigInt;\n  }\n\n  static min(A: Integer, B: Integer): BigInt {\n    return BigInt.tryBigInt(min(A, B));\n  }\n\n  min(B: Integer): BigInt {\n    const C: Integer = min(this, B);\n    if(C === this){\n      return this;\n    }\n    if(C === B){\n      return copy(this, C) as BigInt;\n    }\n    return assign(BigInt.ZERO, C) as BigInt;\n  }\n\n  minusminus(): BigInt {\n    return BigInt.tryBigInt(decrement(this));\n  }\n\n  multiply(multiplier: Integer): BigInt {\n    return BigInt.tryBigInt(multiply(this, multiplier));\n  }\n\n  negate(): BigInt {\n    return BigInt.tryBigInt(negate(this));\n  }\n\n  plusplus(): BigInt {\n    return BigInt.tryBigInt(increment(this));\n  }\n\n  pow(power: Integer): BigInt {\n    return BigInt.tryBigInt(pow(this, power));\n  }\n\n  remainder(divisor: Integer): BigInt {\n    const R: BigInt = this.divideAndRemainder(divisor)[1];\n    return assign(this, R) as BigInt;\n  }\n\n  set(source: Integer): BigInt {\n    return copy(this, source) as BigInt;\n  }\n\n  setBase(base: number): BigInt {\n    return BigInt.tryBigInt(setBase(this, base));\n  }\n\n  signum(): number {\n    return signum(this);\n  }\n\n  square(): BigInt {\n    return BigInt.tryBigInt(square(this));\n  }\n\n  subtract(subtrahend: Integer): BigInt {\n    return BigInt.tryBigInt(subtract(this, subtrahend));\n  }\n\n  toString(): string {\n    return toString(this);\n  }\n\n  private static tryBigInt(A: Integer): BigInt {\n    return BigInt.isBigInt(A) ? A : assign(BigInt.ZERO, A) as BigInt;\n  }\n}\n","import {halve} from './halve';\nimport {karatsubaSquare} from './karatsubaSquare';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\n\n/*\n  f(A, B) = A^B = Math.pow(A, B)\n  Overwrites A\n  Overwrites B\n  Assumes A > 0\n  Assumes B > 0\n*/\nexport function exponentiation(\n  A: number[], minA: number, maxA: number, baseA: number,\n  B: number[], minB: number, maxB: number, baseB: number\n): number {\n  let maxC = 1;\n  const C: number[] = [1];\n\n  //Until power is 1\n  while(minB + 1 < maxB || B[minB] > 1){\n\n    //Divide the power in half\n    let remainder: number;\n    [maxB, remainder] = halve(B, minB, maxB, baseB);\n\n    //If remainder\n    if(remainder > 0){\n      C.length = maxC - minA + maxA;\n      maxC = karatsubaMultiplication(C, 0, maxC, A, minA, maxA, baseA);\n    }\n\n    //Square the base\n    maxA = karatsubaSquare(A, minA, maxA, baseA);\n  }\n\n  if(C.length > 1){\n    maxA = karatsubaMultiplication(A, minA, maxA, C, 0, maxC, baseA);\n  }\n\n  return maxA;\n}\n","import {safeShiftUp} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(A, B) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n\n  Explanation:\n      a  b  c  _  _  _\n    *\n      d  e  f\n    ------------------\n              cd ce cf\n           bd be bf\n        ad ae af\n    ------------------\n      g  h  i  j  k  l\n\n*/\nexport function longMultiplication(\n  A: number[], minA: number, maxA: number,\n  B: ReadonlyArray<number>, minB: number, maxB: number,\n  base: number\n): number {\n\n  //Shift A to the left\n  const lenB: number = maxB - minB;\n  const minC: number = minA + lenB;\n  safeShiftUp(A, minA, maxA, lenB);\n  zero(A, minA, minC);\n\n  //For each digit in multiplicand\n  const maxC: number = maxA + lenB;\n  for(let a: number = minC; a < maxC; ++a){\n    let carry = 0;\n    let i: number = a - lenB;\n\n    //Multiply by multiplier\n    for(let b: number = minB; b < maxB; ++b){\n      let v: number = A[a] * B[b] + A[i] + carry;\n      if(v < base){\n        carry = 0;\n      } else {\n        carry = 0 | (v / base);\n        v = v % base;\n      }\n      A[i++] = v;\n    }\n\n    //Add remaining carry\n    A[i] = carry;\n  }\n\n  //Return new length\n  return (A[maxC - 1] === 0) ? maxC - 1 : maxC;\n}\n","import {unsafeShiftUp} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n\n  Explanation:\n      a   b   c   d   e   f   g   _   _   _   _   _   _   _\n    *\n      a   b   c   d   e   f   g\n    -------------------------------------------------------\n                                 ag  bg  cg  dg  eg  fg  gg\n                             af  bf  cf  df  ef  ff  fg\n                         ae  be  ce  de  ee  ef  eg\n                     ad  bd  cd  dd  de  df  dg\n                 ac  bc  cc  cd  ce  cf  cg\n             ab  bb  bc  bd  be  bf  bg\n         aa  ab  ac  ad  ae  af  ag\n    -------------------------------------------------------\n                                2ag 2bg 2cg 2dg 2eg 2fg  gg\n                            2af 2bf 2cf 2df 2ef  ff\n                        2ae 2be 2ce 2de  ee\n                    2ad 2bd 2cd  dd\n                2ac 2bc  cc\n            2ab  bb\n         aa\n    -------------------------------------------------------\n      h   i   j   k   l   m   n   o   p   q   r   s   t   u\n*/\nexport function longSquare(\n  A: number[], min: number, max: number, base: number\n): number {\n\n  //Move digits to the left\n  let newMax: number = max - min;\n  unsafeShiftUp(A, min, max, newMax);\n  zero(A, min, max);\n\n  //For every digit\n  newMax = newMax + max;\n  for(let d: number = min, s: number = max; d < newMax; d = d + 2){\n    const digit: number = A[s++];\n\n    //Square the digit\n    let carry = 0;\n    A[d] = A[d] + digit * digit;\n    if(A[d] >= base){\n      carry = 0 | (A[d] / base);\n      A[d] = A[d] % base;\n    }\n\n    //Multiply by higher digits twice\n    let o: number = d + 1;\n    for(let m: number = s; m < newMax; ++o){\n\n      //Multiply\n      let quotient = 0;\n      let product: number = A[m++] * digit;\n      if(product >= base){\n        quotient = 0 | (product / base);\n        product = product % base;\n      }\n\n      //Double\n      quotient = quotient << 1;\n      product = product << 1;\n\n      //Add\n      A[o] = A[o] + product + carry;\n      carry = quotient;\n      if(A[o] >= base){\n        carry = carry + (0 | (A[o] / base));\n        A[o] = A[o] % base;\n      }\n    }\n\n    //Place remaining carry\n    A[o] = carry;\n  }\n\n  //Return new length\n  return A[newMax - 1] === 0 ? newMax - 1 : newMax;\n}\n","import {basicDivision} from './basicDivision';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\nimport {steinGCD} from './steinGCD';\n\n/*\n  f(A, B) = lcm(A, B)\n  Overwrites A\n  Asumes A > 0, B > 0\n  See: https://en.wikipedia.org/wiki/Least_common_multiple\n*/\nexport function lcm(\n  A: number[], minA: number, maxA: number,\n  B: number[], minB: number, maxB: number,\n  base: number\n): [number[], number] {\n\n  //Copy A\n  let C: number[] = A.slice(minA, maxA);\n  let maxC: number = C.length;\n\n  //Copy B\n  const D: number[] = B.slice(minB, maxB);\n  const maxD: number = D.length;\n\n  //Get gcd(A, B)\n  [C,,maxC] = steinGCD(C, 0, maxC, D, 0, maxD, base);\n  [C,,maxC] = basicDivision(A, minA, maxA, C, 0, maxC, base);\n  maxC = karatsubaMultiplication(C, 0, maxC, B, minB, maxB, base);\n  return [C, maxC];\n}\n","/*\n  f(A, B) = A / B\n  Overwrites A\n  Assumes B > 0\n  Assumes A > 0\n  Assumes no leading zeros\n*/\nexport function singleDigitDivision(\n  A: number[], minA: number, maxA: number,\n  B: number, base: number\n): [number, number] {\n  let remainder = 0;\n  for(let a: number = maxA; a-- > minA; remainder = remainder % B){\n    remainder = remainder * base + A[a];\n    A[a] = 0 | (remainder / B);\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n","import {Integer} from '../integer';\nimport {copy} from './copy';\n\nexport function clone(A: Integer) : Integer {\n  return copy({}, A);\n}\n","/*\n  f(A, B) = A - B\n  Overwrites A\n  Assumes B > A\n*/\nexport function reverseSubtraction(\n  A: number[], minA: number, maxA: number,\n  B: ReadonlyArray<number>, minB: number, maxB: number,\n  base: number\n): number {\n\n  //Subtract common digits\n  let borrow = 0;\n  while(minA < maxA){\n    let v: number = B[minB++] - borrow - A[minA];\n    if (v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[minA++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    for(borrow = base - 1; B[minB] === 0; ++minB){\n      A[minA++] = borrow;\n    }\n    A[minA++] = B[minB++] - 1;\n  }\n\n  //Copy extra digits\n  if(minB < maxB){\n    do {\n      A[minA++] = B[minB++];\n    } while (minB < maxB);\n\n  //Check for new length\n  } else {\n    while(A[minA-1] === 0){\n      --minA;\n    }\n  }\n\n  return minA;\n}\n","//Assumes valid inputs\nexport function setBase(\n  A: number[], minA: number, maxA: number,\n  curBase: number, newBase: number\n): [number[], number] {\n\n  //If zero or same base\n  if(maxA === minA || curBase === newBase){\n    return [A, maxA];\n  }\n\n  //Create new array\n  let maxB = 0;\n  const B: number[] = new Array(Math.ceil(\n    (maxA - minA) * Math.log(curBase) / Math.log(newBase)\n  ));\n\n  //Return number in newBase\n  do {\n    let remainder = 0;\n    for(let i: number = maxA; i > minA; remainder = remainder % newBase){\n      remainder = remainder*curBase + A[--i];\n      A[i] = 0 | (remainder / newBase);\n    }\n    B[maxB++] = remainder;\n    while(A[maxA - 1] === 0){\n      if(--maxA === minA){\n        return [B, maxB];\n      }\n    }\n  } while(true);\n}\n","//Globals\nexport {Globals as __globals__} from './globals';\n\n//Functional\nexport {abs} from './functional/abs';\nexport {add} from './functional/add';\nexport {clone} from './functional/clone';\nexport {compare} from './functional/compare';\nexport {copy} from './functional/copy';\nexport {decrement} from './functional/decrement';\nexport {divideAndRemainder} from './functional/divideAndRemainder';\nexport {double} from './functional/double';\nexport {gcd} from './functional/gcd';\nexport {halve} from './functional/halve';\nexport {increment} from './functional/increment';\nexport {isEven} from './functional/isEven';\nexport {isInteger} from './functional/isInteger';\nexport {lcm} from './functional/lcm';\nexport {max} from './functional/max';\nexport {min} from './functional/min';\nexport {multiply} from './functional/multiply';\nexport {negate} from './functional/negate';\nexport {pow} from './functional/pow';\nexport {setBase} from './functional/setBase';\nexport {signum} from './functional/signum';\nexport {square} from './functional/square';\nexport {subtract} from './functional/subtract';\nexport {toInteger} from './functional/toInteger';\nexport {toString} from './functional/toString';\n\n//OOP\nexport {BigInt as Int} from './oop/bigInt';\n"],"sourceRoot":""}