import { Integer } from '../integer';
export declare class BigInt {
    static readonly MINUS_ONE: BigInt;
    static readonly ZERO: BigInt;
    static readonly ONE: BigInt;
    base: number;
    digits: number[];
    precision: number;
    isNegative: boolean;
    constructor(input: Integer | number | string);
    abs(isMutable?: boolean): BigInt;
    add(addend: Integer, isMutable?: boolean): BigInt;
    clone(): BigInt;
    compareTo(B: Integer): number;
    set(source: Integer): BigInt;
    divide(divisor: Integer, isMutable?: boolean): BigInt;
    divideAndRemainder(divisor: Integer, isMutable?: boolean): [BigInt, BigInt];
    double(isMutable?: boolean): BigInt;
    gcd(B: Integer, isMutable?: boolean): BigInt;
    getBase(): number;
    halve(isMutable?: boolean): [BigInt, BigInt];
    static isBigInt(n: any): n is BigInt;
    isEven(): boolean;
    isOdd(): boolean;
    lcm(B: Integer, isMutable?: boolean): BigInt;
    static max(A: Integer, B: Integer, isMutable?: boolean): BigInt;
    max(B: Integer, isMutable?: boolean): BigInt;
    static min(A: Integer, B: Integer, isMutable?: boolean): BigInt;
    min(B: Integer, isMutable: boolean): BigInt;
    minusminus(isMutable?: boolean): BigInt;
    multiply(multiplier: Integer, isMutable?: boolean): BigInt;
    negate(isMutable?: boolean): BigInt;
    plusplus(isMutable?: boolean): BigInt;
    pow(power: Integer, isMutable?: boolean): BigInt;
    remainder(divisor: Integer, isMutable?: boolean): BigInt;
    setBase(base: number, isMutable?: boolean): BigInt;
    signum(): number;
    square(isMutable?: boolean): BigInt;
    subtract(subtrahend: Integer, isMutable?: boolean): BigInt;
    toString(): string;
    private static tryBigInt(A);
}
