{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///big.js","webpack:///webpack/bootstrap 51775bed554b3239c3db","webpack:///./src/index.ts","webpack:///./src/functional/clone.ts","webpack:///./src/util/intUtils.ts","webpack:///./src/functional/copy.ts","webpack:///./src/util/numUtils.ts","webpack:///./src/algorithm/subtraction.ts","webpack:///./src/functional/compare.ts","webpack:///./src/globals.ts","webpack:///./src/util/arrayUtils.ts","webpack:///./src/algorithm/addition.ts","webpack:///./src/functional/negate.ts","webpack:///./src/algorithm/compare.ts","webpack:///./src/algorithm/decrement.ts","webpack:///./src/algorithm/halve.ts","webpack:///./src/algorithm/increment.ts","webpack:///./src/algorithm/karatsubaMultiplication.ts","webpack:///./src/functional/add.ts","webpack:///./src/functional/decrement.ts","webpack:///./src/functional/double.ts","webpack:///./src/functional/isEven.ts","webpack:///./src/functional/setBase.ts","webpack:///./src/functional/square.ts","webpack:///./src/functional/subtract.ts","webpack:///./src/algorithm/basicDivision.ts","webpack:///./src/algorithm/double.ts","webpack:///./src/algorithm/isEven.ts","webpack:///./src/algorithm/karatsubaSquare.ts","webpack:///./src/algorithm/reverseAddition.ts","webpack:///./src/algorithm/singleDigitMultiplication.ts","webpack:///./src/algorithm/steinGCD.ts","webpack:///./src/functional/abs.ts","webpack:///./src/functional/divideAndRemainder.ts","webpack:///./src/functional/gcd.ts","webpack:///./src/functional/halve.ts","webpack:///./src/functional/increment.ts","webpack:///./src/functional/isInteger.ts","webpack:///./src/functional/lcm.ts","webpack:///./src/functional/max.ts","webpack:///./src/functional/min.ts","webpack:///./src/functional/multiply.ts","webpack:///./src/functional/pow.ts","webpack:///./src/functional/signum.ts","webpack:///./src/functional/toInteger.ts","webpack:///./src/functional/toString.ts","webpack:///./src/algorithm/exponentiation.ts","webpack:///./src/algorithm/lcm.ts","webpack:///./src/algorithm/longMultiplication.ts","webpack:///./src/algorithm/longSquare.ts","webpack:///./src/algorithm/reverseSubtraction.ts","webpack:///./src/algorithm/setBase.ts","webpack:///./src/algorithm/singleDigitDivision.ts","webpack:///./src/oop/bigInt.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","globals_1","_globals","Globals","abs_1","abs","add_1","add","clone_1","clone","compare_1","compare","copy_1","copy","decrement_1","decrement","divideAndRemainder_1","divideAndRemainder","double_1","double","gcd_1","gcd","halve_1","halve","increment_1","increment","isEven_1","isEven","isInteger_1","isInteger","lcm_1","lcm","max_1","max","min_1","min","multiply_1","multiply","negate_1","negate","pow_1","pow","setBase_1","setBase","signum_1","signum","square_1","square","subtract_1","subtract","toInteger_1","toInteger","toString_1","toString","bigInt_1","Int","BigInt","a","assign","b","base","digits","precision","isNegative","changeBase","setOne","setZero","intUtils_1","slice","d","strToDigits","trim","length","TypeError","replace","match","e","f","Array","g","h","zero","subtraction","i","j","k","Math","log","ceil","MIN_BASE","MAX_BASE","MAX_PRECISION","DEFAULT_IS_MUTABLE","DEFAULT_BASE","DEFAULT_CIPHER","Object","freeze","unsafeShiftUp","safeShiftUp","printArr","map","join","addition","karatsubaMultiplication","numUtils_1","l","arrayUtils_1","addition_1","n","o","subtraction_1","reverseAddition_1","reverseAddition","q","RangeError","longSquare_1","longSquare","karatsubaSquare_1","karatsubaSquare","reverseSubtraction_1","reverseSubtraction","basicDivision","s","divThreeHalvesByTwo","t","singleDigitMultiplication_1","singleDigitMultiplication","steinGCD","EvalError","singleDigitDivision_1","singleDigitDivision","basicDivision_1","steinGCD_1","hasOwnProperty","longMultiplication_1","longMultiplication","karatsubaMultiplication_1","exponentiation_1","exponentiation","reverse","r","defineProperty","get","enumerable","configurable","prototype","toBigInt","compareTo","divide","ZERO","getBase","half","isBigInt","isOdd","minusminus","plusplus","remainder"],"mappings":"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","file":"big.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var globals_1=__webpack_require__(7);exports._globals=globals_1.Globals;var abs_1=__webpack_require__(30);exports.abs=abs_1.abs;var add_1=__webpack_require__(16);exports.add=add_1.add;var clone_1=__webpack_require__(1);exports.clone=clone_1.clone;var compare_1=__webpack_require__(6);exports.compare=compare_1.compare;var copy_1=__webpack_require__(3);exports.copy=copy_1.copy;var decrement_1=__webpack_require__(17);exports.decrement=decrement_1.decrement;var divideAndRemainder_1=__webpack_require__(31);exports.divideAndRemainder=divideAndRemainder_1.divideAndRemainder;var double_1=__webpack_require__(18);exports.double=double_1.double;var gcd_1=__webpack_require__(32);exports.gcd=gcd_1.gcd;var halve_1=__webpack_require__(33);exports.halve=halve_1.halve;var increment_1=__webpack_require__(34);exports.increment=increment_1.increment;var isEven_1=__webpack_require__(19);exports.isEven=isEven_1.isEven;var isInteger_1=__webpack_require__(35);exports.isInteger=isInteger_1.isInteger;var lcm_1=__webpack_require__(36);exports.lcm=lcm_1.lcm;var max_1=__webpack_require__(37);exports.max=max_1.max;var min_1=__webpack_require__(38);exports.min=min_1.min;var multiply_1=__webpack_require__(39);exports.multiply=multiply_1.multiply;var negate_1=__webpack_require__(10);exports.negate=negate_1.negate;var pow_1=__webpack_require__(40);exports.pow=pow_1.pow;var setBase_1=__webpack_require__(20);exports.setBase=setBase_1.setBase;var signum_1=__webpack_require__(41);exports.signum=signum_1.signum;var square_1=__webpack_require__(21);exports.square=square_1.square;var subtract_1=__webpack_require__(22);exports.subtract=subtract_1.subtract;var toInteger_1=__webpack_require__(42);exports.toInteger=toInteger_1.toInteger;var toString_1=__webpack_require__(43);exports.toString=toString_1.toString;var bigInt_1=__webpack_require__(51);exports.Int=bigInt_1.BigInt;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(3);function clone(a){return copy_1.copy({},a)}exports.clone=clone;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var setBase_1=__webpack_require__(49);function assign(a,b){return a.base=b.base,a.digits=b.digits,a.precision=b.precision,a.isNegative=b.isNegative,a}exports.assign=assign;function changeBase(a,b){return c=setBase_1.setBase(a.digits,0,a.precision,a.base,b),a.digits=c[0],a.precision=c[1],a.base=b,a;var c}exports.changeBase=changeBase;function setOne(a){return a.precision=1,a.digits=[1],a.isNegative=!1,a}exports.setOne=setOne;function setZero(a){return a.precision=0,a.digits=[],a.isNegative=!1,a}exports.setZero=setZero;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var intUtils_1=__webpack_require__(2);function copy(a,b){return intUtils_1.assign(a,b),a.digits=a.digits.slice(0,a.precision),a}exports.copy=copy;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function max(c,d){return c<d?d:c}exports.max=max;function min(c,d){return c>d?d:c}exports.min=min;function strToDigits(c){if(c=c.trim(),1>c.length)throw new TypeError(\"NaN\");var d=\"-\"===c[0];if(c=c.replace(/^[-+]?0*/,\"\").replace(/\\.[0-9]+$/,\"\"),c.match(/[^\\d]/))throw new TypeError(\"NaN\");var e=c.length;if(0===e)return[[],!1];var f=Array(e);for(var g=0,h=e;0<h;++g)f[g]=0|c[--h];return[f,d]}exports.strToDigits=strToDigits;function zero(c,d,e){for(;d<e;)c[d++]=0}exports.zero=zero;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(12);function subtraction(b,c,d,e,f,g,h){for(var i=c,j=0;f<g;){var k=b[i]-j-e[f++];0>k?(j=1,k+=h):j=0,b[i++]=k}if(0<j)return decrement_1.decrement(b,i,d,h);if(i===d){for(;i-->c&&0===b[i];);d=i+1}return d}exports.subtraction=subtraction;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var intUtils_1=__webpack_require__(2),compare_1=__webpack_require__(11);function compare(a,b){if(a===b)return 0;if(a.isNegative!==b.isNegative)return a.isNegative?-1:1;var c=a.base;if(a.base!==b.base){var d=Math.log(a.base)/Math.log(b.base);if(Math.ceil(a.precision*d)>b.base)return 1;if(Math.ceil((a.precision+1)*d)<b.precision)return-1;intUtils_1.changeBase(a,b.base)}var e=compare_1.compare(a.digits,0,a.precision,b.digits,0,b.precision);return intUtils_1.changeBase(a,c),e}exports.compare=compare;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';var Globals=function(){return function(){}}();Globals.MIN_BASE=2,Globals.MAX_BASE=94906265,Globals.MAX_PRECISION=4294967295,Globals.DEFAULT_IS_MUTABLE=!1,Globals.DEFAULT_BASE=94906264,Globals.DEFAULT_CIPHER=Object.freeze(['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']),exports.Globals=Globals;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function unsafeShiftUp(a,b,c,d){for(var e=b+d;b<c;a[e++]=a[b++]);}exports.unsafeShiftUp=unsafeShiftUp;function safeShiftUp(a,b,c,d){for(var e=c+d;c>b;a[--e]=a[--c]);}exports.safeShiftUp=safeShiftUp;function copy(a,b,c,d,e){for(;d<e;)a[b++]=c[d++]}exports.copy=copy;function printArr(a,b,c,d,e){return void 0===d&&(d=b),void 0===e&&(e=c),a=a.map(function(f){return null==f||f!==f?f+\"\":f}),\"[\"+a.slice(b,d).join(\", \")+\"|\"+a.slice(d,e).join(\", \")+\"|\"+a.slice(e,c).join(\", \")+\"]\"}exports.printArr=printArr;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var increment_1=__webpack_require__(14);function addition(a,b,c,d,e,f,g){for(var h=0;e<f;){var i=a[b]+d[e++]+h;i<g?h=0:(h=1,i-=g),a[b++]=i}return 0<h?increment_1.increment(a,b,c,g):c}exports.addition=addition;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1);function negate(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative=0<a.precision&&!a.isNegative,a}exports.negate=negate;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function compare(a,b,c,e,f,g){var h=c-b-g+f;if(0!==h)return 0>h?-1:1;for(;c>b;)if(a[--c]!==e[--g])return a[c]<e[g]?-1:1;return 0}exports.compare=compare;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function decrement(a,b,c,d){for(;0===a[b];a[b++]=d-1);return--a[b],b+1===c&&0===a[b]?c-1:c}exports.decrement=decrement;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function halve(a,b,c,d){var e=0;for(var f=c;f-->b;a[f]>>>=1)a[f]+=d&-e,e=1&a[f];return 0===a[c-1]&&--c,[c,e]}exports.halve=halve;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function increment(a,b,c,d){for(--d;b<c&&a[b]===d;a[b++]=0);return b===c?a[c++]=1:++a[b],c}exports.increment=increment;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(9),reverseAddition_1=__webpack_require__(27),subtraction_1=__webpack_require__(5),arrayUtils_1=__webpack_require__(8),numUtils_1=__webpack_require__(4);function karatsubaMultiplication(a,b,c,d,e,f,g){var h=numUtils_1.max(c-b,f-e);if(2>h)return h=a[b]*d[e],h<g?a[c]=0:(a[c++]=0|h/g,h%=g),a[b]=h,c;h=h+1>>>1;var i=b+h,j=numUtils_1.min(i,c),k=numUtils_1.min(e+h,f),l=Array(k-e+1);arrayUtils_1.copy(l,0,d,e,k);var m=addition_1.addition(l,0,k-e,d,k,f,g),n=Array(j-b+1+m);arrayUtils_1.copy(n,0,a,b,j);var o=addition_1.addition(n,0,j-b,a,j,c,g);o=karatsubaMultiplication(n,0,o,l,0,m,g),a[c]=0,arrayUtils_1.unsafeShiftUp(a,j,c,h);var p=karatsubaMultiplication(a,b,j,d,e,k,g);if(o=subtraction_1.subtraction(n,0,o,a,b,p,g),j===c||k===f)return p<=i?(c=i+o,numUtils_1.zero(a,p,i),arrayUtils_1.copy(a,i,n,0,o)):o>p-i?c=reverseAddition_1.reverseAddition(a,i,p,n,0,o,g):c=addition_1.addition(a,i,p,n,0,o,g),c;numUtils_1.zero(a,p,c);var q=j+h;return c=karatsubaMultiplication(a,q,c+h,d,k,f,g),o=subtraction_1.subtraction(n,0,o,a,q,c,g),c=addition_1.addition(a,i,c,n,0,o,g),c}exports.karatsubaMultiplication=karatsubaMultiplication;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(3),double_1=__webpack_require__(18),negate_1=__webpack_require__(10),subtract_1=__webpack_require__(22),addition_1=__webpack_require__(9),reverseAddition_1=__webpack_require__(27),intUtils_1=__webpack_require__(2);function add(a,b,c){if(void 0===c&&(c=!1),a===b)return double_1.double(a,c);if(a=c?a:clone_1.clone(a),0===b.precision)return a;var d=a.base;return 0===a.precision?(a=copy_1.copy(a,b),intUtils_1.changeBase(a,d)):(intUtils_1.changeBase(a,b.base),a.isNegative===b.isNegative?a.precision<b.precision?(a.digits.length<=b.precision&&(a.digits.length=b.precision),a.precision=reverseAddition_1.reverseAddition(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=addition_1.addition(a.digits,0,a.precision,b.digits,0,b.precision,a.base):(a=negate_1.negate(a,!0),a=subtract_1.subtract(a,b,!0),a=negate_1.negate(a,!0)),intUtils_1.changeBase(a,d))}exports.add=add;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),decrement_1=__webpack_require__(12),increment_1=__webpack_require__(14),intUtils_1=__webpack_require__(2);function decrement(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative?a.precision=increment_1.increment(a.digits,0,a.precision,a.base):0===a.precision?(intUtils_1.setOne(a),a.isNegative=!0):a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),a}exports.decrement=decrement;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),double_1=__webpack_require__(24);function double(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.precision=double_1.double(a.digits,0,a.precision,a.base),a}exports.double=double;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var isEven_1=__webpack_require__(25);function isEven(a){return isEven_1.isEven(a.digits,0,a.precision,a.base)}exports.isEven=isEven;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var globals_1=__webpack_require__(7),clone_1=__webpack_require__(1),intUtils_1=__webpack_require__(2);function setBase(a,b,c){if(void 0===c&&(c=!1),b=0|b,a.base===b)return c?a:clone_1.clone(a);if(b<globals_1.Globals.MIN_BASE)throw RangeError(b+\" < MIN_BASE (\"+globals_1.Globals.MIN_BASE+\")\");if(b>globals_1.Globals.MAX_BASE)throw RangeError(b+\" > MAX_BASE (\"+globals_1.Globals.MAX_BASE+\")\");return intUtils_1.changeBase(c?a:clone_1.clone(a),b)}exports.setBase=setBase;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),karatsubaSquare_1=__webpack_require__(26),longSquare_1=__webpack_require__(47);function square(a,b){if(void 0===b&&(b=!1),a=b?a:clone_1.clone(a),0===a.precision)return a;a.isNegative=!1;var c=2*a.precision-1;return a.digits.length<c&&(a.digits.length=c),a.precision=500>a.precision?longSquare_1.longSquare(a.digits,0,a.precision,a.base):karatsubaSquare_1.karatsubaSquare(a.digits,0,a.precision,a.base),a}exports.square=square;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var add_1=__webpack_require__(16),compare_1=__webpack_require__(6),clone_1=__webpack_require__(1),copy_1=__webpack_require__(3),negate_1=__webpack_require__(10),reverseSubtraction_1=__webpack_require__(48),subtraction_1=__webpack_require__(5),intUtils_1=__webpack_require__(2);function subtract(a,b,d){if(void 0===d&&(d=!1),a===b)return intUtils_1.setZero(d?a:{base:a.base});if(a=d?a:clone_1.clone(a),0===b.precision)return a;var e=a.base;if(0===a.precision)return a=copy_1.copy(a,b),a=negate_1.negate(a,!0),intUtils_1.changeBase(a,e);if(a.isNegative!==b.isNegative)return a=negate_1.negate(a,!0),a=add_1.add(a,b,!0),negate_1.negate(a,!0);intUtils_1.changeBase(a,b.base);var f=compare_1.compare(a,b);return 0===f?(a.base=e,intUtils_1.setZero(a)):(0>f?(negate_1.negate(a,!0),a.digits.length<b.precision&&(a.digits.length=b.precision),a.precision=reverseSubtraction_1.reverseSubtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=subtraction_1.subtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,e))}exports.subtract=subtract;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(11),singleDigitMultiplication_1=__webpack_require__(28),subtraction_1=__webpack_require__(5),arrayUtils_1=__webpack_require__(8),numUtils_1=__webpack_require__(4);function basicDivision(a,b,c,d,e,f,g){var h=f-e,j=c-b-h,k=Array(j+1);numUtils_1.zero(k,0,j+1);for(var l=c;0<=compare_1.compare(a,b+j,l,d,e,f);)++k[j],l=subtraction_1.subtraction(a,b+j,l,d,e,f,g);var m=d[f-1],n=d[f-2],o=Array(h+1);for(var p=c-1,s=j;0<s--;--p)if(k[s]=divThreeHalvesByTwo(a[p],a[p-1],a[p-2],m,n,g),0!==k[s]){arrayUtils_1.copy(o,0,d,e,f);var t=singleDigitMultiplication_1.singleDigitMultiplication(o,0,h,k[s],g);0<compare_1.compare(o,0,t,a,b+s,l)&&(--k[s],t=subtraction_1.subtraction(o,0,t,d,e,f,g)),l=subtraction_1.subtraction(a,b+s,l,o,0,t,g)}for(;l>b&&0===a[l-1];)--l;return[k,a,0===k[j]?j:j+1,l]}exports.basicDivision=basicDivision;function divThreeHalvesByTwo(a,b,c,d,e,f){var g=a*f+b,h=g%d;return g=0|g/d,h=h*f-g*e+c,0>h&&(h=h+d*f+e,g=0>h?g-2:g-1),g}\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function double(a,b,c,d){for(var e=0;b<c;){var f=(a[b]<<1)+e;f<d?e=0:(e=1,f-=d),a[b++]=f}return 0<e&&(a[b++]=1),b}exports.double=double;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function isEven(a,b,c,d){if(b===c)return!0;if(0==(1&d))return 0==(1&a[b]);for(var e=0;b<c;)e^=a[b++];return 0==(1&e)}exports.isEven=isEven;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(9),subtraction_1=__webpack_require__(5),arrayUtils_1=__webpack_require__(8),numUtils_1=__webpack_require__(4);function karatsubaSquare(a,b,c,d){var e=c-b;if(2>e)return e=a[b]*a[b],e<d?a[c]=0:(a[c++]=0|e/d,e%=d),a[b]=e,c;e=e+1>>>1;var f=b+e,g=Array(2*e+2);arrayUtils_1.copy(g,0,a,b,f);var h=addition_1.addition(g,0,e,a,f,c,d);a[c]=0,arrayUtils_1.unsafeShiftUp(a,f,c,e);var i=karatsubaSquare(a,b,f,d);numUtils_1.zero(a,i,c);var j=f+e;return c=karatsubaSquare(a,j,c+e,d),h=karatsubaSquare(g,0,h,d),h=subtraction_1.subtraction(g,0,h,a,b,i,d),h=subtraction_1.subtraction(g,0,h,a,j,c,d),addition_1.addition(a,f,c,g,0,h,d)}exports.karatsubaSquare=karatsubaSquare;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(9);function reverseAddition(a,c,d,e,f,g,h){var i=f-c+d;for(var j=i;j<g;a[d++]=e[j++]);return addition_1.addition(a,c,d,e,f,i,h)}exports.reverseAddition=reverseAddition;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitMultiplication(a,b,c,d,e){for(var f=0;b<c;){var g=a[b]*d+f;g<e?f=0:(f=0|g/e,g%=e),a[b++]=g}return 0<f&&(a[b++]=f),b}exports.singleDigitMultiplication=singleDigitMultiplication;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(11),double_1=__webpack_require__(24),halve_1=__webpack_require__(13),isEven_1=__webpack_require__(25),subtraction_1=__webpack_require__(5);function steinGCD(a,b,d,e,f,g,h){for(var i=0;isEven_1.isEven(a,b,d,h)&&isEven_1.isEven(e,f,g,h);)d=halve_1.halve(a,b,d,h)[0],g=halve_1.halve(e,f,g,h)[0],++i;for(;isEven_1.isEven(a,b,d,h);)d=halve_1.halve(a,b,d,h)[0];do{for(;isEven_1.isEven(e,f,g,h);)g=halve_1.halve(e,f,g,h)[0];var j=compare_1.compare(a,b,d,e,f,g);if(0===j)break;if(0<j){var k=a;a=e,e=k,j=b,b=f,f=j,j=d,d=g,g=j}g=subtraction_1.subtraction(e,f,g,a,b,d,h),g=halve_1.halve(e,f,g,h)[0]}while(!0);for(;0<i--;)d=double_1.double(a,b,d,h);return[a,b,d]}exports.steinGCD=steinGCD;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1);function abs(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative=!1,a}exports.abs=abs;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(3),basicDivision_1=__webpack_require__(23),singleDigitDivision_1=__webpack_require__(50),intUtils_1=__webpack_require__(2);function divideAndRemainder(a,b,c){if(void 0===c&&(c=!1),0===b.precision)throw new EvalError(\"Divide by zero\");var d=c?a:clone_1.clone(a);if(a===b)return[d,intUtils_1.setZero({base:d.base})];if(0===d.precision)return[d,intUtils_1.setZero({base:d.base})];if(d.isNegative=d.isNegative!==b.isNegative,1===b.precision&&1===b.digits[0])return[d,intUtils_1.setZero({base:d.base})];if(1===d.precision&&1===d.digits[0])return[intUtils_1.setZero(d),intUtils_1.setOne({base:d.base})];var e=d.base;if(e!==b.base){var f=Math.log(b.base)/Math.log(e);if(d.precision<Math.ceil(b.precision*f)){var g=c?copy_1.copy({},d):d;return[intUtils_1.setZero({base:d.base}),g]}intUtils_1.changeBase(d,b.base)}if(d.precision<b.precision){d.base=e;var g=c?copy_1.copy({},d):d;return[intUtils_1.setZero({base:d.base}),g]}var h=intUtils_1.setOne({base:d.base});return 2>b.precision?(i=singleDigitDivision_1.singleDigitDivision(d.digits,0,d.precision,b.digits[0],d.base),d.precision=i[0],h.digits[0]=i[1],0===h.digits[0]&&intUtils_1.setZero(h)):(j=basicDivision_1.basicDivision(d.digits,0,d.precision,b.digits,0,b.precision,d.base),d.digits=j[0],h.digits=j[1],d.precision=j[2],h.precision=j[3]),intUtils_1.changeBase(d,e),intUtils_1.changeBase(h,e),[d,h];var i,j}exports.divideAndRemainder=divideAndRemainder;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(3),steinGCD_1=__webpack_require__(29),intUtils_1=__webpack_require__(2);function gcd(a,b,c){void 0===c&&(c=!1);var d=c?a:clone_1.clone(a);if(d.isNegative=!1,a===b||0===b.precision)return d;var e=d.base;return 0===d.precision?(copy_1.copy(d,b),d.isNegative=!1):(intUtils_1.changeBase(d,b.base),f=steinGCD_1.steinGCD(d.digits,0,d.precision,b.digits.slice(0,b.precision),0,b.precision,d.base),d.digits=f[0],d.precision=f[2]),intUtils_1.changeBase(d,e);var f}exports.gcd=gcd;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),decrement_1=__webpack_require__(17),halve_1=__webpack_require__(13),intUtils_1=__webpack_require__(2);function halve(a,b){void 0===b&&(b=!1);var c=intUtils_1.setZero({base:a.base});return(a=b?a:clone_1.clone(a),0===a.precision)?[a,c]:(d=halve_1.halve(a.digits,0,a.precision,a.base),a.precision=d[0],c.precision=d[1],0===c.precision)?[a,c]:(a.isNegative&&decrement_1.decrement(a,!0),[a,intUtils_1.setOne(c)]);var d}exports.halve=halve;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),decrement_1=__webpack_require__(12),increment_1=__webpack_require__(14);function increment(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative?(a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),0===a.precision&&(a.isNegative=!1)):a.precision=increment_1.increment(a.digits,0,a.precision,a.base),a}exports.increment=increment;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t'use strict';function isInteger(a){return a.hasOwnProperty('base')&&a.hasOwnProperty('digits')&&a.hasOwnProperty('precision')&&a.hasOwnProperty('isNegative')}exports.isInteger=isInteger;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(3),lcm_1=__webpack_require__(45),intUtils_1=__webpack_require__(2);function lcm(a,b,c){void 0===c&&(c=!1);var d=c?a:clone_1.clone(a);if(d.isNegative=!1,a===b||0===a.precision||1===b.precision&&1===b.digits[0])return d;if(0===b.precision)return intUtils_1.setZero(d);var e=d.base;return 1===d.precision&&1===d.digits[0]?(copy_1.copy(d,b),d.isNegative=!1):(intUtils_1.changeBase(d,b.base),f=lcm_1.lcm(d.digits,0,d.precision,b.digits,0,b.precision,d.base),d.digits=f[0],d.precision=f[1]),intUtils_1.changeBase(d,e);var f}exports.lcm=lcm;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),compare_1=__webpack_require__(6);function max(a,b,c){return void 0===c&&(c=!1),a=0>compare_1.compare(a,b)?b:a,c?a:clone_1.clone(a)}exports.max=max;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),compare_1=__webpack_require__(6);function min(a,b,c){return void 0===c&&(c=!1),a=0<compare_1.compare(a,b)?b:a,c?a:clone_1.clone(a)}exports.min=min;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),square_1=__webpack_require__(21),karatsubaMultiplication_1=__webpack_require__(15),longMultiplication_1=__webpack_require__(46),singleDigitMultiplication_1=__webpack_require__(28),intUtils_1=__webpack_require__(2);function multiply(a,b,c){if(void 0===c&&(c=!1),a===b)return square_1.square(a,c);if(a=c?a:clone_1.clone(a),0===a.precision)return a;if(0===b.precision)return intUtils_1.setZero(a);a.isNegative=a.isNegative!==b.isNegative;var d=a.base;if(intUtils_1.changeBase(a,b.base),1===b.precision)return a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,a.precision,b.digits[0],a.base),intUtils_1.changeBase(a,d);if(1===a.precision){var e=a.digits[0];return a.digits=b.digits.slice(0,b.precision),a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,b.precision,e,a.base),intUtils_1.changeBase(a,d)}var f=a.precision+b.precision-1;return a.digits.length<f&&(a.digits.length=f),a.precision=100>a.precision&&100>b.precision?longMultiplication_1.longMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base):karatsubaMultiplication_1.karatsubaMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,d)}exports.multiply=multiply;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),isEven_1=__webpack_require__(19),exponentiation_1=__webpack_require__(44),intUtils_1=__webpack_require__(2);function pow(a,b,c){void 0===c&&(c=!1);var d=c?a:clone_1.clone(a);if(0===b.precision)return intUtils_1.setOne(d);if(b.isNegative){if(0===d.precision)throw new EvalError(\"Divide by zero\");return intUtils_1.setZero(d)}return 0===d.precision?d:(d.isNegative=!(d.isNegative&&isEven_1.isEven(b)),1===d.precision&&1===d.digits[0])?d:(d.precision=exponentiation_1.exponentiation(d.digits,0,d.precision,d.base,b.digits.slice(0,b.precision),0,b.precision,b.base),d)}exports.pow=pow;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function signum(a){return a.isNegative?-1:0===a.precision?0:1}exports.signum=signum;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var globals_1=__webpack_require__(7),setBase_1=__webpack_require__(20),isInteger_1=__webpack_require__(35),intUtils_1=__webpack_require__(2),numUtils_1=__webpack_require__(4);function toInteger(a,b,c){if(void 0===b&&(b=null),void 0===c&&(c=!1),isInteger_1.isInteger(a))return setBase_1.setBase(a,null==b?a.base:b,c);if(\"number\"==typeof a)a=\"\"+a;else if(\"string\"!=typeof a)throw TypeError(\"Expecting type Integer | string | number\");var d=intUtils_1.setZero({base:10});return e=numUtils_1.strToDigits(a),d.digits=e[0],d.isNegative=e[1],d.precision=d.digits.length,setBase_1.setBase(d,null==b?globals_1.Globals.DEFAULT_BASE:b,!0);var e}exports.toInteger=toInteger;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var globals_1=__webpack_require__(7);function toString(a,b,c){void 0===b&&(b=null),void 0===c&&(c=null);var d=a.isNegative?\"-\":\"\";if(null==c){if(globals_1.Globals.DEFAULT_CIPHER.length<a.base)return b=null==b?\":\":b,d+a.digits.slice(0,a.precision).reverse().join(b);c=globals_1.Globals.DEFAULT_CIPHER}return b=null==b?\"\":b,d+a.digits.map(function(e){return c[e]}).reverse().join(b)}exports.toString=toString;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var halve_1=__webpack_require__(13),karatsubaSquare_1=__webpack_require__(26),karatsubaMultiplication_1=__webpack_require__(15);function exponentiation(a,b,c,d,e,f,g,h){for(var i=1,j=[1];f+1<g||1<e[f];){var k=void 0;l=halve_1.halve(e,f,g,h),g=l[0],k=l[1],0<k&&(j.length=i+c,i=karatsubaMultiplication_1.karatsubaMultiplication(j,0,i,a,b,c,d)),c=karatsubaSquare_1.karatsubaSquare(a,b,c,d)}return 1<j.length&&(c=karatsubaMultiplication_1.karatsubaMultiplication(a,b,c,j,0,i,d)),c;var l}exports.exponentiation=exponentiation;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var basicDivision_1=__webpack_require__(23),karatsubaMultiplication_1=__webpack_require__(15),steinGCD_1=__webpack_require__(29);function lcm(a,b,c,d,e,f,g){var h=a.slice(b,c),i=h.length,j=d.slice(e,f),k=j.length;return l=steinGCD_1.steinGCD(h,0,i,j,0,k,g),h=l[0],i=l[2],m=basicDivision_1.basicDivision(a,b,c,h,0,i,g),h=m[0],i=m[2],i=karatsubaMultiplication_1.karatsubaMultiplication(h,0,i,d,e,f,g),[h,i];var l,m}exports.lcm=lcm;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(8),numUtils_1=__webpack_require__(4);function longMultiplication(c,d,e,f,g,h,j){var k=h-g,l=d+k;arrayUtils_1.safeShiftUp(c,d,e,k),numUtils_1.zero(c,d,l);var m=e+k;for(var n=l;n<m;++n){var o=0,p=n-k;for(var q=g;q<h;++q){var r=c[n]*f[q]+c[p]+o;r<j?o=0:(o=0|r/j,r%=j),c[p++]=r}c[p]=o}return 0===c[m-1]?m-1:m}exports.longMultiplication=longMultiplication;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(8),numUtils_1=__webpack_require__(4);function longSquare(a,b,c,e){var f=c-b;arrayUtils_1.unsafeShiftUp(a,b,c,f),numUtils_1.zero(a,b,c),f+=c;for(var g=b,h=c;g<f;g+=2){var i=a[h++],j=0;a[g]+=i*i,a[g]>=e&&(j=0|a[g]/e,a[g]%=e);var k=g+1;for(var l=h;l<f;++k){var n=0,p=a[l++]*i;p>=e&&(n=0|p/e,p%=e),n<<=1,p<<=1,a[k]=a[k]+p+j,j=n,a[k]>=e&&(j+=0|a[k]/e,a[k]%=e)}a[k]=j}return 0===a[f-1]?f-1:f}exports.longSquare=longSquare;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function reverseSubtraction(a,b,c,d,e,f,g){for(var h=0;b<c;){var i=d[e++]-h-a[b];0>i?(h=1,i+=g):h=0,a[b++]=i}if(0<h){for(h=g-1;0===d[e];++e)a[b++]=h;a[b++]=d[e++]-1}if(e<f)do a[b++]=d[e++];while(e<f);else for(;0===a[b-1];)--b;return b}exports.reverseSubtraction=reverseSubtraction;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function setBase(a,b,c,d,e){if(c===b||d===e)return[a,c];var f=0,g=Array(Math.ceil((c-b)*Math.log(d)/Math.log(e)));do{var h=0;for(var j=c;j>b;h%=e)h=h*d+a[--j],a[j]=0|h/e;for(g[f++]=h;0===a[c-1];)if(--c===b)return[g,f]}while(!0)}exports.setBase=setBase;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitDivision(b,c,d,e,f){var g=0;for(var h=d;h-->c;g%=e)g=g*f+b[h],b[h]=0|g/e;return 0===b[d-1]&&--d,[d,g]}exports.singleDigitDivision=singleDigitDivision;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var globals_1=__webpack_require__(7),abs_1=__webpack_require__(30),add_1=__webpack_require__(16),compare_1=__webpack_require__(6),copy_1=__webpack_require__(3),decrement_1=__webpack_require__(17),divideAndRemainder_1=__webpack_require__(31),double_1=__webpack_require__(18),gcd_1=__webpack_require__(32),halve_1=__webpack_require__(33),increment_1=__webpack_require__(34),isEven_1=__webpack_require__(19),lcm_1=__webpack_require__(36),max_1=__webpack_require__(37),min_1=__webpack_require__(38),multiply_1=__webpack_require__(39),negate_1=__webpack_require__(10),pow_1=__webpack_require__(40),signum_1=__webpack_require__(41),setBase_1=__webpack_require__(20),subtract_1=__webpack_require__(22),square_1=__webpack_require__(21),toInteger_1=__webpack_require__(42),toString_1=__webpack_require__(43),intUtils_1=__webpack_require__(2),BigInt=function(){function a(b){intUtils_1.assign(this,toInteger_1.toInteger(b,globals_1.Globals.DEFAULT_BASE,!1)),this.digits.length=this.precision}return Object.defineProperty(a,\"MINUS_ONE\",{get:function get(){return new a(-1)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ZERO\",{get:function get(){return new a(0)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ONE\",{get:function get(){return new a(1)},enumerable:!0,configurable:!0}),a.prototype.abs=function(b){return a.toBigInt(abs_1.abs(this,b),!0)},a.prototype.add=function(b,c){var d=add_1.add(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.clone=function(){return new a(this)},a.prototype.compareTo=function(b){return compare_1.compare(this,b)},a.prototype.copy=function(b){return copy_1.copy(this,b),this},a.prototype.divide=function(b,c){return this.divideAndRemainder(b,c)[0]},a.prototype.divideAndRemainder=function(b,c){var d,e;return f=divideAndRemainder_1.divideAndRemainder(this,b,c),d=f[0],e=f[1],d.digits.length=d.precision,e.digits.length=e.precision,[a.toBigInt(d,!0),intUtils_1.assign(a.ZERO,e)];var f},a.prototype.double=function(b){return a.toBigInt(double_1.double(this,b),!0)},a.prototype.gcd=function(b,c){var d=gcd_1.gcd(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.getBase=function(){return this.base},a.prototype.half=function(b){var c,d;return e=halve_1.halve(this,b),c=e[0],d=e[1],c.digits.length=c.precision,[a.toBigInt(c,!0),new a(d.precision)];var e},a.isBigInt=function(b){return b instanceof a},a.prototype.isEven=function(){return isEven_1.isEven(this)},a.prototype.isOdd=function(){return!this.isEven()},a.prototype.lcm=function(b,c){var d=lcm_1.lcm(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.max=function(b,c,d){return a.toBigInt(max_1.max(b,c,d),!0)},a.min=function(b,c,d){return a.toBigInt(min_1.min(b,c,d),!0)},a.prototype.minusminus=function(b){var c=decrement_1.decrement(this,b);return c.digits.length=c.precision,a.toBigInt(c,!0)},a.prototype.multiply=function(b,c){var d=multiply_1.multiply(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.negate=function(b){return a.toBigInt(negate_1.negate(this,b),!0)},a.prototype.plusplus=function(b){return a.toBigInt(increment_1.increment(this,b),!0)},a.prototype.pow=function(b,c){var d=pow_1.pow(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.remainder=function(b,c){var d=this.divideAndRemainder(b,c)[1];return c&&intUtils_1.assign(this,d),this},a.prototype.setBase=function(b,c){var d=setBase_1.setBase(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.signum=function(){return signum_1.signum(this)},(a.prototype.square=function(b){var c=square_1.square(this,b);return c.digits.length=c.precision,a.toBigInt(c,!0)},a.prototype.subtract=function(b,c){var d=subtract_1.subtract(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.toBigInt=function(b,c){return a.isBigInt(b)&&c?b:new a(b)},a.prototype.toString=function(b,c){return void 0===b&&(b=null),void 0===c&&(c=null),toString_1.toString(this,b,c)},a)}();exports.BigInt=BigInt;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// big.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 51775bed554b3239c3db","//Globals\nexport {Globals as _globals} from './globals';\n\n//Functional\nexport {abs} from './functional/abs';\nexport {add} from './functional/add';\nexport {clone} from './functional/clone';\nexport {compare} from './functional/compare';\nexport {copy} from './functional/copy';\nexport {decrement} from './functional/decrement';\nexport {divideAndRemainder} from './functional/divideAndRemainder';\nexport {double} from './functional/double';\nexport {gcd} from './functional/gcd';\nexport {halve} from './functional/halve';\nexport {increment} from './functional/increment';\nexport {isEven} from './functional/isEven';\nexport {isInteger} from './functional/isInteger';\nexport {lcm} from './functional/lcm';\nexport {max} from './functional/max';\nexport {min} from './functional/min';\nexport {multiply} from './functional/multiply';\nexport {negate} from './functional/negate';\nexport {pow} from './functional/pow';\nexport {setBase} from './functional/setBase';\nexport {signum} from './functional/signum';\nexport {square} from './functional/square';\nexport {subtract} from './functional/subtract';\nexport {toInteger} from './functional/toInteger';\nexport {toString} from './functional/toString';\n\n//OOP\nexport {BigInt as Int} from './oop/bigInt';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\n\nexport function clone(A: Integer) : Integer {\n  return copy({}, A);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/clone.ts","import {Integer} from '../integer';\nimport {setBase} from '../algorithm/setBase';\n\nexport function assign(target: any, source: Integer): Integer {\n  target.base = source.base;\n  target.digits = source.digits;\n  target.precision = source.precision;\n  target.isNegative = source.isNegative;\n  return target;\n}\n\nexport function changeBase(A: Integer, base: number): Integer {\n  [A.digits, A.precision] = setBase(\n    A.digits, 0, A.precision, A.base, base\n  );\n  A.base = base;\n  return A;\n}\n\nexport function setOne(A: any): Integer {\n  A.precision = 1;\n  A.digits = [1];\n  A.isNegative = false;\n  return A;\n}\n\nexport function setZero(A: any): Integer {\n  A.precision = 0;\n  A.digits = [];\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/intUtils.ts","import {Integer} from '../integer';\nimport {assign} from '../util/intUtils';\n\nexport function copy(target: any, source: Integer): Integer {\n  assign(target, source);\n  target.digits = target.digits.slice(0, target.precision);\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/copy.ts","export function max(a: number, b: number): number {\n  return (a < b) ? b : a;\n}\n\nexport function min(a: number, b: number): number {\n  return (a > b) ? b : a;\n}\n\nexport function strToDigits(s: String): [number[], boolean] {\n  s = s.trim();\n\n  //Check if empty string\n  if(s.length < 1){\n    throw new TypeError(\"NaN\");\n  }\n\n  //Check for leading sign\n  const isNegative: boolean = s[0] === '-';\n\n  //Trim signs, leading zeros and decimal part\n  s = s.replace(/^[-+]?0*/, '').replace(/\\.[0-9]+$/, '');\n\n  //Check if string is not a number\n  if(s.match(/[^\\d]/)){\n    throw new TypeError(\"NaN\");\n  }\n\n  //If zero\n  const precision: number = s.length;\n  if(precision === 0){\n    return [[], false];\n  }\n\n  //Convert to decimal array\n  const digits: number[] = new Array<number>(precision);\n  for(let i = 0, j = precision; j > 0; ++i){\n    digits[i] = 0 | <any>s[--j];\n  }\n\n  return [digits, isNegative];\n}\n\n//Sets indices between [min, max) to 0\nexport function zero(A: number[], min: number, max: number): void {\n  while(min < max){\n    A[min++] = 0;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/numUtils.ts","import {decrement} from './decrement';\n\n/*\n  f(A, B) = A - B\n  Assumes\n     A >= B\n  Note\n     Overwrites A\n*/\nexport function subtraction(A: number[], minA: number, maxA: number, B: ReadonlyArray<number>, minB: number, maxB: number, base: number): number {\n  let a: number = minA;\n  let borrow: number = 0;\n\n  //Subtract common digits\n  while(minB < maxB){\n    let v: number = A[a] - borrow - B[minB++];\n    if(v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[a++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    return decrement(A, a, maxA, base);\n  }\n\n  //Find new length\n  if(a === maxA){\n    while(a-- > minA && A[a] === 0){\n    }\n    maxA = a + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/subtraction.ts","import {Integer} from '../integer';\nimport {changeBase} from '../util/intUtils';\nimport {compare as _compare} from '../algorithm/compare';\n\nexport function compare(A: Integer, B: Integer): number {\n\n  //If self\n  if(A === B){\n    return 0;\n  }\n\n  //Check if different signs\n  if(A.isNegative !== B.isNegative){\n    return (A.isNegative) ? -1 : 1;\n  }\n\n  const base: number = A.base;\n\n  //If not same base\n  if(A.base !== B.base){\n\n    //Estimate number of digits of A if converted to B's base\n    const ratio: number = Math.log(A.base) / Math.log(B.base);\n    if(Math.ceil(A.precision * ratio) > B.base){\n      return 1;\n    }\n    if(Math.ceil((A.precision + 1) * ratio) < B.precision){\n      return -1\n    }\n\n    //Convert A to B's base\n    changeBase(A, B.base);\n  }\n\n  //Compare A and B\n  const out: number = _compare(\n    A.digits, 0, A.precision,\n    B.digits, 0, B.precision\n  );\n\n  //Change A back to original base (if needed)\n  changeBase(A, base);\n\n  //Return result\n  return out;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/compare.ts","export class Globals {\n  public static readonly MIN_BASE: number = 2;\n  public static readonly MAX_BASE: number = 94906265; //2^26 < sqrt(Number.MAX_SAFE_INTEGER) < 2^27\n  public static readonly MAX_PRECISION: number = 4294967295; //2^32 - 1\n\n  public static DEFAULT_IS_MUTABLE: boolean = false;\n  public static DEFAULT_BASE: number = 94906264;\n  public static DEFAULT_CIPHER: ReadonlyArray<string> = Object.freeze([\n    '0','1','2','3','4','5','6','7','8','9',\n    'A','B','C','D','E','F','G','H','I','J',\n    'K','L','M','N','O','P','Q','R','S','T',\n    'U','V','W','X','Y','Z'\n  ]);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/globals.ts","\n//Assumes shifts >= max - min, shifts > 0\nexport function unsafeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = min + shifts; min < max; A[i++] = A[min++]){\n  }\n}\n\nexport function safeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = max + shifts; max > min; A[--i] = A[--max]){\n  }\n}\n\n//Assumes A and B not same array or sections A and B do not intersect\nexport function copy<T>(to: T[], minTo: number, from: ReadonlyArray<T>, minFrom: number, maxFrom: number): void {\n  while(minFrom < maxFrom){\n    to[minTo++] = from[minFrom++];\n  }\n}\n\nexport function printArr(A: any[], min: number, max: number, minSub: number = min, maxSub: number = max): string {\n  A = A.map(function(v){return (v == null || v !== v) ? v + '' : v;});\n  return \"[\" +\n    A.slice(min,minSub).join(', ') +\n    \"|\" + A.slice(minSub,maxSub).join(', ') +\n    \"|\" + A.slice(maxSub,max).join(', ') +\n  \"]\";\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/arrayUtils.ts","import {increment} from './increment';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A.length >= B.length\n    A and B not same array or non-intersecting segments\n*/\nexport function addition(A: number[], minA: number, maxA: number, B: ReadonlyArray<number>, minB: number, maxB: number, base: number): number{\n  let carry: number = 0;\n\n  //Add common digits\n  while (minB < maxB){\n    let v: number = A[minA] + B[minB++] + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Return length\n  return (carry > 0) ? increment(A, minA, maxA, base) : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/addition.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\n\nexport function negate(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n  A.isNegative = A.precision > 0 && !A.isNegative;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/negate.ts","//Assumes valid inputs\n//Assumes numbers are in same base\nexport function compare(A: ReadonlyArray<number>, minA: number, maxA: number, B: ReadonlyArray<number>, minB: number, maxB: number): number {\n\n  //Compare number of digits\n  const d: number = maxA - minA - maxB + minB;\n  if(d !== 0){\n    return d < 0 ? -1 : 1;\n  }\n\n  //Compare digits\n  while(maxA > minA){\n    if(A[--maxA] !== B[--maxB]){\n      return A[maxA] < B[maxB] ? -1 : 1;\n    }\n  }\n\n  //Numbers are equal\n  return 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/compare.ts","/*\n  f(A) = A - 1\n  Overwrites A\n  Assumes A > 0\n*/\nexport function decrement(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any borrows\n  for(const borrow = base - 1; A[minA] === 0; A[minA++] = borrow){\n  }\n\n  //Subtract one\n  A[minA] = A[minA] - 1;\n\n  //Return length\n  return (minA+1 === maxA && A[minA] === 0) ? maxA - 1 : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/decrement.ts","/*\n  f(A) = A / 2\n  Overwrites A\n  Assumes A > 0\n*/\nexport function halve(A: number[], minA: number, maxA: number, base: number): [number, number] {\n\n  //Halve\n  let remainder: number = 0;\n  for(let i: number = maxA; i-- > minA; A[i] = A[i] >>> 1){\n    A[i] = A[i] + (base & -remainder);\n    remainder = A[i] & 1;\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/halve.ts","/*\n  f(A) = A + 1\n  Overwrites A\n  Assumes A >= 0\n*/\n\nexport function increment(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any carries\n  for(--base; minA < maxA && A[minA] === base; A[minA++] = 0){\n  }\n\n  //Add one\n  if(minA === maxA){\n    A[maxA++] = 1;\n  } else {\n    A[minA] = A[minA] + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/increment.ts","import {addition} from './addition';\nimport {reverseAddition} from './reverseAddition';\nimport {subtraction} from './subtraction';\nimport {copy, unsafeShiftUp} from '../util/arrayUtils';\nimport {min, max, zero} from '../util/numUtils';\n\n/*\n  f(A) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n  Explanation: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaMultiplication(A: number[], minA: number, maxA: number, B: ReadonlyArray<number>, minB: number, maxB: number, base: number): number {\n  let halfLen: number = max(maxA - minA, maxB - minB);\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[minA] * B[minB];\n    if(halfLen < base){\n      A[maxA] = 0;\n    } else {\n      A[maxA++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[minA] = halfLen;\n    return maxA;\n  }\n\n  //Split the numbers in half\n  halfLen = (halfLen + 1) >>> 1;\n  const halfA: number = minA + halfLen;\n  const midA: number = min(halfA, maxA);\n  const midB: number = min(minB + halfLen, maxB);\n\n  //mediumB = lowB + highB\n  const mediumB: number[] = new Array(midB - minB + 1);\n  copy(mediumB, 0, B, minB, midB);\n  const mediumMaxB: number = addition(mediumB, 0, midB - minB, B, midB, maxB, base);\n\n  //medium = lowA + highA\n  const medium: number[] = new Array(midA - minA + 1 + mediumMaxB);\n  copy(medium, 0, A, minA, midA);\n  let mediumMax: number = addition(medium, 0, midA - minA, A, midA, maxA, base);\n\n  //medium = medium * mediumB\n  mediumMax = karatsubaMultiplication(medium, 0, mediumMax, mediumB, 0, mediumMaxB, base);\n\n  //Shift highA left\n  A[maxA] = 0;\n  unsafeShiftUp(A, midA, maxA, halfLen);\n\n  //lowA = lowA * lowB\n  const lowMax: number = karatsubaMultiplication(A, minA, midA, B, minB, midB, base);\n\n  //medium = medium - lowA\n  mediumMax = subtraction(medium, 0, mediumMax, A, minA, lowMax, base);\n\n  //A = medium*(base^halfLen) + lowA\n  if(midA === maxA || midB === maxB){\n    if(lowMax <= halfA){\n      maxA = halfA + mediumMax;\n      zero(A, lowMax, halfA);\n      copy(A, halfA, medium, 0, mediumMax);\n    } else if(mediumMax > lowMax - halfA){\n      maxA = reverseAddition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    } else {\n      maxA = addition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    }\n    return maxA;\n  }\n\n  //Fill unused space with zero\n  zero(A, lowMax, maxA);\n\n  //highA = highA * highB\n  const highMin: number = midA + halfLen;\n  maxA = karatsubaMultiplication(A, highMin, maxA + halfLen, B, midB, maxB, base);\n\n  //medium = medium - highA\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, maxA, base);\n\n  //A = highA*(base^len) + medium*(base^halfLen) + lowA\n  maxA = addition(A, halfA, maxA, medium, 0, mediumMax, base);\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaMultiplication.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {double} from './double';\nimport {negate} from './negate';\nimport {subtract} from './subtract';\nimport {addition} from '../algorithm/addition';\nimport {reverseAddition} from '../algorithm/reverseAddition';\nimport {changeBase} from '../util/intUtils';\n\nexport function add(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n\n  //If self\n  if(A === B){\n    return double(A, isMutable);\n  }\n\n  A = (isMutable) ? A : clone(A);\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If C is zero\n  if(A.precision === 0){\n    A = copy(A, B);\n    return changeBase(A, base);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, subtract, change sign again\n    A = negate(A, true);\n    A = subtract(A, B, true);\n    A = negate(A, true);\n\n  //If C < B\n} else if(A.precision < B.precision){\n\n    //Update C's digit array to minimum result size\n    if(A.digits.length <= B.precision){\n      A.digits.length = B.precision;\n    }\n\n    //Add\n    A.precision = reverseAddition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A >= B\n  } else {\n\n    //Add\n    A.precision = addition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  //Change A back to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/add.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {decrement as _decrement} from '../algorithm/decrement';\nimport {increment} from '../algorithm/increment';\nimport {setOne} from '../util/intUtils';\n\nexport function decrement(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n\n  //If negative\n  if(A.isNegative){\n    A.precision = increment(A.digits, 0, A.precision, A.base);\n\n  //If zero\n} else if (A.precision === 0){\n    setOne(A);\n    A.isNegative = true;\n\n  //If positive\n  } else {\n    A.precision = _decrement(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/decrement.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {double as _double} from '../algorithm/double';\n\nexport function double(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n  A.precision = _double(A.digits, 0, A.precision, A.base);\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/double.ts","import {Integer} from '../integer';\nimport {isEven as _isEven} from '../algorithm/isEven';\n\nexport function isEven(A: Integer): boolean {\n  return _isEven(A.digits, 0, A.precision, A.base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isEven.ts","import {Globals} from '../globals';\nimport {Integer} from '../integer';\nimport {clone} from './clone';\nimport {changeBase} from '../util/intUtils';\n\nexport function setBase(A: Integer, base: number, isMutable: boolean = false): Integer {\n  \n  //Sanitize base\n  base = 0 | base;\n\n  //Check if already in base\n  if(A.base === base){\n    return (isMutable) ? A : clone(A);\n  }\n\n  //If new base too low\n  if(base < Globals.MIN_BASE){\n    throw RangeError(base + \" < MIN_BASE (\" + Globals.MIN_BASE + \")\");\n  }\n\n  //If new base too high\n  if(base > Globals.MAX_BASE){\n    throw RangeError(base + \" > MAX_BASE (\" + Globals.MAX_BASE + \")\");\n  }\n\n  //Convert to base\n  return changeBase((isMutable) ? A : clone(A), base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/setBase.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {karatsubaSquare} from '../algorithm/karatsubaSquare';\nimport {longSquare} from '../algorithm/longSquare';\n\nexport function square(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n\n  //If zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //Make positive\n  A.isNegative = false;\n\n  //Make minimum room for squaring\n  const maxNewLen: number = 2*A.precision - 1;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 500){\n    A.precision = longSquare(A.digits, 0, A.precision, A.base);\n  } else {\n    A.precision = karatsubaSquare(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/square.ts","import {Integer} from '../integer';\nimport {add} from './add';\nimport {compare} from './compare';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {negate} from './negate';\nimport {reverseSubtraction} from '../algorithm/reverseSubtraction';\nimport {subtraction} from '../algorithm/subtraction';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function subtract(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n\n  //If subtracting itself\n  if(A === B){\n    return setZero((isMutable) ? A : {base: A.base});\n  }\n\n  A = (isMutable) ? A : clone(A);\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A is zero\n  if(A.precision === 0){\n\n    //Copy B\n    A = copy(A, B);\n    A = negate(A, true);\n    return changeBase(A, base);\n  }\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, add, change sign again\n    A = negate(A, true);\n    A = add(A, B, true);\n    return negate(A, true);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //Compare A and B\n  const c: number = compare(A, B);\n\n  //If A == B\n  if(c === 0){\n    A.base = base;\n    return setZero(A);\n  }\n\n  //If A < B\n  if(c < 0){\n\n    //Switch sign\n    negate(A, true);\n\n    //Make room for subtraction\n    if(A.digits.length < B.precision){\n      A.digits.length = B.precision;\n    }\n\n    //Subtract\n    A.precision = reverseSubtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A > B\n  } else {\n    A.precision = subtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/subtract.ts","import {compare} from './compare';\nimport {singleDigitMultiplication} from './singleDigitMultiplication';\nimport {subtraction} from './subtraction';\nimport {copy} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(X, Y) = X / Y\n  Overwrites X\n  Assumes no leading zeros\n  Assumes X.length >= Y.length >= 2\n  See: http://cacr.uwaterloo.ca/hac/about/chap14.pdf\n\n  INPUT: positive integers x = (xn ··· x1x0)b, y = (yt ··· y1y0)b with n ≥ t ≥ 1, yt != 0\n  OUTPUT: the quotient q = (qn−t ··· q1q0)b and remainder r = (rt ··· r1r0)b such that x = qy + r, 0 ≤ r < y\n*/\nexport function basicDivision(X: number[], minX: number, maxX: number, Y: ReadonlyArray<number>, minY: number, maxY: number, base: number): [number[], number[], number, number] {\n\n  //1. Initialize the quotient\n  const lenY: number = maxY - minY;\n  const nMt: number = maxX - minX - lenY;\n  const Q: number[] = new Array(nMt + 1);\n  zero(Q, 0, nMt + 1);\n\n  //2. While X ≥ Yb^(n−t)\n  let maxR: number = maxX;\n  while(compare(X, minX + nMt, maxR, Y, minY, maxY) >= 0){\n\n    //Q[n−t] ← Q[n−t] + 1\n    ++Q[nMt];\n\n    //x ← x − Bb^(n−t)\n    maxR = subtraction(X, minX + nMt, maxR, Y, minY, maxY, base);\n  }\n\n  //3. For i from n down to (t + 1)\n  const yt: number = Y[maxY-1];\n  const ytm1: number = Y[maxY-2];\n  const QY: number[] = new Array(lenY + 1);\n  for(let i: number = maxX - 1, iMt: number = nMt; iMt-- > 0; --i){\n\n    //3.1 If x[i] = y[t] then set q[i−t−1] ← b − 1; otherwise set q[i−t−1] ← (x[i]b + x[i−1]) / y[t]\n    //3.2 While q[i−t−1] * (y[t]b + y[t−1]) > x[i]b^2 + x[i−1]b + x[i−2]\n    Q[iMt] = divThreeHalvesByTwo(X[i], X[i-1], X[i-2], yt, ytm1, base);\n\n    //3.3 x ← x − q[i−t−1] * yb^(i−t−1)\n    //3.4 If x < 0 then set x ← x + yb^(i−t−1) and q[i−t−1] ← q[i−t−1] − 1\n    if(Q[iMt] === 0){\n      continue;\n    }\n    copy(QY, 0, Y, minY, maxY);\n    let maxQY: number = singleDigitMultiplication(QY, 0, lenY, Q[iMt], base);\n    if(compare(QY, 0, maxQY, X, minX + iMt, maxR) > 0){\n      --Q[iMt];\n      maxQY = subtraction(QY, 0, maxQY, Y, minY, maxY, base);\n    }\n    maxR = subtraction(X, minX + iMt, maxR, QY, 0, maxQY, base);\n  }\n\n  //4. r ← x\n  //Adjust length of remainder\n  while(maxR > minX && X[maxR - 1] === 0){\n    --maxR;\n  }\n\n  //5. Return(q,r)\n  return [Q, X, (Q[nMt] === 0) ? nMt : nMt + 1, maxR];\n}\n\n/*\n  See: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.565&rep=rep1&type=pdf\n*/\nfunction divThreeHalvesByTwo(a1: number, a2: number, a3: number, b1: number, b2: number, base: number): number {\n  let q: number = a1*base + a2;\n  let r: number = q % b1;\n  q = 0 | (q / b1);\n  r = r*base - q*b2 + a3;\n  if(r < 0){\n    r = r + b1*base + b2;\n    q = (r < 0) ? q - 2 : q - 1;\n  }\n  return q;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/basicDivision.ts","/*\nf(A) = A + A\nOverwrites A\n*/\nexport function double(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Double\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] << 1) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add carry\n  if (carry > 0){\n    A[minA++] = 1;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/double.ts","export function isEven(A: ReadonlyArray<number>, minA: number, maxA: number, base: number): boolean {\n\n  //If zero\n  if(minA === maxA){\n    return true;\n  }\n\n  //If even base\n  if((base & 1) === 0){\n    return (A[minA] & 1) === 0;\n  }\n\n  //If odd base\n  let xor: number = 0;\n  while(minA < maxA){\n    xor = xor ^ A[minA++];\n  }\n  return (xor & 1) === 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/isEven.ts","import {addition} from './addition';\nimport {subtraction} from './subtraction';\nimport {copy, unsafeShiftUp} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n  Assumes A > 0\n  See: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaSquare(A: number[], min: number, max: number, base: number): number {\n  let halfLen: number = max - min;\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[min] * A[min];\n    if(halfLen < base){\n      A[max] = 0;\n    } else {\n      A[max++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[min] = halfLen;\n    return max;\n  }\n\n  //Split the number in half\n  halfLen = (halfLen + 1) >>> 1;\n  const mid: number = min + halfLen;\n\n  //medium = low + high\n  const medium: number[] = new Array(2*halfLen + 2);\n  copy(medium, 0, A, min, mid);\n  let mediumMax: number = addition(medium, 0, halfLen, A, mid, max, base);\n\n  //Shift high left\n  A[max] = 0;\n  unsafeShiftUp(A, mid, max, halfLen);\n\n  //low * low\n  const lowMax: number = karatsubaSquare(A, min, mid, base);\n\n  //Fill unused space with zero\n  zero(A, lowMax, max);\n\n  //high * high\n  const highMin = mid + halfLen;\n  max = karatsubaSquare(A, highMin, max + halfLen, base);\n\n  //medium = medium * medium - low - high\n  mediumMax = karatsubaSquare(medium, 0, mediumMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, min, lowMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, max, base);\n\n  //A = high*(base^len) + medium*(base ^ halfLen) + low\n  return addition(A, mid, max, medium, 0, mediumMax, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaSquare.ts","import {addition} from './addition';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A < B\n    A and B not overlapping array segments\n*/\nexport function reverseAddition(A: number[], minA: number, maxA: number, B: ReadonlyArray<number>, minB: number, maxB: number, base: number): number{\n\n  //Add extra digits to A\n  const newMaxB: number = minB - minA + maxA;\n  for(let b: number = newMaxB; b < maxB; A[maxA++] = B[b++]){\n  }\n\n  //Do normal addition\n  return addition(A, minA, maxA, B, minB, newMaxB, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseAddition.ts","/*\n  f(A,B) = A*B\n  Overwrites A\n  Assumes B > 0\n*/\nexport function singleDigitMultiplication(A: number[], minA: number, maxA: number, multiplier: number, base: number): number {\n\n  //Multiply multiplicand by multiplier\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] * multiplier) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 0 | (v / base);\n      v = v % base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add remaining carry\n  if(carry > 0){\n    A[minA++] = carry;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitMultiplication.ts","import {compare} from './compare';\nimport {double} from './double';\nimport {halve} from './halve';\nimport {isEven} from './isEven';\nimport {subtraction} from './subtraction';\n\n/*\nf(A, B) = GCD(A, B)\nOverwrites A, B\nExpects A > 0, B > 0\nSee: https://en.wikipedia.org/wiki/Binary_GCD_algorithm\n*/\nexport function steinGCD(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number, number] {\n\n  //Count and remove common factors of 2\n  let shifts: number = 0;\n  while(isEven(A, minA, maxA, base) && isEven(B, minB, maxB, base)){\n    [maxA] = halve(A, minA, maxA, base);\n    [maxB] = halve(B, minB, maxB, base);\n    ++shifts;\n  }\n\n  //Remove extra factors of 2 in A\n  while(isEven(A, minA, maxA, base)){\n    [maxA] = halve(A, minA, maxA, base);\n  }\n\n  //A will always be odd from now on\n  do {\n\n    //Remove extra factors of 2 in B\n    while(isEven(B, minB, maxB, base)){\n      [maxB] = halve(B, minB, maxB, base);\n    }\n\n    //B is now odd\n    //Compare A and B\n    let c: number = compare(A, minA, maxA, B, minB, maxB);\n\n    //End loop iff B - A === 0\n    if(c === 0){\n      break;\n    }\n\n    //Switch A and B iff A > B\n    if(c > 0){\n      const C: number[] = A;\n      A = B;\n      B = C;\n      c = minA;\n      minA = minB;\n      minB = c;\n      c = maxA;\n      maxA = maxB;\n      maxB = c;\n    }\n\n    //B = B - A\n    maxB = subtraction(B, minB, maxB, A, minA, maxA, base);\n\n    //B is now even since B and A were both odd\n    [maxB] = halve(B, minB, maxB, base);\n  } while (true);\n\n  //Restore common factors of 2 (A = A << shifts)\n  while(shifts-- > 0){\n    maxA = double(A, minA, maxA, base);\n  }\n\n  return [A, minA, maxA];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/steinGCD.ts","import {Integer} from '../integer';\nimport {clone} from '../functional/clone';\n\nexport function abs(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/abs.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {basicDivision} from '../algorithm/basicDivision';\nimport {singleDigitDivision} from '../algorithm/singleDigitDivision';\nimport {changeBase, setOne, setZero} from '../util/intUtils';\n\nexport function divideAndRemainder(A: Integer, B: Integer, isMutable: boolean = false): [Integer, Integer] {\n\n  //If A / 0\n  if(B.precision === 0){\n    throw new EvalError(\"Divide by zero\");\n  }\n\n  let C: Integer = (isMutable) ? A : clone(A);\n\n  //If self\n  if(A === B){\n    return [C, setZero({base: C.base})];\n  }\n\n  //If 0 / B\n  if(C.precision === 0){\n    return [C, setZero({base: C.base})];\n  }\n\n  //Divide signs\n  C.isNegative = C.isNegative !== B.isNegative;\n\n  //If B = 1\n  if(B.precision === 1 && B.digits[0] === 1){\n    return [C, setZero({base: C.base})];\n  }\n\n  //If C = 1\n  if(C.precision === 1 && C.digits[0] === 1){\n    return [setZero(C), setOne({base: C.base})];\n  }\n\n  //If different bases\n  const base: number = C.base;\n  if(base !== B.base){\n\n    //If C's length < the least possible length of B if converted to C's base\n    const ratio: number = Math.log(B.base) / Math.log(base);\n    if(C.precision < Math.ceil(B.precision * ratio)){\n      const remainder: Integer = (isMutable) ? copy({}, C) : C;\n      return [setZero({base: C.base}), remainder];\n    }\n\n    //Normalize bases\n    changeBase(C, B.base);\n  }\n\n  //If C's length < B's length\n  if(C.precision < B.precision){\n    C.base = base;\n    const remainder: Integer = (isMutable) ? copy({}, C) : C;\n    return [setZero({base: C.base}), remainder];\n  }\n\n  //Choose best algorithm\n  let R: Integer = setOne({base: C.base});\n  if(B.precision < 2){\n    [C.precision, R.digits[0]] = singleDigitDivision(\n      C.digits, 0, C.precision, B.digits[0], C.base\n    );\n    if(R.digits[0] === 0){\n      setZero(R);\n    }\n  } else {\n    [\n      C.digits, R.digits, C.precision, R.precision\n    ] = basicDivision(\n      C.digits, 0, C.precision, B.digits, 0, B.precision, C.base\n    );\n  }\n\n  //Return C and R\n  changeBase(C, base);\n  changeBase(R, base);\n  return [C, R];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/divideAndRemainder.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {steinGCD} from '../algorithm/steinGCD';\nimport {changeBase} from '../util/intUtils';\n\nexport function gcd(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  const C: Integer = (isMutable) ? A : clone(A);\n\n  //Make C positive\n  C.isNegative = false;\n\n  //If GCD of self or B = 0\n  if(A === B || B.precision === 0){\n    return C;\n  }\n\n  const base: number = C.base;\n\n  //If C = 0\n  if(C.precision === 0){\n    copy(C, B);\n    C.isNegative = false;\n\n  //If |C| > 0 && |B| > 0\n  } else {\n\n    //Normalize the bases\n    changeBase(C, B.base);\n\n    //Calculate GCD\n    [C.digits,,C.precision] = steinGCD(\n      C.digits, 0, C.precision, B.digits.slice(0, B.precision), 0, B.precision, C.base\n    );\n  }\n\n  //Return C to original base\n  return changeBase(C, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/gcd.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {decrement} from './decrement';\nimport {halve as _halve} from '../algorithm/halve';\nimport {setZero, setOne} from '../util/intUtils';\n\nexport function halve(A: Integer, isMutable: boolean = false): [Integer, Integer] {\n  const remainder: Integer = setZero({base: A.base});\n  A = (isMutable) ? A : clone(A);\n\n  //If zero\n  if(A.precision === 0){\n    return [A, remainder];\n  }\n\n  //Halve\n  [A.precision, remainder.precision] = _halve(A.digits, 0, A.precision, A.base);\n\n  //If no remainder\n  if(remainder.precision === 0){\n    return [A, remainder];\n  }\n\n  //If remainder and C is negative\n  if(A.isNegative){\n\n    //Round down (e.g. Math.floor(-49.5) = -50)\n    decrement(A, true);\n  }\n\n  return [A, setOne(remainder)];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/halve.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {decrement} from '../algorithm/decrement';\nimport {increment as _increment} from '../algorithm/increment';\n\n\nexport function increment(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n\n  //If negative\n  if(A.isNegative){\n    A.precision = decrement(A.digits, 0, A.precision, A.base);\n\n    //If now zero\n    if(A.precision === 0){\n      A.isNegative = false;\n    }\n\n  //If positive\n  } else {\n    A.precision = _increment(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/increment.ts","import {Integer} from '../integer';\n\nexport function isInteger(A: any): A is Integer {\n  return A.hasOwnProperty('base')\n  && A.hasOwnProperty('digits')\n  && A.hasOwnProperty('precision')\n  && A.hasOwnProperty('isNegative');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isInteger.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {lcm as _lcm} from '../algorithm/lcm';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function lcm(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  const C: Integer = (isMutable) ? A : clone(A);\n\n  //Make C positive\n  C.isNegative = false;\n\n  //If LCM of self or A = 0 or B = 1\n  if(A === B || A.precision === 0 || (B.precision === 1 && B.digits[0] === 1)){\n    return C;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(C);\n  }\n\n  const base: number = C.base;\n\n  //If C = 1\n  if(C.precision === 1 && C.digits[0] === 1){\n    copy(C, B);\n    C.isNegative = false;\n\n  //If C > 1 and B > 1\n  } else {\n\n    //Normalize bases\n    changeBase(C, B.base);\n\n    //Calculate LCM\n    [C.digits, C.precision] = _lcm(\n      C.digits, 0, C.precision, B.digits, 0, B.precision, C.base\n    );\n  }\n\n  //Change C to original base\n  return changeBase(C, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/lcm.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {compare} from './compare';\n\nexport function max(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  A = (compare(A, B) < 0) ? B : A;\n  return (isMutable) ? A : clone(A);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/max.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {compare} from './compare';\n\nexport function min(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  A = (compare(A, B) > 0) ? B : A;\n  return (isMutable) ? A : clone(A);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/min.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {square} from './square';\nimport {karatsubaMultiplication} from '../algorithm/karatsubaMultiplication';\nimport {longMultiplication} from '../algorithm/longMultiplication';\nimport {singleDigitMultiplication} from '../algorithm/singleDigitMultiplication';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function multiply(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n\n  //If self\n  if(A === B){\n    return square(A, isMutable);\n  }\n\n  A = (isMutable) ? A : clone(A);\n\n  //If A is zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  //Multiply signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //Normalize to B's base\n  const base: number = A.base;\n  changeBase(A, B.base);\n\n  //If B is single digit\n  if(B.precision === 1){\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, A.precision, B.digits[0], A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //If C is single digit\n  if(A.precision === 1){\n    const multiplicand: number = A.digits[0];\n    A.digits = B.digits.slice(0, B.precision);\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, B.precision, multiplicand, A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //Make minimum room for multiplication\n  const maxNewLen: number = A.precision + B.precision - 1;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 100 && B.precision < 100){\n    A.precision = longMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  } else {\n    A.precision = karatsubaMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/multiply.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {isEven} from './isEven';\nimport {exponentiation} from '../algorithm/exponentiation';\nimport {setOne, setZero} from '../util/intUtils';\n\nexport function pow(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  const C: Integer = (isMutable) ? A : clone(A);\n\n  //C^0 = 1\n  if(B.precision === 0){\n    return setOne(C);\n  }\n\n  //If power is negative\n  if(B.isNegative){\n\n    //If 1 / 0\n    if(C.precision === 0){\n      throw new EvalError(\"Divide by zero\");\n    }\n\n    return setZero(C);\n  }\n\n  //0^B = zero\n  if(C.precision === 0){\n    return C;\n  }\n\n  //If negative base and even power\n  C.isNegative = !(C.isNegative && isEven(B));\n\n  //1^B = 1\n  if(C.precision === 1 && C.digits[0] === 1){\n    return C;\n  }\n\n  //C = C^B\n  C.precision = exponentiation(\n    C.digits, 0, C.precision, C.base, B.digits.slice(0,B.precision), 0, B.precision, B.base\n  );\n\n  return C;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/pow.ts","import {Integer} from '../integer';\n\nexport function signum(A: Integer): number {\n  return A.isNegative ? -1 : A.precision === 0 ? 0 : 1;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/signum.ts","import {Globals} from '../globals';\nimport {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {isInteger} from './isInteger';\nimport {setZero} from '../util/intUtils';\nimport {strToDigits} from '../util/numUtils';\n\nexport function toInteger(A: Integer | number | string, base: number = null, isMutable: boolean = false): Integer {\n\n  //If already an integer\n  if(isInteger(A)){\n    return setBase(A, (base == null) ? A.base : base, isMutable);\n  }\n\n  //Convert numbers to string\n  if(typeof A === \"number\"){\n    A = '' + A;\n\n  //If not an expected type\n  } else if(typeof A !== \"string\"){\n    throw TypeError(\"Expecting type Integer | string | number\");\n  }\n\n  //Convert string to base 10\n  const B: Integer = setZero({base: 10});\n  [B.digits, B.isNegative] = strToDigits(A);\n  B.precision = B.digits.length;\n\n  //Convert to chosen base\n  return setBase(B, (base == null) ? Globals.DEFAULT_BASE : base, true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toInteger.ts","import {Globals} from '../globals';\nimport {Integer} from '../integer';\n\n//Assumes input cipher is adequate for base\nexport function toString(A: Integer, sep: string = null, cipher: ReadonlyArray<string> = null): string {\n\n  //If negative\n  const sign: string = A.isNegative ? \"-\" : \"\";\n\n  //If no custom cipher\n  if(cipher == null){\n\n    //If default cipher too small for base\n    if(Globals.DEFAULT_CIPHER.length < A.base){\n\n      //Print without cipher\n      sep = (sep == null) ? \":\": sep;\n      return sign + A.digits.slice(0,A.precision).reverse().join(sep);\n    }\n\n    //Use default cipher\n    cipher = Globals.DEFAULT_CIPHER;\n  }\n\n  //Print with cipher\n  sep = (sep == null) ? \"\" : sep;\n  return sign + A.digits.map(v => cipher[v]).reverse().join(sep);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toString.ts","import {halve} from './halve';\nimport {karatsubaSquare} from './karatsubaSquare';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\n\n/*\n  f(A, B) = A^B = Math.pow(A, B)\n  Overwrites A\n  Overwrites B\n  Assumes A > 0\n  Assumes B > 0\n*/\nexport function exponentiation(A: number[], minA: number, maxA: number, baseA: number, B: number[], minB: number, maxB: number, baseB: number): number {\n  let maxC: number = 1;\n  const C: number[] = [1];\n\n  //Until power is 1\n  while(minB + 1 < maxB || B[minB] > 1){\n\n    //Divide the power in half\n    let remainder: number;\n    [maxB, remainder] = halve(B, minB, maxB, baseB);\n\n    //If remainder\n    if(remainder > 0){\n      C.length = maxC + maxA;\n      maxC = karatsubaMultiplication(C, 0, maxC, A, minA, maxA, baseA);\n    }\n\n    //Square the base\n    maxA = karatsubaSquare(A, minA, maxA, baseA);\n  }\n\n  if(C.length > 1){\n    maxA = karatsubaMultiplication(A, minA, maxA, C, 0, maxC, baseA);\n  }\n\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/exponentiation.ts","import {basicDivision} from './basicDivision';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\nimport {steinGCD} from './steinGCD';\n\n/*\n  f(A, B) = lcm(A, B)\n  Overwrites A\n  Asumes A > 0, B > 0\n  See: https://en.wikipedia.org/wiki/Least_common_multiple\n*/\nexport function lcm(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number] {\n\n  //Copy A\n  let C: number[] = A.slice(minA, maxA);\n  let maxC: number = C.length;\n\n  //Copy B\n  const D: number[] = B.slice(minB, maxB);\n  const maxD: number = D.length;\n\n  //Get gcd(A, B)\n  [C,,maxC] = steinGCD(C, 0, maxC, D, 0, maxD, base);\n  [C,,maxC] = basicDivision(A, minA, maxA, C, 0, maxC, base);\n  maxC = karatsubaMultiplication(C, 0, maxC, B, minB, maxB, base);\n  return [C, maxC];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/lcm.ts","import {safeShiftUp} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(A, B) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n\n  Explanation:\n      a  b  c  _  _  _\n    *\n      d  e  f\n    ------------------\n              cd ce cf\n           bd be bf\n        ad ae af\n    ------------------\n      g  h  i  j  k  l\n\n*/\nexport function longMultiplication(A: number[], minA: number, maxA: number, B: ReadonlyArray<number>, minB: number, maxB: number, base: number): number {\n\n  //Shift A to the left\n  const lenB: number = maxB - minB;\n  const minC: number = minA + lenB;\n  safeShiftUp(A, minA, maxA, lenB);\n  zero(A, minA, minC);\n\n  //For each digit in multiplicand\n  const maxC: number = maxA + lenB;\n  for(let a: number = minC; a < maxC; ++a){\n    let carry: number = 0;\n    let i: number = a - lenB;\n\n    //Multiply by multiplier\n    for(let b: number = minB; b < maxB; ++b){\n      let v: number = A[a] * B[b] + A[i] + carry;\n      if(v < base){\n        carry = 0;\n      } else {\n        carry = 0 | (v / base);\n        v = v % base;\n      }\n      A[i++] = v;\n    }\n\n    //Add remaining carry\n    A[i] = carry;\n  }\n\n  //Return new length\n  return (A[maxC - 1] === 0) ? maxC - 1 : maxC;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longMultiplication.ts","import {unsafeShiftUp} from '../util/arrayUtils';\nimport {zero} from '../util/numUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n\n  Explanation:\n      a   b   c   d   e   f   g   _   _   _   _   _   _   _\n    *\n      a   b   c   d   e   f   g\n    -------------------------------------------------------\n                                 ag  bg  cg  dg  eg  fg  gg\n                             af  bf  cf  df  ef  ff  fg\n                         ae  be  ce  de  ee  ef  eg\n                     ad  bd  cd  dd  de  df  dg\n                 ac  bc  cc  cd  ce  cf  cg\n             ab  bb  bc  bd  be  bf  bg\n         aa  ab  ac  ad  ae  af  ag\n    -------------------------------------------------------\n                                2ag 2bg 2cg 2dg 2eg 2fg  gg\n                            2af 2bf 2cf 2df 2ef  ff\n                        2ae 2be 2ce 2de  ee\n                    2ad 2bd 2cd  dd\n                2ac 2bc  cc\n            2ab  bb\n         aa\n    -------------------------------------------------------\n      h   i   j   k   l   m   n   o   p   q   r   s   t   u\n*/\nexport function longSquare(A: number[], min: number, max: number, base: number): number {\n\n  //Move digits to the left\n  let newMax: number = max - min;\n  unsafeShiftUp(A, min, max, newMax);\n  zero(A, min, max);\n\n  //For every digit\n  newMax = newMax + max;\n  for(let d: number = min, s: number = max; d < newMax; d = d + 2){\n    const digit: number = A[s++];\n\n    //Square the digit\n    let carry: number = 0;\n    A[d] = A[d] + digit * digit;\n    if(A[d] >= base){\n      carry = 0 | (A[d] / base);\n      A[d] = A[d] % base;\n    }\n\n    //Multiply by higher digits twice\n    let o: number = d + 1;\n    for(let m: number = s; m < newMax; ++o){\n\n      //Multiply\n      let quotient: number = 0;\n      let product: number = A[m++] * digit;\n      if(product >= base){\n        quotient = 0 | (product / base);\n        product = product % base;\n      }\n\n      //Double\n      quotient = quotient << 1;\n      product = product << 1;\n\n      //Add\n      A[o] = A[o] + product + carry;\n      carry = quotient;\n      if(A[o] >= base){\n        carry = carry + (0 | (A[o] / base));\n        A[o] = A[o] % base;\n      }\n    }\n\n    //Place remaining carry\n    A[o] = carry;\n  }\n\n  //Return new length\n  return A[newMax - 1] === 0 ? newMax - 1 : newMax;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longSquare.ts","/*\n  f(A, B) = A - B\n  Overwrites A\n  Assumes B > A\n*/\nexport function reverseSubtraction(A: number[], minA: number, maxA: number, B: ReadonlyArray<number>, minB: number, maxB: number, base: number): number {\n\n  //Subtract common digits\n  let borrow: number = 0;\n  while(minA < maxA){\n    let v: number = B[minB++] - borrow - A[minA];\n    if (v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[minA++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    for(borrow = base - 1; B[minB] === 0; ++minB){\n      A[minA++] = borrow;\n    }\n    A[minA++] = B[minB++] - 1;\n  }\n\n  //Copy extra digits\n  if(minB < maxB){\n    do {\n      A[minA++] = B[minB++];\n    } while (minB < maxB);\n\n  //Check for new length\n  } else {\n    while(A[minA-1] === 0){\n      --minA;\n    }\n  }\n\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseSubtraction.ts","//Assumes valid inputs\nexport function setBase(A: number[], minA: number, maxA: number, curBase: number, newBase: number): [number[], number] {\n\n  //If zero or same base\n  if(maxA === minA || curBase === newBase){\n    return [A, maxA];\n  }\n\n  //Create new array\n  let maxB: number = 0;\n  const B: number[] = new Array(Math.ceil(\n    (maxA - minA) * Math.log(curBase) / Math.log(newBase)\n  ));\n\n  //Return number in newBase\n  do {\n    let remainder: number = 0;\n    for(let i: number = maxA; i > minA; remainder = remainder % newBase){\n      remainder = remainder*curBase + A[--i];\n      A[i] = 0 | (remainder / newBase);\n    }\n    B[maxB++] = remainder;\n    while(A[maxA - 1] === 0){\n      if(--maxA === minA){\n        return [B, maxB];\n      }\n    }\n  } while(true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/setBase.ts","/*\n  f(A, B) = A / B\n  Overwrites A\n  Assumes B > 0\n  Assumes A > 0\n  Assumes no leading zeros\n*/\nexport function singleDigitDivision(A: number[], minA: number, maxA: number, B: number, base: number): [number, number] {\n  let remainder: number = 0;\n  for(let a: number = maxA; a-- > minA; remainder = remainder % B){\n    remainder = remainder * base + A[a];\n    A[a] = 0 | (remainder / B);\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitDivision.ts","import {Globals} from '../globals';\nimport {Integer} from '../integer';\nimport {abs} from '../functional/abs';\nimport {add} from '../functional/add';\nimport {compare} from '../functional/compare';\nimport {copy} from '../functional/copy';\nimport {decrement} from '../functional/decrement';\nimport {divideAndRemainder} from '../functional/divideAndRemainder';\nimport {double} from '../functional/double';\nimport {gcd} from '../functional/gcd';\nimport {halve} from '../functional/halve';\nimport {increment} from '../functional/increment';\nimport {isEven} from '../functional/isEven';\nimport {lcm} from '../functional/lcm';\nimport {max} from '../functional/max';\nimport {min} from '../functional/min';\nimport {multiply} from '../functional/multiply';\nimport {negate} from '../functional/negate';\nimport {pow} from '../functional/pow';\nimport {signum} from '../functional/signum';\nimport {setBase} from '../functional/setBase';\nimport {subtract} from '../functional/subtract';\nimport {square} from '../functional/square';\nimport {toInteger} from '../functional/toInteger';\nimport {toString} from '../functional/toString';\nimport {assign} from '../util/intUtils';\n\nexport class BigInt {\n  public static get MINUS_ONE(): BigInt {return new BigInt(-1)};\n  public static get ZERO(): BigInt {return new BigInt(0)};\n  public static get ONE(): BigInt {return new BigInt(1)};\n\n  public base: number;\n  public digits: number[];\n  public precision: number;\n  public isNegative: boolean;\n\n  constructor(input: Integer | number | string) {\n    assign(this, toInteger(input, Globals.DEFAULT_BASE, false));\n    this.digits.length = this.precision;\n  }\n\n  public abs(isMutable?: boolean): BigInt {\n    return BigInt.toBigInt(abs(this, isMutable), true);\n  };\n\n  public add(addend: Integer, isMutable?: boolean): BigInt {\n    const A: Integer = add(this, addend, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public clone(): BigInt {\n    return new BigInt(this);\n  }\n\n  public compareTo(B: Integer): number {\n    return compare(this, B);\n  }\n\n  public copy(source: Integer): BigInt {\n    copy(this, source);\n    return this;\n  }\n\n  public divide(divisor: Integer, isMutable?: boolean): BigInt {\n    return this.divideAndRemainder(divisor, isMutable)[0];\n  }\n\n  public divideAndRemainder(divisor: Integer, isMutable?: boolean): [BigInt, BigInt] {\n    let Q: Integer;\n    let R: Integer;\n    [Q, R] = divideAndRemainder(this, divisor, isMutable);\n    Q.digits.length = Q.precision;\n    R.digits.length = R.precision;\n    return [BigInt.toBigInt(Q, true), <BigInt>assign(BigInt.ZERO, R)];\n  }\n\n  public double(isMutable?: boolean): BigInt {\n    return BigInt.toBigInt(double(this, isMutable), true);\n  }\n\n  public gcd(B: Integer, isMutable?: boolean): BigInt {\n    const A: Integer = gcd(this, B, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public getBase(): number {\n    return this.base;\n  }\n\n  public half(isMutable?: boolean): [BigInt, BigInt] {\n    let Q: Integer;\n    let R: Integer;\n    [Q, R] = halve(this, isMutable);\n    Q.digits.length = Q.precision;\n    return [BigInt.toBigInt(Q, true), new BigInt(R.precision)];\n  }\n\n  public static isBigInt(n: any): n is BigInt {\n    return n instanceof BigInt;\n  }\n\n  public isEven(): boolean {\n    return isEven(this);\n  }\n\n  public isOdd(): boolean {\n    return !this.isEven();\n  }\n\n  //See: https://en.wikipedia.org/wiki/Least_common_multiple\n  public lcm(B: Integer, isMutable?: boolean): BigInt {\n    const A: Integer = lcm(this, B, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public static max(A: Integer, B: Integer, isMutable?: boolean): BigInt {\n    return BigInt.toBigInt(max(A, B, isMutable), true);\n  }\n\n  public static min(A: Integer, B: Integer, isMutable?: boolean): BigInt {\n    return BigInt.toBigInt(min(A, B, isMutable), true);\n  }\n\n  public minusminus(isMutable?: boolean): BigInt {\n    const A: Integer = decrement(this, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public multiply(multiplier: Integer, isMutable?: boolean): BigInt {\n    const A: Integer = multiply(this, multiplier, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public negate(isMutable?: boolean): BigInt {\n    return BigInt.toBigInt(negate(this, isMutable), true);\n  };\n\n  public plusplus(isMutable?: boolean): BigInt {\n    return BigInt.toBigInt(increment(this, isMutable), true);\n  }\n\n  public pow(power: Integer, isMutable?: boolean): BigInt {\n    const A: Integer = pow(this, power, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public remainder(divisor: Integer, isMutable?: boolean): BigInt {\n    const R: BigInt = this.divideAndRemainder(divisor, isMutable)[1];\n    if(isMutable){\n      assign(this, R);\n    }\n    return this;\n  }\n\n  public setBase(base: number, isMutable?: boolean): BigInt {\n    const A: Integer = setBase(this, base, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public signum(): number {\n    return signum(this);\n  };\n\n  public square(isMutable?: boolean): BigInt {\n    const A: Integer = square(this, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public subtract(subtrahend: Integer, isMutable?: boolean): BigInt {\n    const A: Integer = subtract(this, subtrahend, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public static toBigInt(input: Integer | number | string, isMutable?: boolean): BigInt {\n    return (BigInt.isBigInt(input) && isMutable) ? input : new BigInt(input);\n  }\n\n  public toString(sep: string = null, cipher: ReadonlyArray<string> = null): string {\n    return toString(this, sep, cipher);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/oop/bigInt.ts"],"sourceRoot":""}