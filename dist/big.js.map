{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///big.js","webpack:///webpack/bootstrap 6261c96a7978477bdc55","webpack:///./src/index.ts","webpack:///./src/util/intUtils.ts","webpack:///./src/util/arrayUtils.ts","webpack:///./src/functional/copy.ts","webpack:///./src/algorithm/subtraction.ts","webpack:///./src/algorithm/addition.ts","webpack:///./src/constants.ts","webpack:///./src/functional/compare.ts","webpack:///./src/algorithm/compare.ts","webpack:///./src/algorithm/decrement.ts","webpack:///./src/algorithm/halve.ts","webpack:///./src/algorithm/increment.ts","webpack:///./src/algorithm/karatsubaMultiplication.ts","webpack:///./src/functional/assign.ts","webpack:///./src/functional/negate.ts","webpack:///./src/algorithm/basicDivision.ts","webpack:///./src/algorithm/double.ts","webpack:///./src/algorithm/isEven.ts","webpack:///./src/algorithm/karatsubaSquare.ts","webpack:///./src/algorithm/reverseAddition.ts","webpack:///./src/algorithm/singleDigitMultiplication.ts","webpack:///./src/algorithm/steinGCD.ts","webpack:///./src/functional/add.ts","webpack:///./src/functional/decrement.ts","webpack:///./src/functional/double.ts","webpack:///./src/functional/isEven.ts","webpack:///./src/functional/isInteger.ts","webpack:///./src/functional/setBase.ts","webpack:///./src/functional/square.ts","webpack:///./src/functional/subtract.ts","webpack:///./src/util/numUtils.ts","webpack:///./src/algorithm/exponentiation.ts","webpack:///./src/algorithm/lcm.ts","webpack:///./src/algorithm/longMultiplication.ts","webpack:///./src/algorithm/longSquare.ts","webpack:///./src/algorithm/reverseSubtraction.ts","webpack:///./src/algorithm/setBase.ts","webpack:///./src/algorithm/singleDigitDivision.ts","webpack:///./src/functional/abs.ts","webpack:///./src/functional/divideAndRemainder.ts","webpack:///./src/functional/gcd.ts","webpack:///./src/functional/halve.ts","webpack:///./src/functional/increment.ts","webpack:///./src/functional/lcm.ts","webpack:///./src/functional/max.ts","webpack:///./src/functional/min.ts","webpack:///./src/functional/multiply.ts","webpack:///./src/functional/pow.ts","webpack:///./src/functional/signum.ts","webpack:///./src/functional/toInteger.ts","webpack:///./src/functional/toString.ts","webpack:///./src/oop/bigInt.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","bigInt_1","Int","BigInt","changeBase","a","b","setBase_1","setBase","digits","precision","base","setOne","isNegative","setZero","unsafeShiftUp","d","e","safeShiftUp","copy","set","printArr","f","g","forEach","h","j","k","slice","join","assign_1","assign","subtraction","i","decrement_1","decrement","addition","increment_1","increment","MIN_BASE","MAX_BASE","DEFAULT_BASE","MAX_PRECISION","CIPHER","Object","freeze","compare","Math","log","ceil","intUtils_1","compare_1","halve","karatsubaMultiplication","numUtils_1","max","min","l","Array","arrayUtils_1","addition_1","n","o","subtraction_1","reverseAddition_1","reverseAddition","q","negate","basicDivision","s","divThreeHalvesByTwo","t","singleDigitMultiplication_1","singleDigitMultiplication","double","isEven","karatsubaSquare","steinGCD","isEven_1","halve_1","double_1","add","copy_1","length","negate_1","subtract_1","subtract","isInteger","hasOwnProperty","constants_1","RangeError","square","longSquare_1","longSquare","karatsubaSquare_1","add_1","reverseSubtraction_1","reverseSubtraction","strToDigits","trim","TypeError","replace","match","exponentiation","karatsubaMultiplication_1","lcm","steinGCD_1","basicDivision_1","longMultiplication","arrayUtils_2","r","singleDigitDivision","abs","divideAndRemainder","EvalError","singleDigitDivision_1","gcd","lcm_1","multiply","square_1","longMultiplication_1","pow","exponentiation_1","signum","toInteger","isInteger_1","toString","reverse","map","Constants","abs_1","divideAndRemainder_1","gcd_1","max_1","min_1","multiply_1","pow_1","signum_1","toInteger_1","toString_1","defineProperty","get","enumerable","configurable","prototype","clone","compareTo","divide","ZERO","getBase","half","ONE","isBigInt","isOdd","toBigInt","minusminus","plusplus","remainder"],"mappings":"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","file":"big.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var bigInt_1=__webpack_require__(51);exports.Int=bigInt_1.BigInt;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var setBase_1=__webpack_require__(36);function changeBase(a,b){return c=setBase_1.setBase(a.digits,0,a.precision,a.base,b),a.digits=c[0],a.precision=c[1],a.base=b,a;var c}exports.changeBase=changeBase;function setOne(a){return a.precision=1,a.digits=[1],a.isNegative=!1,a}exports.setOne=setOne;function setZero(a){return a.precision=0,a.digits=[],a.isNegative=!1,a}exports.setZero=setZero;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function unsafeShiftUp(a,b,c,d){for(var e=b+d;b<c;a[e++]=a[b++]);}exports.unsafeShiftUp=unsafeShiftUp;function safeShiftUp(a,b,c,d){for(var e=c+d;c>b;a[--e]=a[--c]);}exports.safeShiftUp=safeShiftUp;function copy(a,b,c,d,e){for(;d<e;)a[b++]=c[d++]}exports.copy=copy;function set(a,b,c,d){for(;b<c;)a[b++]=d}exports.set=set;function printArr(a,b,c,d,e){function f(g){return g.forEach(function(h,j,k){(null==h||h!==h)&&(k[j]=h+\"\")}),g}return void 0===d&&(d=b),void 0===e&&(e=c),\"[\"+f(a.slice(b,d)).join(\", \")+\"|\"+f(a.slice(d,e)).join(\", \")+\"|\"+f(a.slice(e,c)).join(\", \")+\"]\"}exports.printArr=printArr;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var assign_1=__webpack_require__(13);function copy(a,b){return assign_1.assign(a,b),a.digits=a.digits.slice(0,a.precision),a}exports.copy=copy;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(9);function subtraction(b,c,d,e,f,g,h){for(var i=c,j=0;f<g;){var k=b[i]-j-e[f++];0>k?(j=1,k+=h):j=0,b[i++]=k}if(0<j)return decrement_1.decrement(b,i,d,h);if(i===d){for(;i-->c&&0===b[i];);d=i+1}return d}exports.subtraction=subtraction;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var increment_1=__webpack_require__(11);function addition(a,b,c,d,e,f,g){for(var h=0;e<f;){var i=a[b]+d[e++]+h;i<g?h=0:(h=1,i-=g),a[b++]=i}return 0<h?increment_1.increment(a,b,c,g):c}exports.addition=addition;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';exports.MIN_BASE=2,exports.MAX_BASE=94906265,exports.DEFAULT_BASE=94906264,exports.MAX_PRECISION=4294967295,exports.CIPHER=Object.freeze(['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']);\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var intUtils_1=__webpack_require__(1),compare_1=__webpack_require__(8);function compare(a,b){if(a===b)return 0;if(a.isNegative!==b.isNegative)return a.isNegative?-1:1;if(a.base!==b.base){var c=Math.log(a.base)/Math.log(b.base);if(Math.ceil(a.precision*c)>b.base)return 1;if(Math.ceil((a.precision+1)*c)<b.precision)return-1}var d=a.base;intUtils_1.changeBase(a,b.base);var e=compare_1.compare(a.digits,0,a.precision,b.digits,0,b.precision);return intUtils_1.changeBase(a,d),e}exports.compare=compare;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function compare(a,b,c,e,f,g){var h=c-b-g+f;if(0!==h)return 0>h?-1:1;for(;c>b;)if(a[--c]!==e[--g])return a[c]<e[g]?-1:1;return 0}exports.compare=compare;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function decrement(a,b,c,d){for(;0===a[b];a[b++]=d-1);return--a[b],b+1===c&&0===a[b]?c-1:c}exports.decrement=decrement;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function halve(a,b,c,d){var e=0;for(var f=c;f-->b;a[f]>>>=1)a[f]+=d&-e,e=1&a[f];return 0===a[c-1]&&--c,[c,e]}exports.halve=halve;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function increment(a,b,c,d){for(--d;b<c&&a[b]===d;a[b++]=0);return b===c?a[c++]=1:++a[b],c}exports.increment=increment;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(5),reverseAddition_1=__webpack_require__(19),subtraction_1=__webpack_require__(4),numUtils_1=__webpack_require__(30),arrayUtils_1=__webpack_require__(2);function karatsubaMultiplication(a,b,c,d,e,f,g){var h=numUtils_1.max(c-b,f-e);if(2>h)return h=a[b]*d[e],h<g?a[c]=0:(a[c++]=0|h/g,h%=g),a[b]=h,c;h=h+1>>>1;var i=b+h,j=numUtils_1.min(i,c),k=numUtils_1.min(e+h,f),l=Array(k-e+1);arrayUtils_1.copy(l,0,d,e,k);var m=addition_1.addition(l,0,k-e,d,k,f,g),n=Array(j-b+1+m);arrayUtils_1.copy(n,0,a,b,j);var o=addition_1.addition(n,0,j-b,a,j,c,g);o=karatsubaMultiplication(n,0,o,l,0,m,g),a[c]=0,arrayUtils_1.unsafeShiftUp(a,j,c,h);var p=karatsubaMultiplication(a,b,j,d,e,k,g);if(o=subtraction_1.subtraction(n,0,o,a,b,p,g),j===c||k===f)return p<=i?(c=i+o,arrayUtils_1.set(a,p,i,0),arrayUtils_1.copy(a,i,n,0,o)):o>p-i?c=reverseAddition_1.reverseAddition(a,i,p,n,0,o,g):c=addition_1.addition(a,i,p,n,0,o,g),c;arrayUtils_1.set(a,p,c,0);var q=j+h;return c=karatsubaMultiplication(a,q,c+h,d,k,f,g),o=subtraction_1.subtraction(n,0,o,a,q,c,g),c=addition_1.addition(a,i,c,n,0,o,g),c}exports.karatsubaMultiplication=karatsubaMultiplication;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function assign(a,b){return a.base=b.base,a.digits=b.digits,a.precision=b.precision,a.isNegative=b.isNegative,a}exports.assign=assign;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function negate(a){return 0<a.precision&&(a.isNegative=!a.isNegative),a}exports.negate=negate;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(8),singleDigitMultiplication_1=__webpack_require__(20),subtraction_1=__webpack_require__(4),arrayUtils_1=__webpack_require__(2);function basicDivision(a,b,c,d,e,f,g){var h=f-e,j=c-b-h,k=Array(j+1);arrayUtils_1.set(k,0,j+1,0);for(var l=c;0<=compare_1.compare(a,b+j,l,d,e,f);)++k[j],l=subtraction_1.subtraction(a,b+j,l,d,e,f,g);var m=d[f-1],n=d[f-2],o=Array(h+1);for(var p=c-1,s=j;0<s--;--p)if(k[s]=divThreeHalvesByTwo(a[p],a[p-1],a[p-2],m,n,g),0!==k[s]){arrayUtils_1.copy(o,0,d,e,f);var t=singleDigitMultiplication_1.singleDigitMultiplication(o,0,h,k[s],g);0<compare_1.compare(o,0,t,a,b+s,l)&&(--k[s],t=subtraction_1.subtraction(o,0,t,d,e,f,g)),l=subtraction_1.subtraction(a,b+s,l,o,0,t,g)}for(;l>b&&0===a[l-1];)--l;return[k,a,0===k[j]?j:j+1,l]}exports.basicDivision=basicDivision;function divThreeHalvesByTwo(a,b,c,d,e,f){var g=a*f+b,h=g%d;return g=0|g/d,h=h*f-g*e+c,0>h&&(h=h+d*f+e,g=0>h?g-2:g-1),g}\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function double(a,b,c,d){for(var e=0;b<c;){var f=(a[b]<<1)+e;f<d?e=0:(e=1,f-=d),a[b++]=f}return 0<e&&(a[b++]=1),b}exports.double=double;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function isEven(a,b,c,d){if(b===c)return!0;if(0==(1&d))return 0==(1&a[b]);for(var e=0;b<c;)e^=a[b++];return 0==(1&e)}exports.isEven=isEven;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(5),subtraction_1=__webpack_require__(4),arrayUtils_1=__webpack_require__(2);function karatsubaSquare(a,b,c,d){var e=c-b;if(2>e)return e=a[b]*a[b],e<d?a[c]=0:(a[c++]=0|e/d,e%=d),a[b]=e,c;e=e+1>>>1;var f=b+e,g=Array(2*e+2);arrayUtils_1.copy(g,0,a,b,f);var h=addition_1.addition(g,0,e,a,f,c,d);a[c]=0,arrayUtils_1.unsafeShiftUp(a,f,c,e);var i=karatsubaSquare(a,b,f,d);arrayUtils_1.set(a,i,c,0);var j=f+e;return c=karatsubaSquare(a,j,c+e,d),h=karatsubaSquare(g,0,h,d),h=subtraction_1.subtraction(g,0,h,a,b,i,d),h=subtraction_1.subtraction(g,0,h,a,j,c,d),addition_1.addition(a,f,c,g,0,h,d)}exports.karatsubaSquare=karatsubaSquare;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(5);function reverseAddition(a,c,d,e,f,g,h){var i=f-c+d;for(var j=i;j<g;a[d++]=e[j++]);return addition_1.addition(a,c,d,e,f,i,h)}exports.reverseAddition=reverseAddition;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitMultiplication(a,b,c,d,e){for(var f=0;b<c;){var g=a[b]*d+f;g<e?f=0:(f=0|g/e,g%=e),a[b++]=g}return 0<f&&(a[b++]=f),b}exports.singleDigitMultiplication=singleDigitMultiplication;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(8),double_1=__webpack_require__(16),halve_1=__webpack_require__(10),isEven_1=__webpack_require__(17),subtraction_1=__webpack_require__(4);function steinGCD(a,b,d,e,f,g,h){for(var i=0;isEven_1.isEven(a,b,d,h)&&isEven_1.isEven(e,f,g,h);)d=halve_1.halve(a,b,d,h)[0],g=halve_1.halve(e,f,g,h)[0],++i;for(;isEven_1.isEven(a,b,d,h);)d=halve_1.halve(a,b,d,h)[0];do{for(;isEven_1.isEven(e,f,g,h);)g=halve_1.halve(e,f,g,h)[0];var j=compare_1.compare(a,b,d,e,f,g);if(0===j)break;if(0<j){var k=a;a=e,e=k,j=b,b=f,f=j,j=d,d=g,g=j}g=subtraction_1.subtraction(e,f,g,a,b,d,h),g=halve_1.halve(e,f,g,h)[0]}while(!0);for(;0<i--;)d=double_1.double(a,b,d,h);return[a,b,d]}exports.steinGCD=steinGCD;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(3),double_1=__webpack_require__(24),negate_1=__webpack_require__(14),subtract_1=__webpack_require__(29),addition_1=__webpack_require__(5),reverseAddition_1=__webpack_require__(19),intUtils_1=__webpack_require__(1);function add(a,b){if(a===b)return double_1.double(a);if(0===b.precision)return a;var c=a.base;return 0===a.precision?(copy_1.copy(a,b),intUtils_1.changeBase(a,c)):(intUtils_1.changeBase(a,b.base),a.isNegative===b.isNegative?a.precision<b.precision?(a.digits.length<=b.precision&&(a.digits.length=b.precision+1),a.precision=reverseAddition_1.reverseAddition(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=addition_1.addition(a.digits,0,a.precision,b.digits,0,b.precision,a.base):(negate_1.negate(a),subtract_1.subtract(a,b),negate_1.negate(a)),intUtils_1.changeBase(a,c))}exports.add=add;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(9),increment_1=__webpack_require__(11),intUtils_1=__webpack_require__(1);function decrement(a){return a.isNegative?a.precision=increment_1.increment(a.digits,0,a.precision,a.base):0===a.precision?(intUtils_1.setOne(a),a.isNegative=!0):a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),a}exports.decrement=decrement;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var double_1=__webpack_require__(16);function double(a){return a.precision=double_1.double(a.digits,0,a.precision,a.base),a}exports.double=double;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var isEven_1=__webpack_require__(17);function isEven(a){return isEven_1.isEven(a.digits,0,a.precision,a.base)}exports.isEven=isEven;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t'use strict';function isInteger(a){return a.hasOwnProperty('base')&&a.hasOwnProperty('digits')&&a.hasOwnProperty('precision')&&a.hasOwnProperty('isNegative')}exports.isInteger=isInteger;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(6),intUtils_1=__webpack_require__(1);function setBase(a,b){if(b=0|b,a.base===b)return a;if(b<constants_1.MIN_BASE)throw RangeError(b+\" < MIN_BASE (\"+constants_1.MIN_BASE+\")\");if(b>constants_1.MAX_BASE)throw RangeError(b+\" > MAX_BASE (\"+constants_1.MAX_BASE+\")\");return intUtils_1.changeBase(a,b)}exports.setBase=setBase;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var karatsubaSquare_1=__webpack_require__(18),longSquare_1=__webpack_require__(34);function square(a){if(0===a.precision)return a;a.isNegative=!1;var b=2*a.precision;return a.digits.length<b&&(a.digits.length=b),a.precision=500>a.precision?longSquare_1.longSquare(a.digits,0,a.precision,a.base):karatsubaSquare_1.karatsubaSquare(a.digits,0,a.precision,a.base),a}exports.square=square;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var add_1=__webpack_require__(22),compare_1=__webpack_require__(7),copy_1=__webpack_require__(3),negate_1=__webpack_require__(14),reverseSubtraction_1=__webpack_require__(35),subtraction_1=__webpack_require__(4),intUtils_1=__webpack_require__(1);function subtract(a,b){if(a===b)return intUtils_1.setZero(a);if(0===b.precision)return a;var d=a.base;if(0===a.precision)return copy_1.copy(a,b),negate_1.negate(a),intUtils_1.changeBase(a,d);if(a.isNegative!==b.isNegative)return negate_1.negate(a),add_1.add(a,b),negate_1.negate(a);intUtils_1.changeBase(a,b.base);var e=compare_1.compare(a,b);return 0===e?(a.base=d,intUtils_1.setZero(a)):(0>e?(negate_1.negate(a),a.digits.length<b.precision&&(a.digits.length=b.precision),a.precision=reverseSubtraction_1.reverseSubtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=subtraction_1.subtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,d))}exports.subtract=subtract;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function max(c,d){return c<d?d:c}exports.max=max;function min(c,d){return c>d?d:c}exports.min=min;function strToDigits(c){if(c=c.trim(),1>c.length)throw new TypeError(\"NaN\");var d=\"-\"===c[0];if(c=c.replace(/^[-+]?0*/,\"\").replace(/\\.[0-9]+$/,\"\"),c.match(/[^\\d]/))throw new TypeError(\"NaN\");var e=c.length;if(0===e)return[[],!1];var f=Array(e);for(var g=0,h=e;0<h;++g)f[g]=0|c[--h];return[f,d]}exports.strToDigits=strToDigits;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var halve_1=__webpack_require__(10),karatsubaSquare_1=__webpack_require__(18),karatsubaMultiplication_1=__webpack_require__(12);function exponentiation(a,b,c,d,e,f,g,h){for(var i=1,j=[1];f+1<g||1<e[f];){var k=void 0;l=halve_1.halve(e,f,g,h),g=l[0],k=l[1],0<k&&(j.length=i+c,i=karatsubaMultiplication_1.karatsubaMultiplication(j,0,i,a,b,c,d)),c=karatsubaSquare_1.karatsubaSquare(a,b,c,d)}return 1<j.length&&(c=karatsubaMultiplication_1.karatsubaMultiplication(a,b,c,j,0,i,d)),c;var l}exports.exponentiation=exponentiation;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var basicDivision_1=__webpack_require__(15),arrayUtils_1=__webpack_require__(2),karatsubaMultiplication_1=__webpack_require__(12),steinGCD_1=__webpack_require__(21);function lcm(a,b,c,d,e,f,g){var h=c-b,i=Array(h);arrayUtils_1.copy(i,0,a,b,c);var j=f-e,k=Array(j);return arrayUtils_1.copy(k,0,d,e,f),l=steinGCD_1.steinGCD(i,0,h,k,0,j,g),i=l[0],h=l[2],m=basicDivision_1.basicDivision(a,b,c,i,0,h,g),i=m[0],h=m[2],h=karatsubaMultiplication_1.karatsubaMultiplication(i,0,h,d,e,f,g),[i,h];var l,m}exports.lcm=lcm;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(2),arrayUtils_2=__webpack_require__(2);function longMultiplication(c,d,e,f,g,h,j){var k=h-g,l=d+k;arrayUtils_2.safeShiftUp(c,d,e,k),arrayUtils_1.set(c,d,l,0);var m=e+k;for(var n=l;n<m;++n){var o=0,p=n-k;for(var q=g;q<h;++q){var r=c[n]*f[q]+c[p]+o;r<j?o=0:(o=0|r/j,r%=j),c[p++]=r}c[p]=o}return 0===c[m-1]?m-1:m}exports.longMultiplication=longMultiplication;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(2),arrayUtils_2=__webpack_require__(2);function longSquare(a,b,c,e){var f=c-b;arrayUtils_2.unsafeShiftUp(a,b,c,f),arrayUtils_1.set(a,b,c,0),f+=c;for(var g=b,h=c;g<f;g+=2){var i=a[h++],j=0;a[g]+=i*i,a[g]>=e&&(j=0|a[g]/e,a[g]%=e);var k=g+1;for(var l=h;l<f;++k){var n=0,p=a[l++]*i;p>=e&&(n=0|p/e,p%=e),n<<=1,p<<=1,a[k]=a[k]+p+j,j=n,a[k]>=e&&(j+=0|a[k]/e,a[k]%=e)}a[k]=j}return 0===a[f-1]?f-1:f}exports.longSquare=longSquare;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function reverseSubtraction(a,b,c,d,e,f,g){for(var h=0;b<c;){var i=d[e++]-h-a[b];0>i?(h=1,i+=g):h=0,a[b++]=i}if(0<h){for(h=g-1;0===d[e];++e)a[b++]=h;a[b++]=d[e++]-1}if(e<f)do a[b++]=d[e++];while(e<f);else for(;0===a[b-1];)--b;return b}exports.reverseSubtraction=reverseSubtraction;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function setBase(a,b,c,d,e){if(c===b||d===e)return[a,c];var f=0,g=Array(Math.ceil((c-b)*Math.log(d)/Math.log(e)));do{var h=0;for(var j=c;j>b;h%=e)h=h*d+a[--j],a[j]=0|h/e;for(g[f++]=h;0===a[c-1];)if(--c===b)return[g,f]}while(!0)}exports.setBase=setBase;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitDivision(b,c,d,e,f){var g=0;for(var h=d;h-->c;g%=e)g=g*f+b[h],b[h]=0|g/e;return 0===b[d-1]&&--d,[d,g]}exports.singleDigitDivision=singleDigitDivision;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function abs(a){return a.isNegative=!1,a}exports.abs=abs;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var assign_1=__webpack_require__(13),basicDivision_1=__webpack_require__(15),singleDigitDivision_1=__webpack_require__(37),intUtils_1=__webpack_require__(1);function divideAndRemainder(a,b){if(0===b.precision)throw new EvalError(\"Divide by zero\");if(a===b)return[intUtils_1.setOne(a),intUtils_1.setZero({base:a.base})];if(0===a.precision)return[a,intUtils_1.setZero({base:a.base})];if(a.isNegative=a.isNegative!==b.isNegative,1===b.precision&&1===b.digits[0])return[a,intUtils_1.setZero({base:a.base})];if(1===a.precision&&1===a.digits[0])return[intUtils_1.setZero(a),intUtils_1.setOne({base:a.base})];var c=a.base;if(c!==b.base){var d=Math.log(b.base)/Math.log(c);if(a.precision<Math.ceil(b.precision*d)){var e=assign_1.assign({},a);return[intUtils_1.setZero(a),e]}intUtils_1.changeBase(a,b.base)}if(a.precision<b.precision){intUtils_1.changeBase(a,c);var e=assign_1.assign({},a);return[intUtils_1.setZero(a),e]}var f=intUtils_1.setOne({base:a.base});return 2>b.precision?(g=singleDigitDivision_1.singleDigitDivision(a.digits,0,a.precision,b.digits[0],a.base),a.precision=g[0],f.digits[0]=g[1]):(h=basicDivision_1.basicDivision(a.digits,0,a.precision,b.digits,0,b.precision,a.base),a.digits=h[0],f.digits=h[1],a.precision=h[2],f.precision=h[3]),intUtils_1.changeBase(a,c),intUtils_1.changeBase(f,c),[a,f];var g,h}exports.divideAndRemainder=divideAndRemainder;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(3),steinGCD_1=__webpack_require__(21),intUtils_1=__webpack_require__(1);function gcd(a,b){if(a.isNegative=!1,a===b||0===b.precision)return a;var c=a.base;return 0===a.precision?(copy_1.copy(a,b),a.isNegative=!1):(intUtils_1.changeBase(a,b.base),d=steinGCD_1.steinGCD(a.digits,0,a.precision,b.digits,0,b.precision,a.base),a.digits=d[0],a.precision=d[2]),intUtils_1.changeBase(a,c);var d}exports.gcd=gcd;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(23),halve_1=__webpack_require__(10),intUtils_1=__webpack_require__(1);function halve(a){var b={base:a.base};return 0===a.precision?[a,intUtils_1.setZero(b)]:(c=halve_1.halve(a.digits,0,a.precision,a.base),a.precision=c[0],b.precision=c[1],0===b.precision)?[a,intUtils_1.setZero(b)]:(a.isNegative&&decrement_1.decrement(a),[a,intUtils_1.setOne(b)]);var c}exports.halve=halve;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(9),increment_1=__webpack_require__(11);function increment(a){return a.isNegative?(a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),0===a.precision&&(a.isNegative=!1)):a.precision=increment_1.increment(a.digits,0,a.precision,a.base),a}exports.increment=increment;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(3),lcm_1=__webpack_require__(32),intUtils_1=__webpack_require__(1);function lcm(a,b){if(a.isNegative=!1,a===b||0===a.precision||1===b.precision&&1===b.digits[0])return a;if(0===b.precision)return intUtils_1.setZero(a);var c=a.base;return 1===a.precision&&1===a.digits[0]?(copy_1.copy(a,b),a.isNegative=!1):(intUtils_1.changeBase(a,b.base),d=lcm_1.lcm(a.digits,0,a.precision,b.digits,0,b.precision,a.base),a.digits=d[0],a.precision=d[1]),intUtils_1.changeBase(a,c);var d}exports.lcm=lcm;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(7);function max(a,b){return 0>compare_1.compare(a,b)?b:a}exports.max=max;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(7);function min(a,b){return 0<compare_1.compare(a,b)?b:a}exports.min=min;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var square_1=__webpack_require__(28),karatsubaMultiplication_1=__webpack_require__(12),longMultiplication_1=__webpack_require__(33),singleDigitMultiplication_1=__webpack_require__(20),intUtils_1=__webpack_require__(1);function multiply(a,b){if(a===b)return square_1.square(a);if(0===a.precision)return a;if(0===b.precision)return intUtils_1.setZero(a);a.isNegative=a.isNegative!==b.isNegative;var c=a.base;if(intUtils_1.changeBase(a,b.base),1===b.precision)return a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,a.precision,b.digits[0],a.base),intUtils_1.changeBase(a,c);if(1===a.precision){var d=a.digits[0];return a.digits=b.digits.slice(0),a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,b.precision,d,a.base),intUtils_1.changeBase(a,c)}var e=a.precision+b.precision;return a.digits.length<e&&(a.digits.length=e),a.precision=100>a.precision&&100>b.precision?longMultiplication_1.longMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base):karatsubaMultiplication_1.karatsubaMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,c)}exports.multiply=multiply;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(3),isEven_1=__webpack_require__(25),exponentiation_1=__webpack_require__(31),intUtils_1=__webpack_require__(1);function pow(a,b){if(0===b.precision)return intUtils_1.setOne(a);if(b.isNegative){if(0===a.precision)throw new EvalError(\"Divide by zero\");return intUtils_1.setZero(a)}return 0===a.precision?a:(a.isNegative&&isEven_1.isEven(b)&&(a.isNegative=!1),1===a.precision&&1===a.digits[0])?a:(b=copy_1.copy({},b),a.precision=exponentiation_1.exponentiation(a.digits,0,a.precision,a.base,b.digits,0,b.precision,b.base),a)}exports.pow=pow;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function signum(a){return a.isNegative?-1:0===a.precision?0:1}exports.signum=signum;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(6),setBase_1=__webpack_require__(27),isInteger_1=__webpack_require__(26),intUtils_1=__webpack_require__(1),numUtils_1=__webpack_require__(30);function toInteger(a,b){if(void 0===b&&(b=constants_1.DEFAULT_BASE),isInteger_1.isInteger(a))return a;if(\"number\"==typeof a)a=\"\"+a;else if(\"string\"!=typeof a)throw TypeError(\"Expecting type Integer | string | number\");var c=intUtils_1.setZero({base:10});return d=numUtils_1.strToDigits(a),c.digits=d[0],c.isNegative=d[1],c.precision=c.digits.length,setBase_1.setBase(c,b),c;var d}exports.toInteger=toInteger;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(6);function toString(a,b,c){void 0===b&&(b=null),void 0===c&&(c=null);var d=a.isNegative?\"-\":\"\";if(null==c){if(constants_1.CIPHER.length<a.base)return b=null==b?\":\":b,d+a.digits.slice(0).reverse().join(b);c=constants_1.CIPHER}return b=null==b?\"\":b,d+a.digits.map(function(e){return c[e]}).reverse().join(b)}exports.toString=toString;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var Constants=__webpack_require__(6),abs_1=__webpack_require__(38),add_1=__webpack_require__(22),assign_1=__webpack_require__(13),compare_1=__webpack_require__(7),copy_1=__webpack_require__(3),decrement_1=__webpack_require__(23),divideAndRemainder_1=__webpack_require__(39),double_1=__webpack_require__(24),gcd_1=__webpack_require__(40),halve_1=__webpack_require__(41),increment_1=__webpack_require__(42),isEven_1=__webpack_require__(25),isInteger_1=__webpack_require__(26),lcm_1=__webpack_require__(43),max_1=__webpack_require__(44),min_1=__webpack_require__(45),multiply_1=__webpack_require__(46),negate_1=__webpack_require__(14),pow_1=__webpack_require__(47),signum_1=__webpack_require__(48),setBase_1=__webpack_require__(27),subtract_1=__webpack_require__(29),square_1=__webpack_require__(28),toInteger_1=__webpack_require__(49),toString_1=__webpack_require__(50),BigInt=function(){function a(b){isInteger_1.isInteger(b)?this.copy(b):assign_1.assign(this,toInteger_1.toInteger(b,a.DEFAULT_BASE)),this.digits.length=this.precision}return Object.defineProperty(a,\"MINUS_ONE\",{get:function get(){return new a(-1)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ZERO\",{get:function get(){return new a(0)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ONE\",{get:function get(){return new a(1)},enumerable:!0,configurable:!0}),a.prototype.abs=function(){return abs_1.abs(this),this},a.prototype.add=function(b){return add_1.add(this,b),this.digits.length=this.precision,this},a.prototype.clone=function(){return new a(this)},a.prototype.compareTo=function(b){return compare_1.compare(this,b)},a.prototype.copy=function(b){return copy_1.copy(this,b),this},a.prototype.divide=function(b){return this.divideAndRemainder(b),this},a.prototype.divideAndRemainder=function(b){var c,d;return e=divideAndRemainder_1.divideAndRemainder(this,b),c=e[0],d=e[1],c.digits.length=c.precision,d.digits.length=d.precision,[assign_1.assign(this,c),assign_1.assign(a.ZERO,d)];var e},a.prototype.double=function(){return double_1.double(this),this},a.prototype.gcd=function(b){return gcd_1.gcd(this,b),this.digits.length=this.precision,this},a.prototype.getBase=function(){return this.base},a.prototype.half=function(){var b;return c=halve_1.halve(this),b=c[1],this.digits.length=this.precision,[this,0===b.precision?a.ZERO:a.ONE];var c},a.isBigInt=function(b){return b instanceof a},a.prototype.isEven=function(){return isEven_1.isEven(this)},a.prototype.isOdd=function(){return!this.isEven()},a.prototype.lcm=function(b){return lcm_1.lcm(this,b),this.digits.length=this.precision,this},a.max=function(b,c){return a.toBigInt(max_1.max(b,c))},a.min=function(b,c){return a.toBigInt(min_1.min(b,c))},a.prototype.minusminus=function(){return decrement_1.decrement(this),this.digits.length=this.precision,this},a.prototype.multiply=function(b){return multiply_1.multiply(this,b),this.digits.length=this.precision,this},a.prototype.negate=function(){return negate_1.negate(this),this},a.prototype.plusplus=function(){return increment_1.increment(this),this},a.prototype.pow=function(b){return pow_1.pow(this,b),this.digits.length=this.precision,this},a.prototype.remainder=function(b){return assign_1.assign(this,this.divideAndRemainder(b)[1]),this},a.prototype.setBase=function(b){return setBase_1.setBase(this,b),this.digits.length=this.precision,this},a.prototype.signum=function(){return signum_1.signum(this)},(a.prototype.square=function(){return square_1.square(this),this.digits.length=this.precision,this},a.prototype.subtract=function(b){return subtract_1.subtract(this,b),this.digits.length=this.precision,this},a.toBigInt=function(b){return a.isBigInt(b)?b:new a(b)},a.prototype.toString=function(b,c){return void 0===b&&(b=null),void 0===c&&(c=null),toString_1.toString(this,b,c)},a)}();BigInt.MIN_BASE=Constants.MIN_BASE,BigInt.MAX_BASE=Constants.MAX_BASE,BigInt.DEFAULT_BASE=Constants.DEFAULT_BASE,BigInt.MAX_PRECISION=Constants.MAX_PRECISION,exports.BigInt=BigInt;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// big.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6261c96a7978477bdc55","export {BigInt as Int} from './oop/bigInt';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import {Integer} from '../integer';\nimport {setBase} from '../algorithm/setBase';\n\nexport function changeBase(A: Integer, base: number): Integer {\n  [A.digits, A.precision] = setBase(\n    A.digits, 0, A.precision, A.base, base\n  );\n  A.base = base;\n  return A;\n}\n\nexport function setOne(A: any): Integer {\n  A.precision = 1;\n  A.digits = [1];\n  A.isNegative = false;\n  return A;\n}\n\nexport function setZero(A: any): Integer {\n  A.precision = 0;\n  A.digits = [];\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/intUtils.ts","\n//Assumes shifts >= max - min, shifts > 0\nexport function unsafeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = min + shifts; min < max; A[i++] = A[min++]){\n  }\n}\n\nexport function safeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = max + shifts; max > min; A[--i] = A[--max]){\n  }\n}\n\n//Assumes A and B not same array or sections A and B do not intersect\nexport function copy<T>(to: T[], minTo: number, from: T[], minFrom: number, maxFrom: number): void {\n  while(minFrom < maxFrom){\n    to[minTo++] = from[minFrom++];\n  }\n}\n\n//Sets indices between [min, max) to v\nexport function set<T>(A: T[], min: number, max: number, v: T): void {\n  while(min < max){\n    A[min++] = v;\n  }\n}\n\nexport function printArr(A: any[], min: number, max: number, minSub: number = min, maxSub: number = max): string {\n  function format(A: any[]): any[] {\n    A.forEach((v: any, i: number, A: any[]) => {\n      if(v == null || v !== v){\n        A[i] = v + '';\n      }\n    });\n    return A;\n  }\n  return \"[\" +\n    format(A.slice(min,minSub)).join(', ') +\n    \"|\" + format(A.slice(minSub,maxSub)).join(', ') +\n    \"|\" + format(A.slice(maxSub,max)).join(', ') +\n  \"]\";\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/arrayUtils.ts","import {Integer} from '../integer';\nimport {assign} from './assign';\n\nexport function copy(target: any, source: Integer): Integer {\n  assign(target, source);\n  target.digits = target.digits.slice(0, target.precision);\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/copy.ts","import {decrement} from './decrement';\n\n/*\n  f(A, B) = A - B\n  Assumes\n     A >= B\n  Note\n     Overwrites A\n*/\nexport function subtraction(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n  let a: number = minA;\n  let borrow: number = 0;\n\n  //Subtract common digits\n  while(minB < maxB){\n    let v: number = A[a] - borrow - B[minB++];\n    if(v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[a++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    return decrement(A, a, maxA, base);\n  }\n\n  //Find new length\n  if(a === maxA){\n    while(a-- > minA && A[a] === 0){\n    }\n    maxA = a + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/subtraction.ts","import {increment} from './increment';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A.length >= B.length\n    A and B not same array or non-intersecting segments\n*/\nexport function addition(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number{\n  let carry: number = 0;\n\n  //Add common digits\n  while (minB < maxB){\n    let v: number = A[minA] + B[minB++] + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Return length\n  return (carry > 0) ? increment(A, minA, maxA, base) : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/addition.ts","export const MIN_BASE: number = 2;\nexport const MAX_BASE: number = 94906265; //2^26 < sqrt(Number.MAX_SAFE_INTEGER) < 2^27\nexport const DEFAULT_BASE: number = 94906264;\nexport const MAX_PRECISION: number = 4294967295; //2^32 - 1\nexport const CIPHER: ReadonlyArray<string> = Object.freeze([\n  '0','1','2','3','4','5','6','7','8','9',\n  'A','B','C','D','E','F','G','H','I','J',\n  'K','L','M','N','O','P','Q','R','S','T',\n  'U','V','W','X','Y','Z'\n]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants.ts","import {Integer} from '../integer';\nimport {changeBase} from '../util/intUtils';\nimport {compare as _compare} from '../algorithm/compare';\n\nexport function compare(A: Integer, B: Integer): number {\n\n  //If self\n  if(A === B){\n    return 0;\n  }\n\n  //Check if different signs\n  if(A.isNegative !== B.isNegative){\n    return (A.isNegative) ? -1 : 1;\n  }\n\n  //If not same base\n  if(A.base !== B.base){\n\n    //Estimate number of digits of A if converted to B's base\n    const ratio: number = Math.log(A.base) / Math.log(B.base);\n    if(Math.ceil(A.precision * ratio) > B.base){\n      return 1;\n    }\n    if(Math.ceil((A.precision + 1) * ratio) < B.precision){\n      return -1\n    }\n  }\n\n  //Convert A to B's base\n  const base: number = A.base;\n  changeBase(A, B.base);\n\n  //Compare A and B\n  const out: number = _compare(\n    A.digits, 0, A.precision,\n    B.digits, 0, B.precision\n  );\n\n  //Change A back to original base\n  changeBase(A, base);\n\n  //Return result\n  return out;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/compare.ts","//Assumes valid inputs\n//Assumes numbers are in same base\nexport function compare(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number): number {\n\n  //Compare number of digits\n  const d: number = maxA - minA - maxB + minB;\n  if(d !== 0){\n    return d < 0 ? -1 : 1;\n  }\n\n  //Compare digits\n  while(maxA > minA){\n    if(A[--maxA] !== B[--maxB]){\n      return A[maxA] < B[maxB] ? -1 : 1;\n    }\n  }\n\n  //Numbers are equal\n  return 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/compare.ts","/*\n  f(A) = A - 1\n  Overwrites A\n  Assumes A > 0\n*/\nexport function decrement(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any borrows\n  for(const borrow = base - 1; A[minA] === 0; A[minA++] = borrow){\n  }\n\n  //Subtract one\n  A[minA] = A[minA] - 1;\n\n  //Return length\n  return (minA+1 === maxA && A[minA] === 0) ? maxA - 1 : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/decrement.ts","/*\n  f(A) = A / 2\n  Overwrites A\n  Assumes A > 0\n*/\nexport function halve(A: number[], minA: number, maxA: number, base: number): [number, number] {\n\n  //Halve\n  let remainder: number = 0;\n  for(let i: number = maxA; i-- > minA; A[i] = A[i] >>> 1){\n    A[i] = A[i] + (base & -remainder);\n    remainder = A[i] & 1;\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/halve.ts","/*\n  f(A) = A + 1\n  Overwrites A\n  Assumes A >= 0\n*/\n\nexport function increment(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any carries\n  for(--base; minA < maxA && A[minA] === base; A[minA++] = 0){\n  }\n\n  //Add one\n  if(minA === maxA){\n    A[maxA++] = 1;\n  } else {\n    A[minA] = A[minA] + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/increment.ts","import {addition} from './addition';\nimport {reverseAddition} from './reverseAddition';\nimport {subtraction} from './subtraction';\nimport {min, max} from '../util/numUtils';\nimport {copy, set, unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n  Explanation: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaMultiplication(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n  let halfLen: number = max(maxA - minA, maxB - minB);\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[minA] * B[minB];\n    if(halfLen < base){\n      A[maxA] = 0;\n    } else {\n      A[maxA++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[minA] = halfLen;\n    return maxA;\n  }\n\n  //Split the numbers in half\n  halfLen = (halfLen + 1) >>> 1;\n  const halfA: number = minA + halfLen;\n  const midA: number = min(halfA, maxA);\n  const midB: number = min(minB + halfLen, maxB);\n\n  //mediumB = lowB + highB\n  const mediumB: number[] = new Array(midB - minB + 1);\n  copy(mediumB, 0, B, minB, midB);\n  const mediumMaxB: number = addition(mediumB, 0, midB - minB, B, midB, maxB, base);\n\n  //medium = lowA + highA\n  const medium: number[] = new Array(midA - minA + 1 + mediumMaxB);\n  copy(medium, 0, A, minA, midA);\n  let mediumMax: number = addition(medium, 0, midA - minA, A, midA, maxA, base);\n\n  //medium = medium * mediumB\n  mediumMax = karatsubaMultiplication(medium, 0, mediumMax, mediumB, 0, mediumMaxB, base);\n\n  //Shift highA left\n  A[maxA] = 0;\n  unsafeShiftUp(A, midA, maxA, halfLen);\n\n  //lowA = lowA * lowB\n  const lowMax: number = karatsubaMultiplication(A, minA, midA, B, minB, midB, base);\n\n  //medium = medium - lowA\n  mediumMax = subtraction(medium, 0, mediumMax, A, minA, lowMax, base);\n\n  //A = medium*(base^halfLen) + lowA\n  if(midA === maxA || midB === maxB){\n    if(lowMax <= halfA){\n      maxA = halfA + mediumMax;\n      set(A, lowMax, halfA, 0);\n      copy(A, halfA, medium, 0, mediumMax);\n    } else if(mediumMax > lowMax - halfA){\n      maxA = reverseAddition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    } else {\n      maxA = addition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    }\n    return maxA;\n  }\n\n  //Fill unused space with zero\n  set(A, lowMax, maxA, 0);\n\n  //highA = highA * highB\n  const highMin: number = midA + halfLen;\n  maxA = karatsubaMultiplication(A, highMin, maxA + halfLen, B, midB, maxB, base);\n\n  //medium = medium - highA\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, maxA, base);\n\n  //A = highA*(base^len) + medium*(base^halfLen) + lowA\n  maxA = addition(A, halfA, maxA, medium, 0, mediumMax, base);\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaMultiplication.ts","import {Integer} from '../integer';\n\nexport function assign(target: any, source: Integer): Integer {\n  target.base = source.base;\n  target.digits = source.digits;\n  target.precision = source.precision;\n  target.isNegative = source.isNegative;\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/assign.ts","import {Integer} from '../integer';\n\nexport function negate(A: Integer): Integer {\n  if(A.precision > 0){\n    A.isNegative = !A.isNegative;\n  }\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/negate.ts","import {compare} from './compare';\nimport {singleDigitMultiplication} from './singleDigitMultiplication';\nimport {subtraction} from './subtraction';\nimport {copy, set} from '../util/arrayUtils';\n\n/*\n  f(X, Y) = X / Y\n  Overwrites X\n  Assumes no leading zeros\n  Assumes X.length >= Y.length >= 2\n  See: http://cacr.uwaterloo.ca/hac/about/chap14.pdf\n\n  INPUT: positive integers x = (xn ··· x1x0)b, y = (yt ··· y1y0)b with n ≥ t ≥ 1, yt != 0\n  OUTPUT: the quotient q = (qn−t ··· q1q0)b and remainder r = (rt ··· r1r0)b such that x = qy + r, 0 ≤ r < y\n*/\nexport function basicDivision(X: number[], minX: number, maxX: number, Y: number[], minY: number, maxY: number, base: number): [number[], number[], number, number] {\n\n  //1. Initialize the quotient\n  const lenY: number = maxY - minY;\n  const nMt: number = maxX - minX - lenY;\n  const Q: number[] = new Array(nMt + 1);\n  set(Q, 0, nMt + 1, 0);\n\n  //2. While X ≥ Yb^(n−t)\n  let maxR: number = maxX;\n  while(compare(X, minX + nMt, maxR, Y, minY, maxY) >= 0){\n\n    //Q[n−t] ← Q[n−t] + 1\n    ++Q[nMt];\n\n    //x ← x − Bb^(n−t)\n    maxR = subtraction(X, minX + nMt, maxR, Y, minY, maxY, base);\n  }\n\n  //3. For i from n down to (t + 1)\n  const yt: number = Y[maxY-1];\n  const ytm1: number = Y[maxY-2];\n  const QY: number[] = new Array(lenY + 1);\n  for(let i: number = maxX - 1, iMt: number = nMt; iMt-- > 0; --i){\n\n    //3.1 If x[i] = y[t] then set q[i−t−1] ← b − 1; otherwise set q[i−t−1] ← (x[i]b + x[i−1]) / y[t]\n    //3.2 While q[i−t−1] * (y[t]b + y[t−1]) > x[i]b^2 + x[i−1]b + x[i−2]\n    Q[iMt] = divThreeHalvesByTwo(X[i], X[i-1], X[i-2], yt, ytm1, base);\n\n    //3.3 x ← x − q[i−t−1] * yb^(i−t−1)\n    //3.4 If x < 0 then set x ← x + yb^(i−t−1) and q[i−t−1] ← q[i−t−1] − 1\n    if(Q[iMt] === 0){\n      continue;\n    }\n    copy(QY, 0, Y, minY, maxY);\n    let maxQY: number = singleDigitMultiplication(QY, 0, lenY, Q[iMt], base);\n    if(compare(QY, 0, maxQY, X, minX + iMt, maxR) > 0){\n      --Q[iMt];\n      maxQY = subtraction(QY, 0, maxQY, Y, minY, maxY, base);\n    }\n    maxR = subtraction(X, minX + iMt, maxR, QY, 0, maxQY, base);\n  }\n\n  //4. r ← x\n  //Adjust length of remainder\n  while(maxR > minX && X[maxR - 1] === 0){\n    --maxR;\n  }\n\n  //5. Return(q,r)\n  return [Q, X, (Q[nMt] === 0) ? nMt : nMt + 1, maxR];\n}\n\n/*\n  See: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.565&rep=rep1&type=pdf\n*/\nfunction divThreeHalvesByTwo(a1: number, a2: number, a3: number, b1: number, b2: number, base: number): number {\n  let q: number = a1*base + a2;\n  let r: number = q % b1;\n  q = 0 | (q / b1);\n  r = r*base - q*b2 + a3;\n  if(r < 0){\n    r = r + b1*base + b2;\n    q = (r < 0) ? q - 2 : q - 1;\n  }\n  return q;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/basicDivision.ts","/*\nf(A) = A + A\nOverwrites A\n*/\nexport function double(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Double\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] << 1) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add carry\n  if (carry > 0){\n    A[minA++] = 1;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/double.ts","export function isEven(A: number[], minA: number, maxA: number, base: number): boolean {\n\n  //If zero\n  if(minA === maxA){\n    return true;\n  }\n\n  //If even base\n  if((base & 1) === 0){\n    return (A[minA] & 1) === 0;\n  }\n\n  //If odd base\n  let xor: number = 0;\n  while(minA < maxA){\n    xor = xor ^ A[minA++];\n  }\n  return (xor & 1) === 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/isEven.ts","import {addition} from './addition';\nimport {subtraction} from './subtraction';\nimport {copy, set, unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n  Assumes A > 0\n  See: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaSquare(A: number[], min: number, max: number, base: number): number {\n  let halfLen: number = max - min;\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[min] * A[min];\n    if(halfLen < base){\n      A[max] = 0;\n    } else {\n      A[max++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[min] = halfLen;\n    return max;\n  }\n\n  //Split the number in half\n  halfLen = (halfLen + 1) >>> 1;\n  const mid: number = min + halfLen;\n\n  //medium = low + high\n  const medium: number[] = new Array(2*halfLen + 2);\n  copy(medium, 0, A, min, mid);\n  let mediumMax: number = addition(medium, 0, halfLen, A, mid, max, base);\n\n  //Shift high left\n  A[max] = 0;\n  unsafeShiftUp(A, mid, max, halfLen);\n\n  //low * low\n  const lowMax: number = karatsubaSquare(A, min, mid, base);\n\n  //Fill unused space with zero\n  set(A, lowMax, max, 0);\n\n  //high * high\n  const highMin = mid + halfLen;\n  max = karatsubaSquare(A, highMin, max + halfLen, base);\n\n  //medium = medium * medium - low - high\n  mediumMax = karatsubaSquare(medium, 0, mediumMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, min, lowMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, max, base);\n\n  //A = high*(base^len) + medium*(base ^ halfLen) + low\n  return addition(A, mid, max, medium, 0, mediumMax, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaSquare.ts","import {addition} from './addition';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A < B\n    A and B not overlapping array segments\n*/\nexport function reverseAddition(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number{\n\n  //Add extra digits to A\n  const newMaxB: number = minB - minA + maxA;\n  for(let b: number = newMaxB; b < maxB; A[maxA++] = B[b++]){\n  }\n\n  //Do normal addition\n  return addition(A, minA, maxA, B, minB, newMaxB, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseAddition.ts","/*\n  f(A,B) = A*B\n  Overwrites A\n  Assumes B > 0\n*/\nexport function singleDigitMultiplication(A: number[], minA: number, maxA: number, multiplier: number, base: number): number {\n\n  //Multiply multiplicand by multiplier\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] * multiplier) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 0 | (v / base);\n      v = v % base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add remaining carry\n  if(carry > 0){\n    A[minA++] = carry;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitMultiplication.ts","import {compare} from './compare';\nimport {double} from './double';\nimport {halve} from './halve';\nimport {isEven} from './isEven';\nimport {subtraction} from './subtraction';\n\n/*\nf(A, B) = GCD(A, B)\nOverwrites A, B\nExpects A > 0, B > 0\nSee: https://en.wikipedia.org/wiki/Binary_GCD_algorithm\n*/\nexport function steinGCD(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number, number] {\n\n  //Count and remove common factors of 2\n  let shifts: number = 0;\n  while(isEven(A, minA, maxA, base) && isEven(B, minB, maxB, base)){\n    [maxA] = halve(A, minA, maxA, base);\n    [maxB] = halve(B, minB, maxB, base);\n    ++shifts;\n  }\n\n  //Remove extra factors of 2 in A\n  while(isEven(A, minA, maxA, base)){\n    [maxA] = halve(A, minA, maxA, base);\n  }\n\n  //A will always be odd from now on\n  do {\n\n    //Remove extra factors of 2 in B\n    while(isEven(B, minB, maxB, base)){\n      [maxB] = halve(B, minB, maxB, base);\n    }\n\n    //B is now odd\n    //Compare A and B\n    let c: number = compare(A, minA, maxA, B, minB, maxB);\n\n    //End loop iff B - A === 0\n    if(c === 0){\n      break;\n    }\n\n    //Switch A and B iff A > B\n    if(c > 0){\n      const C: number[] = A;\n      A = B;\n      B = C;\n      c = minA;\n      minA = minB;\n      minB = c;\n      c = maxA;\n      maxA = maxB;\n      maxB = c;\n    }\n\n    //B = B - A\n    maxB = subtraction(B, minB, maxB, A, minA, maxA, base);\n\n    //B is now even since B and A were both odd\n    [maxB] = halve(B, minB, maxB, base);\n  } while (true);\n\n  //Restore common factors of 2 (A = A << shifts)\n  while(shifts-- > 0){\n    maxA = double(A, minA, maxA, base);\n  }\n\n  return [A, minA, maxA];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/steinGCD.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {double} from './double';\nimport {negate} from './negate';\nimport {subtract} from './subtract';\nimport {addition} from '../algorithm/addition';\nimport {reverseAddition} from '../algorithm/reverseAddition';\nimport {changeBase} from '../util/intUtils';\n\nexport function add(A: Integer, B: Integer): Integer {\n\n  //If self\n  if(A === B){\n    return double(A);\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A is zero\n  if(A.precision === 0){\n    copy(A, B);\n    return changeBase(A, base);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, subtract, change sign again\n    negate(A);\n    subtract(A, B);\n    negate(A);\n\n  //If A < B\n} else if(A.precision < B.precision){\n\n    //Make room for addition\n    if(A.digits.length <= B.precision){\n      A.digits.length = B.precision + 1;\n    }\n\n    //Add\n    A.precision = reverseAddition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A >= B\n  } else {\n\n    //Add\n    A.precision = addition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  //Change A back to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/add.ts","import {Integer} from '../integer';\nimport {decrement as _decrement} from '../algorithm/decrement';\nimport {increment} from '../algorithm/increment';\nimport {setOne} from '../util/intUtils';\n\nexport function decrement(A: Integer): Integer {\n\n  //If negative\n  if(A.isNegative){\n    A.precision = increment(A.digits, 0, A.precision, A.base);\n\n  //If zero\n  } else if (A.precision === 0){\n    setOne(A);\n    A.isNegative = true;\n\n  //If positive\n  } else {\n    A.precision = _decrement(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/decrement.ts","import {Integer} from '../integer';\nimport {double as _double} from '../algorithm/double';\n\nexport function double(A: Integer): Integer {\n  A.precision = _double(A.digits, 0, A.precision, A.base);\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/double.ts","import {Integer} from '../integer';\nimport {isEven as _isEven} from '../algorithm/isEven';\n\nexport function isEven(A: Integer): boolean {\n  return _isEven(A.digits, 0, A.precision, A.base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isEven.ts","import {Integer} from '../integer';\n\nexport function isInteger(A: any): A is Integer {\n  return A.hasOwnProperty('base')\n  && A.hasOwnProperty('digits')\n  && A.hasOwnProperty('precision')\n  && A.hasOwnProperty('isNegative');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isInteger.ts","import {MIN_BASE, MAX_BASE} from '../constants';\nimport {Integer} from '../integer';\nimport {changeBase} from '../util/intUtils';\n\nexport function setBase(A: Integer, base: number): Integer {\n\n  //Sanitize base\n  base = 0 | base;\n\n  //Check if already in base\n  if(A.base === base){\n    return A;\n  }\n\n  //If new base too low\n  if(base < MIN_BASE){\n    throw RangeError(base + \" < MIN_BASE (\" + MIN_BASE + \")\");\n  }\n\n  //If new base too high\n  if(base > MAX_BASE){\n    throw RangeError(base + \" > MAX_BASE (\" + MAX_BASE + \")\");\n  }\n\n  //Convert to base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/setBase.ts","import {Integer} from '../integer';\nimport {karatsubaSquare} from '../algorithm/karatsubaSquare';\nimport {longSquare} from '../algorithm/longSquare';\n\nexport function square(A: Integer): Integer {\n\n  //If zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //Make positive\n  A.isNegative = false;\n\n  //Make room for squaring\n  const maxNewLen: number = 2*A.precision;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 500){\n    A.precision = longSquare(A.digits, 0, A.precision, A.base);\n  } else {\n    A.precision = karatsubaSquare(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/square.ts","import {Integer} from '../integer';\nimport {add} from './add';\nimport {compare} from './compare';\nimport {copy} from './copy';\nimport {negate} from './negate';\nimport {reverseSubtraction} from '../algorithm/reverseSubtraction';\nimport {subtraction} from '../algorithm/subtraction';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function subtract(A: Integer, B: Integer): Integer {\n\n  //If subtracting itself\n  if(A === B){\n    return setZero(A);\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A is zero\n  if(A.precision === 0){\n\n    //Copy B\n    copy(A, B);\n    negate(A);\n    return changeBase(A, base);\n  }\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, add, change sign again\n    negate(A);\n    add(A, B);\n    return negate(A);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //Compare A and B\n  const c: number = compare(A, B);\n\n  //If A == B\n  if(c === 0){\n    A.base = base;\n    return setZero(A);\n  }\n\n  //If A < B\n  if(c < 0){\n\n    //Switch sign\n    negate(A);\n    \n    //Make room for subtraction\n    if(A.digits.length < B.precision){\n      A.digits.length = B.precision;\n    }\n\n    //Subtract\n    A.precision = reverseSubtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A > B\n  } else {\n    A.precision = subtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/subtract.ts","export function max(a: number, b: number): number {\n  return (a < b) ? b : a;\n}\n\nexport function min(a: number, b: number): number {\n  return (a > b) ? b : a;\n}\n\nexport function strToDigits(s: String): [number[], boolean] {\n  s = s.trim();\n\n  //Check if empty string\n  if(s.length < 1){\n    throw new TypeError(\"NaN\");\n  }\n\n  //Check for leading sign\n  const isNegative: boolean = s[0] === '-';\n\n  //Trim signs, leading zeros and decimal part\n  s = s.replace(/^[-+]?0*/, '').replace(/\\.[0-9]+$/, '');\n\n  //Check if string is not a number\n  if(s.match(/[^\\d]/)){\n    throw new TypeError(\"NaN\");\n  }\n\n  //If zero\n  const precision: number = s.length;\n  if(precision === 0){\n    return [[], false];\n  }\n\n  //Convert to decimal array\n  const digits: number[] = new Array<number>(precision);\n  for(let i = 0, j = precision; j > 0; ++i){\n    digits[i] = 0 | <any>s[--j];\n  }\n\n  return [digits, isNegative];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/numUtils.ts","import {halve} from './halve';\nimport {karatsubaSquare} from './karatsubaSquare';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\n\n/*\n  f(A, B) = A^B = Math.pow(A, B)\n  Overwrites A\n  Overwrites B\n  Assumes A > 0\n  Assumes B > 0\n*/\nexport function exponentiation(A: number[], minA: number, maxA: number, baseA: number, B: number[], minB: number, maxB: number, baseB: number): number {\n  let maxC: number = 1;\n  const C: number[] = [1];\n\n  //Until power is 1\n  while(minB + 1 < maxB || B[minB] > 1){\n\n    //Divide the power in half\n    let remainder: number;\n    [maxB, remainder] = halve(B, minB, maxB, baseB);\n\n    //If remainder\n    if(remainder > 0){\n      C.length = maxC + maxA;\n      maxC = karatsubaMultiplication(C, 0, maxC, A, minA, maxA, baseA);\n    }\n\n    //Square the base\n    maxA = karatsubaSquare(A, minA, maxA, baseA);\n  }\n\n  if(C.length > 1){\n    maxA = karatsubaMultiplication(A, minA, maxA, C, 0, maxC, baseA);\n  }\n\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/exponentiation.ts","import {basicDivision} from './basicDivision';\nimport {copy} from '../util/arrayUtils';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\nimport {steinGCD} from './steinGCD';\n\n/*\n  f(A, B) = lcm(A, B)\n  Overwrites A\n  Asumes A > 0, B > 0\n  See: https://en.wikipedia.org/wiki/Least_common_multiple\n*/\nexport function lcm(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number] {\n\n  //Copy A\n  let maxC: number = maxA - minA;\n  let C: number[] = new Array(maxC);\n  copy(C, 0, A, minA, maxA);\n\n  //Copy B\n  const maxD: number = maxB - minB;\n  const D: number[] = new Array(maxD);\n  copy(D, 0, B, minB, maxB);\n\n  //Get gcd(A, B)\n  [C,,maxC] = steinGCD(C, 0, maxC, D, 0, maxD, base);\n  [C,,maxC] = basicDivision(A, minA, maxA, C, 0, maxC, base);\n  maxC = karatsubaMultiplication(C, 0, maxC, B, minB, maxB, base);\n  return [C, maxC];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/lcm.ts","import {set} from '../util/arrayUtils';\nimport {safeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A, B) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n\n  Explanation:\n      a  b  c  _  _  _\n    *\n      d  e  f\n    ------------------\n              cd ce cf\n           bd be bf\n        ad ae af\n    ------------------\n      g  h  i  j  k  l\n\n*/\nexport function longMultiplication(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n\n  //Shift A to the left\n  const lenB: number = maxB - minB;\n  const minC: number = minA + lenB;\n  safeShiftUp(A, minA, maxA, lenB);\n  set(A, minA, minC, 0);\n\n  //For each digit in multiplicand\n  const maxC: number = maxA + lenB;\n  for(let a: number = minC; a < maxC; ++a){\n    let carry: number = 0;\n    let i: number = a - lenB;\n\n    //Multiply by multiplier\n    for(let b: number = minB; b < maxB; ++b){\n      let v: number = A[a] * B[b] + A[i] + carry;\n      if(v < base){\n        carry = 0;\n      } else {\n        carry = 0 | (v / base);\n        v = v % base;\n      }\n      A[i++] = v;\n    }\n\n    //Add remaining carry\n    A[i] = carry;\n  }\n\n  //Return new length\n  return (A[maxC - 1] === 0) ? maxC - 1 : maxC;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longMultiplication.ts","import {set} from '../util/arrayUtils';\nimport {unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n\n  Explanation:\n      a   b   c   d   e   f   g   _   _   _   _   _   _   _\n    *\n      a   b   c   d   e   f   g\n    -------------------------------------------------------\n                                 ag  bg  cg  dg  eg  fg  gg\n                             af  bf  cf  df  ef  ff  fg\n                         ae  be  ce  de  ee  ef  eg\n                     ad  bd  cd  dd  de  df  dg\n                 ac  bc  cc  cd  ce  cf  cg\n             ab  bb  bc  bd  be  bf  bg\n         aa  ab  ac  ad  ae  af  ag\n    -------------------------------------------------------\n                                2ag 2bg 2cg 2dg 2eg 2fg  gg\n                            2af 2bf 2cf 2df 2ef  ff\n                        2ae 2be 2ce 2de  ee\n                    2ad 2bd 2cd  dd\n                2ac 2bc  cc\n            2ab  bb\n         aa\n    -------------------------------------------------------\n      h   i   j   k   l   m   n   o   p   q   r   s   t   u\n*/\nexport function longSquare(A: number[], min: number, max: number, base: number): number {\n\n  //Move digits to the left\n  let newMax: number = max - min;\n  unsafeShiftUp(A, min, max, newMax);\n  set(A, min, max, 0);\n\n  //For every digit\n  newMax = newMax + max;\n  for(let d: number = min, s: number = max; d < newMax; d = d + 2){\n    const digit: number = A[s++];\n\n    //Square the digit\n    let carry: number = 0;\n    A[d] = A[d] + digit * digit;\n    if(A[d] >= base){\n      carry = 0 | (A[d] / base);\n      A[d] = A[d] % base;\n    }\n\n    //Multiply by higher digits twice\n    let o: number = d + 1;\n    for(let m: number = s; m < newMax; ++o){\n\n      //Multiply\n      let quotient: number = 0;\n      let product: number = A[m++] * digit;\n      if(product >= base){\n        quotient = 0 | (product / base);\n        product = product % base;\n      }\n\n      //Double\n      quotient = quotient << 1;\n      product = product << 1;\n\n      //Add\n      A[o] = A[o] + product + carry;\n      carry = quotient;\n      if(A[o] >= base){\n        carry = carry + (0 | (A[o] / base));\n        A[o] = A[o] % base;\n      }\n    }\n\n    //Place remaining carry\n    A[o] = carry;\n  }\n\n  //Return new length\n  return A[newMax - 1] === 0 ? newMax - 1 : newMax;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longSquare.ts","/*\n  f(A, B) = A - B\n  Overwrites A\n  Assumes B > A\n*/\nexport function reverseSubtraction(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n\n  //Subtract common digits\n  let borrow: number = 0;\n  while(minA < maxA){\n    let v: number = B[minB++] - borrow - A[minA];\n    if (v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[minA++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    for(borrow = base - 1; B[minB] === 0; ++minB){\n      A[minA++] = borrow;\n    }\n    A[minA++] = B[minB++] - 1;\n  }\n\n  //Copy extra digits\n  if(minB < maxB){\n    do {\n      A[minA++] = B[minB++];\n    } while (minB < maxB);\n\n  //Check for new length\n  } else {\n    while(A[minA-1] === 0){\n      --minA;\n    }\n  }\n\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseSubtraction.ts","//Assumes valid inputs\nexport function setBase(A: number[], minA: number, maxA: number, curBase: number, newBase: number): [number[], number] {\n\n  //If zero or same base\n  if(maxA === minA || curBase === newBase){\n    return [A, maxA];\n  }\n\n  //Create new array\n  let maxB: number = 0;\n  const B: number[] = new Array(Math.ceil(\n    (maxA - minA) * Math.log(curBase) / Math.log(newBase)\n  ));\n\n  //Return number in newBase\n  do {\n    let remainder: number = 0;\n    for(let i: number = maxA; i > minA; remainder = remainder % newBase){\n      remainder = remainder*curBase + A[--i];\n      A[i] = 0 | (remainder / newBase);\n    }\n    B[maxB++] = remainder;\n    while(A[maxA - 1] === 0){\n      if(--maxA === minA){\n        return [B, maxB];\n      }\n    }\n  } while(true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/setBase.ts","/*\n  f(A, B) = A / B\n  Overwrites A\n  Assumes B > 0\n  Assumes A > 0\n  Assumes no leading zeros\n*/\nexport function singleDigitDivision(A: number[], minA: number, maxA: number, B: number, base: number): [number, number] {\n  let remainder: number = 0;\n  for(let a: number = maxA; a-- > minA; remainder = remainder % B){\n    remainder = remainder * base + A[a];\n    A[a] = 0 | (remainder / B);\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitDivision.ts","import {Integer} from '../integer';\n\nexport function abs(A: Integer): Integer {\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/abs.ts","import {Integer} from '../integer';\nimport {assign} from './assign';\nimport {basicDivision} from '../algorithm/basicDivision';\nimport {singleDigitDivision} from '../algorithm/singleDigitDivision';\nimport {changeBase, setOne, setZero} from '../util/intUtils';\n\nexport function divideAndRemainder(A: Integer, B: Integer): [Integer, Integer] {\n\n  //If A / 0\n  if(B.precision === 0){\n    throw new EvalError(\"Divide by zero\");\n  }\n\n  //If self\n  if(A === B){\n    return [setOne(A), setZero({base: A.base})];\n  }\n\n  //If 0 / B\n  if(A.precision === 0){\n    return [A, setZero({base: A.base})];\n  }\n\n  //Divide signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //If B = 1\n  if(B.precision === 1 && B.digits[0] === 1){\n    return [A, setZero({base: A.base})];\n  }\n\n  //If A = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    return [setZero(A), setOne({base: A.base})];\n  }\n\n  //If different bases\n  const base: number = A.base;\n  if(base !== B.base){\n\n    //If A's length < the least possible length of B if converted to A's base\n    const ratio: number = Math.log(B.base) / Math.log(base);\n    if(A.precision < Math.ceil(B.precision * ratio)){\n      const remainder: Integer = assign({}, A);\n      return [setZero(A), remainder];\n    }\n\n    //Normalize bases\n    changeBase(A, B.base);\n  }\n\n  //If A's length < B's length\n  if(A.precision < B.precision){\n    changeBase(A, base);\n    const remainder: Integer = assign({}, A);\n    return [setZero(A), remainder];\n  }\n\n  //Choose best algorithm\n  let R: Integer = setOne({base: A.base});\n  if(B.precision < 2){\n    let r: number;\n    [A.precision, R.digits[0]] = singleDigitDivision(\n      A.digits, 0, A.precision, B.digits[0], A.base\n    );\n    if(r === 0){\n      setZero(R);\n    }\n  } else {\n    [\n      A.digits, R.digits, A.precision, R.precision\n    ] = basicDivision(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Return A and R\n  changeBase(A, base);\n  changeBase(R, base);\n  return [A, R];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/divideAndRemainder.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {steinGCD} from '../algorithm/steinGCD';\nimport {changeBase} from '../util/intUtils';\n\nexport function gcd(A: Integer, B: Integer): Integer {\n\n  //Make A positive\n  A.isNegative = false;\n\n  //If GCD of self or B = 0\n  if(A === B || B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A = 0\n  if(A.precision === 0){\n    copy(A, B);\n    A.isNegative = false;\n\n  //If |A| > 0 && |B| > 0\n  } else {\n\n    //Normalize the bases\n    changeBase(A, B.base);\n\n    //Calculate GCD\n    [A.digits,,A.precision] = steinGCD(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Return A to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/gcd.ts","import {Integer} from '../integer';\nimport {decrement} from './decrement';\nimport {halve as _halve} from '../algorithm/halve';\nimport {setZero, setOne} from '../util/intUtils';\n\nexport function halve(A: Integer): [Integer, Integer] {\n  const remainder: Integer = <Integer>{base: A.base};\n\n  //If zero\n  if(A.precision === 0){\n    return [A, setZero(remainder)];\n  }\n\n  //Halve\n  [A.precision, remainder.precision] = _halve(A.digits, 0, A.precision, A.base);\n\n  //If no remainder\n  if(remainder.precision === 0){\n    return [A, setZero(remainder)];\n  }\n\n  //If remainder and A is negative\n  if(A.isNegative){\n\n    //Round down (e.g. Math.floor(-49.5) = -50)\n    decrement(A);\n  }\n\n  return [A, setOne(remainder)];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/halve.ts","import {Integer} from '../integer';\nimport {decrement} from '../algorithm/decrement';\nimport {increment as _increment} from '../algorithm/increment';\n\n\nexport function increment(A: Integer): Integer {\n\n  //If negative\n  if(A.isNegative){\n    A.precision = decrement(A.digits, 0, A.precision, A.base);\n\n    //If now zero\n    if(A.precision === 0){\n      A.isNegative = false;\n    }\n\n  //If positive\n  } else {\n    A.precision = _increment(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/increment.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {lcm as _lcm} from '../algorithm/lcm';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function lcm(A: Integer, B: Integer): Integer {\n\n  //Make A positive\n  A.isNegative = false;\n\n  //If LCM of self or A = 0 or B = 1\n  if(A === B || A.precision === 0 || (B.precision === 1 && B.digits[0] === 1)){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  const base: number = A.base;\n\n  //If A = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    copy(A, B);\n    A.isNegative = false;\n\n  //If A > 1 and B > 1\n  } else {\n\n    //Normalize bases\n    changeBase(A, B.base);\n\n    //Calculate LCM\n    [A.digits, A.precision] = _lcm(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Change A to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/lcm.ts","import {Integer} from '../integer';\nimport {compare} from './compare';\n\nexport function max(A: Integer, B: Integer): Integer {\n  return (compare(A, B) < 0) ? B : A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/max.ts","import {Integer} from '../integer';\nimport {compare} from './compare';\n\nexport function min(A: Integer, B: Integer): Integer {\n  return (compare(A, B) > 0) ? B : A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/min.ts","import {Integer} from '../integer';\nimport {square} from './square';\nimport {karatsubaMultiplication} from '../algorithm/karatsubaMultiplication';\nimport {longMultiplication} from '../algorithm/longMultiplication';\nimport {singleDigitMultiplication} from '../algorithm/singleDigitMultiplication';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function multiply(A: Integer, B: Integer): Integer {\n\n  //If self\n  if(A === B){\n    return square(A);\n  }\n\n  //If A is zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  //Multiply signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //Normalize to B's base\n  const base: number = A.base;\n  changeBase(A, B.base);\n\n  //If B is single digit\n  if(B.precision === 1){\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, A.precision, B.digits[0], A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //If A is single digit\n  if(A.precision === 1){\n    const multiplicand: number = A.digits[0];\n    A.digits = B.digits.slice(0);\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, B.precision, multiplicand, A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //Make room for multiplication\n  const maxNewLen: number = A.precision + B.precision;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 100 && B.precision < 100){\n    A.precision = longMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  } else {\n    A.precision = karatsubaMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/multiply.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {isEven} from './isEven';\nimport {exponentiation} from '../algorithm/exponentiation';\nimport {setOne, setZero} from '../util/intUtils';\n\nexport function pow(A: Integer, B: Integer): Integer {\n\n  //A^0 = 1\n  if(B.precision === 0){\n    return setOne(A);\n  }\n\n  //If negative power\n  if(B.isNegative){\n\n    //If 1 / 0\n    if(A.precision === 0){\n      throw new EvalError(\"Divide by zero\");\n    }\n\n    return setZero(A);\n  }\n\n  //0^B = zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If negative base and even power\n  if(A.isNegative && isEven(B)){\n    A.isNegative = false;\n  }\n\n  //1^B = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    return A;\n  }\n\n  //Copy B\n  B = copy({}, B);\n\n  //Make room for exponentiation\n  /*const minNewLen: number = Math.floor(\n    (A.precision-1) * (\n      (B.precision) * Math.log2(B.base) + Math.log2(B.digits[B.precision-1]\n    ))\n  );\n  console.log(\"PREDICTED LENGTH: \", minNewLen);\n  if(A.digits.length < minNewLen){\n    A.digits.length = minNewLen;\n  }\n  */\n\n  //A = A^B\n  A.precision = exponentiation(\n    A.digits, 0, A.precision, A.base, B.digits, 0, B.precision, B.base\n  );\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/pow.ts","import {Integer} from '../integer';\n\nexport function signum(A: Integer): number {\n  return A.isNegative ? -1 : A.precision === 0 ? 0 : 1;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/signum.ts","import {DEFAULT_BASE} from '../constants';\nimport {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {isInteger} from './isInteger';\nimport {setZero} from '../util/intUtils';\nimport {strToDigits} from '../util/numUtils';\n\nexport function toInteger(A: Integer | number | string, base: number = DEFAULT_BASE): Integer {\n\n  //If already an integer\n  if(isInteger(A)){\n    return A;\n  }\n\n  //Convert numbers to string\n  if(typeof A === \"number\"){\n    A = '' + A;\n\n  //If not an expected type\n  } else if(typeof A !== \"string\"){\n    throw TypeError(\"Expecting type Integer | string | number\");\n  }\n\n  //Convert string to base 10\n  const B: Integer = setZero({base: 10});\n  [B.digits, B.isNegative] = strToDigits(A);\n  B.precision = B.digits.length;\n\n  //Convert to chosen base\n  setBase(B, base);\n\n  return B;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toInteger.ts","import {CIPHER} from '../constants';\nimport {Integer} from '../integer';\n\n//Assumes input cipher is adequate for base\nexport function toString(A: Integer, sep: string = null, cipher: ReadonlyArray<string> = null): string {\n\n  //If negative\n  const sign: string = A.isNegative ? \"-\" : \"\";\n\n  //If no custom cipher\n  if(cipher == null){\n\n    //If default cipher too small for base\n    if(CIPHER.length < A.base){\n\n      //Print without cipher\n      sep = (sep == null) ? \":\": sep;\n      return sign + A.digits.slice(0).reverse().join(sep);\n    }\n\n    //Use default cipher\n    cipher = CIPHER;\n  }\n\n  //Print with cipher\n  sep = (sep == null) ? \"\" : sep;\n  return sign + A.digits.map(v => cipher[v]).reverse().join(sep);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toString.ts","import * as Constants from '../constants';\nimport {Integer} from '../integer';\nimport {abs} from '../functional/abs';\nimport {add} from '../functional/add';\nimport {assign} from '../functional/assign';\nimport {compare} from '../functional/compare';\nimport {copy} from '../functional/copy';\nimport {decrement} from '../functional/decrement';\nimport {divideAndRemainder} from '../functional/divideAndRemainder';\nimport {double} from '../functional/double';\nimport {gcd} from '../functional/gcd';\nimport {halve} from '../functional/halve';\nimport {increment} from '../functional/increment';\nimport {isEven} from '../functional/isEven';\nimport {isInteger} from '../functional/isInteger';\nimport {lcm} from '../functional/lcm';\nimport {max} from '../functional/max';\nimport {min} from '../functional/min';\nimport {multiply} from '../functional/multiply';\nimport {negate} from '../functional/negate';\nimport {pow} from '../functional/pow';\nimport {signum} from '../functional/signum';\nimport {setBase} from '../functional/setBase';\nimport {subtract} from '../functional/subtract';\nimport {square} from '../functional/square';\nimport {toInteger} from '../functional/toInteger';\nimport {toString} from '../functional/toString';\n\nexport class BigInt {\n\n  public static readonly MIN_BASE: number = Constants.MIN_BASE;\n  public static readonly MAX_BASE: number = Constants.MAX_BASE;\n  public static readonly DEFAULT_BASE: number = Constants.DEFAULT_BASE;\n  public static readonly MAX_PRECISION: number = Constants.MAX_PRECISION;\n\n  public static get MINUS_ONE(): BigInt {return new BigInt(-1)};\n  public static get ZERO(): BigInt {return new BigInt(0)};\n  public static get ONE(): BigInt {return new BigInt(1)};\n\n  public base: number;\n  public digits: number[];\n  public precision: number;\n  public isNegative: boolean;\n\n  constructor(input: Integer | number | string) {\n    if(isInteger(input)){\n      this.copy(input);\n    } else {\n      assign(this, toInteger(input, BigInt.DEFAULT_BASE));\n    }\n    this.digits.length = this.precision;\n  }\n\n  public abs(): BigInt {\n    abs(this);\n    return this;\n  };\n\n  public add(addend: Integer): BigInt {\n    add(this, addend);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public clone(): BigInt {\n    return new BigInt(this);\n  }\n\n  public compareTo(B: Integer): number {\n    return compare(this, B);\n  }\n\n  public copy(source: Integer): BigInt {\n    copy(this, source);\n    return this;\n  }\n\n  public divide(divisor: Integer): BigInt {\n    this.divideAndRemainder(divisor);\n    return this;\n  }\n\n  public divideAndRemainder(divisor: Integer): [BigInt, BigInt] {\n    let Q: Integer;\n    let R: Integer;\n    [Q, R] = divideAndRemainder(this, divisor);\n    Q.digits.length = Q.precision;\n    R.digits.length = R.precision;\n    return [<BigInt>assign(this, Q), <BigInt>assign(BigInt.ZERO, R)];\n  }\n\n  public double(): BigInt {\n    double(this);\n    return this;\n  }\n\n  public gcd(B: Integer): BigInt {\n    gcd(this, B);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public getBase(): number {\n    return this.base;\n  }\n\n  public half(): [BigInt, BigInt] {\n    let remainder: Integer;\n    [,remainder] = halve(this);\n    this.digits.length = this.precision;\n    return [this, (remainder.precision === 0) ? BigInt.ZERO : BigInt.ONE];\n  }\n\n  public static isBigInt(n: any): n is BigInt {\n    return n instanceof BigInt;\n  }\n\n  public isEven(): boolean {\n    return isEven(this);\n  }\n\n  public isOdd(): boolean {\n    return !this.isEven();\n  }\n\n  //See: https://en.wikipedia.org/wiki/Least_common_multiple\n  public lcm(B: Integer): BigInt {\n    lcm(this, B);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public static max(A: Integer, B: Integer): BigInt {\n    return BigInt.toBigInt(max(A, B));\n  }\n\n  public static min(A: Integer, B: Integer): BigInt {\n    return BigInt.toBigInt(min(A, B));\n  }\n\n  public minusminus(): BigInt {\n    decrement(this);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public multiply(multiplier: Integer): BigInt {\n    multiply(this, multiplier);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public negate(): BigInt {\n    negate(this);\n    return this;\n  };\n\n  public plusplus(): BigInt {\n    increment(this);\n    return this;\n  }\n\n  public pow(power: Integer): BigInt {\n    pow(this, power);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public remainder(divisor: Integer): BigInt {\n    assign(this, this.divideAndRemainder(divisor)[1]);\n    return this;\n  }\n\n  public setBase(base: number): BigInt {\n    setBase(this, base);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public signum(): number {\n    return signum(this);\n  };\n\n  public square(): BigInt {\n    square(this);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public subtract(subtrahend: Integer): BigInt {\n    subtract(this, subtrahend);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public static toBigInt(input: Integer | number | string): BigInt {\n    return BigInt.isBigInt(input) ? input : new BigInt(input);\n  }\n\n  public toString(sep: string = null, cipher: ReadonlyArray<string> = null): string {\n    return toString(this, sep, cipher);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/oop/bigInt.ts"],"sourceRoot":""}