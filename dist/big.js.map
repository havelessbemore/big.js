{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///big.js","webpack:///webpack/bootstrap c83055977cb80ce8cf1f","webpack:///./src/index.ts","webpack:///./src/oop/bigInt.ts","webpack:///./src/constants.ts","webpack:///./src/functional/abs.ts","webpack:///./src/functional/add.ts","webpack:///./src/functional/copy.ts","webpack:///./src/functional/assign.ts","webpack:///./src/functional/double.ts","webpack:///./src/algorithm/double.ts","webpack:///./src/functional/negate.ts","webpack:///./src/functional/subtract.ts","webpack:///./src/functional/compare.ts","webpack:///./src/util/intUtils.ts","webpack:///./src/algorithm/setBase.ts","webpack:///./src/algorithm/compare.ts","webpack:///./src/algorithm/reverseSubtraction.ts","webpack:///./src/algorithm/subtraction.ts","webpack:///./src/algorithm/decrement.ts","webpack:///./src/algorithm/addition.ts","webpack:///./src/algorithm/increment.ts","webpack:///./src/algorithm/reverseAddition.ts","webpack:///./src/functional/decrement.ts","webpack:///./src/functional/divideAndRemainder.ts","webpack:///./src/algorithm/basicDivision.ts","webpack:///./src/algorithm/singleDigitMultiplication.ts","webpack:///./src/util/arrayUtils.ts","webpack:///./src/algorithm/singleDigitDivision.ts","webpack:///./src/functional/gcd.ts","webpack:///./src/algorithm/steinGCD.ts","webpack:///./src/algorithm/halve.ts","webpack:///./src/algorithm/isEven.ts","webpack:///./src/functional/halve.ts","webpack:///./src/functional/increment.ts","webpack:///./src/functional/isEven.ts","webpack:///./src/functional/isInteger.ts","webpack:///./src/functional/lcm.ts","webpack:///./src/algorithm/lcm.ts","webpack:///./src/algorithm/karatsubaMultiplication.ts","webpack:///./src/util/numUtils.ts","webpack:///./src/functional/max.ts","webpack:///./src/functional/min.ts","webpack:///./src/functional/multiply.ts","webpack:///./src/functional/square.ts","webpack:///./src/algorithm/karatsubaSquare.ts","webpack:///./src/algorithm/longSquare.ts","webpack:///./src/algorithm/longMultiplication.ts","webpack:///./src/functional/pow.ts","webpack:///./src/algorithm/exponentiation.ts","webpack:///./src/functional/signum.ts","webpack:///./src/functional/setBase.ts","webpack:///./src/functional/toInteger.ts","webpack:///./src/functional/toString.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","bigInt_1","Int","BigInt","Constants","abs_1","add_1","assign_1","compare_1","copy_1","decrement_1","divideAndRemainder_1","double_1","gcd_1","halve_1","increment_1","isEven_1","isInteger_1","lcm_1","max_1","min_1","multiply_1","negate_1","pow_1","signum_1","setBase_1","subtract_1","square_1","toInteger_1","toString_1","a","b","isInteger","copy","assign","toInteger","DEFAULT_BASE","digits","length","precision","Object","defineProperty","get","enumerable","configurable","prototype","abs","add","clone","compareTo","compare","divide","divideAndRemainder","d","e","ZERO","double","gcd","getBase","base","half","halve","ONE","isBigInt","isEven","isOdd","lcm","max","toBigInt","min","minusminus","decrement","multiply","negate","plusplus","increment","pow","remainder","setBase","signum","square","subtract","toString","MIN_BASE","MAX_BASE","MAX_PRECISION","CIPHER","freeze","isNegative","intUtils_1","changeBase","reverseAddition_1","reverseAddition","addition_1","addition","slice","f","setZero","reverseSubtraction_1","reverseSubtraction","subtraction_1","subtraction","Math","log","ceil","setOne","g","Array","h","j","i","k","EvalError","singleDigitDivision_1","singleDigitDivision","basicDivision_1","basicDivision","arrayUtils_1","set","l","n","o","s","divThreeHalvesByTwo","t","singleDigitMultiplication_1","singleDigitMultiplication","unsafeShiftUp","safeShiftUp","printArr","forEach","join","steinGCD_1","steinGCD","hasOwnProperty","karatsubaMultiplication_1","karatsubaMultiplication","numUtils_1","q","strToDigits","trim","TypeError","replace","match","longMultiplication_1","longMultiplication","longSquare_1","longSquare","karatsubaSquare_1","karatsubaSquare","arrayUtils_2","r","exponentiation_1","exponentiation","constants_1","RangeError","reverse","map"],"mappings":"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","file":"big.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var bigInt_1=__webpack_require__(1);exports.Int=bigInt_1.BigInt;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var Constants=__webpack_require__(2),abs_1=__webpack_require__(3),add_1=__webpack_require__(4),assign_1=__webpack_require__(6),compare_1=__webpack_require__(11),copy_1=__webpack_require__(5),decrement_1=__webpack_require__(21),divideAndRemainder_1=__webpack_require__(22),double_1=__webpack_require__(7),gcd_1=__webpack_require__(27),halve_1=__webpack_require__(31),increment_1=__webpack_require__(32),isEven_1=__webpack_require__(33),isInteger_1=__webpack_require__(34),lcm_1=__webpack_require__(35),max_1=__webpack_require__(39),min_1=__webpack_require__(40),multiply_1=__webpack_require__(41),negate_1=__webpack_require__(9),pow_1=__webpack_require__(46),signum_1=__webpack_require__(48),setBase_1=__webpack_require__(49),subtract_1=__webpack_require__(10),square_1=__webpack_require__(42),toInteger_1=__webpack_require__(50),toString_1=__webpack_require__(51),BigInt=function(){function a(b){isInteger_1.isInteger(b)?this.copy(b):assign_1.assign(this,toInteger_1.toInteger(b,a.DEFAULT_BASE)),this.digits.length=this.precision}return Object.defineProperty(a,\"MINUS_ONE\",{get:function get(){return new a(-1)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ZERO\",{get:function get(){return new a(0)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ONE\",{get:function get(){return new a(1)},enumerable:!0,configurable:!0}),a.prototype.abs=function(){return abs_1.abs(this),this},a.prototype.add=function(b){return add_1.add(this,b),this.digits.length=this.precision,this},a.prototype.clone=function(){return new a(this)},a.prototype.compareTo=function(b){return compare_1.compare(this,b)},a.prototype.copy=function(b){return copy_1.copy(this,b),this},a.prototype.divide=function(b){return this.divideAndRemainder(b),this},a.prototype.divideAndRemainder=function(b){var c,d;return e=divideAndRemainder_1.divideAndRemainder(this,b),c=e[0],d=e[1],c.digits.length=c.precision,d.digits.length=d.precision,[assign_1.assign(this,c),assign_1.assign(a.ZERO,d)];var e},a.prototype.double=function(){return double_1.double(this),this},a.prototype.gcd=function(b){return gcd_1.gcd(this,b),this.digits.length=this.precision,this},a.prototype.getBase=function(){return this.base},a.prototype.half=function(){var b;return c=halve_1.halve(this),b=c[1],this.digits.length=this.precision,[this,0===b.precision?a.ZERO:a.ONE];var c},a.isBigInt=function(b){return b instanceof a},a.prototype.isEven=function(){return isEven_1.isEven(this)},a.prototype.isOdd=function(){return!this.isEven()},a.prototype.lcm=function(b){return lcm_1.lcm(this,b),this.digits.length=this.precision,this},a.max=function(b,c){return a.toBigInt(max_1.max(b,c))},a.min=function(b,c){return a.toBigInt(min_1.min(b,c))},a.prototype.minusminus=function(){return decrement_1.decrement(this),this.digits.length=this.precision,this},a.prototype.multiply=function(b){return multiply_1.multiply(this,b),this.digits.length=this.precision,this},a.prototype.negate=function(){return negate_1.negate(this),this},a.prototype.plusplus=function(){return increment_1.increment(this),this},a.prototype.pow=function(b){return pow_1.pow(this,b),this.digits.length=this.precision,this},a.prototype.remainder=function(b){return assign_1.assign(this,this.divideAndRemainder(b)[1]),this},a.prototype.setBase=function(b){return setBase_1.setBase(this,b),this.digits.length=this.precision,this},a.prototype.signum=function(){return signum_1.signum(this)},(a.prototype.square=function(){return square_1.square(this),this.digits.length=this.precision,this},a.prototype.subtract=function(b){return subtract_1.subtract(this,b),this.digits.length=this.precision,this},a.toBigInt=function(b){return a.isBigInt(b)?b:new a(b)},a.prototype.toString=function(b,c){return void 0===b&&(b=null),void 0===c&&(c=null),toString_1.toString(this,b,c)},a)}();BigInt.MIN_BASE=Constants.MIN_BASE,BigInt.MAX_BASE=Constants.MAX_BASE,BigInt.DEFAULT_BASE=Constants.DEFAULT_BASE,BigInt.MAX_PRECISION=Constants.MAX_PRECISION,exports.BigInt=BigInt;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';exports.MIN_BASE=2,exports.MAX_BASE=94906265,exports.DEFAULT_BASE=94906264,exports.MAX_PRECISION=4294967295,exports.CIPHER=Object.freeze(['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']);\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function abs(a){return a.isNegative=!1,a}exports.abs=abs;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(5),double_1=__webpack_require__(7),negate_1=__webpack_require__(9),subtract_1=__webpack_require__(10),addition_1=__webpack_require__(18),reverseAddition_1=__webpack_require__(20),intUtils_1=__webpack_require__(12);function add(a,b){if(a===b)return double_1.double(a);if(0===b.precision)return a;var c=a.base;return 0===a.precision?(copy_1.copy(a,b),intUtils_1.changeBase(a,c)):(intUtils_1.changeBase(a,b.base),a.isNegative===b.isNegative?a.precision<b.precision?(a.digits.length<=b.precision&&(a.digits.length=b.precision+1),a.precision=reverseAddition_1.reverseAddition(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=addition_1.addition(a.digits,0,a.precision,b.digits,0,b.precision,a.base):(negate_1.negate(a),subtract_1.subtract(a,b),negate_1.negate(a)),intUtils_1.changeBase(a,c))}exports.add=add;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var assign_1=__webpack_require__(6);function copy(a,b){return assign_1.assign(a,b),a.digits=a.digits.slice(0,a.precision),a}exports.copy=copy;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function assign(a,b){return a.base=b.base,a.digits=b.digits,a.precision=b.precision,a.isNegative=b.isNegative,a}exports.assign=assign;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var double_1=__webpack_require__(8);function double(a){return a.precision=double_1.double(a.digits,0,a.precision,a.base),a}exports.double=double;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function double(a,b,c,d){for(var e=0;b<c;){var f=(a[b]<<1)+e;f<d?e=0:(e=1,f-=d),a[b++]=f}return 0<e&&(a[b++]=1),b}exports.double=double;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function negate(a){return 0<a.precision&&(a.isNegative=!a.isNegative),a}exports.negate=negate;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var add_1=__webpack_require__(4),compare_1=__webpack_require__(11),copy_1=__webpack_require__(5),negate_1=__webpack_require__(9),reverseSubtraction_1=__webpack_require__(15),subtraction_1=__webpack_require__(16),intUtils_1=__webpack_require__(12);function subtract(a,b){if(a===b)return intUtils_1.setZero(a);if(0===b.precision)return a;var d=a.base;if(0===a.precision)return copy_1.copy(a,b),negate_1.negate(a),intUtils_1.changeBase(a,d);if(a.isNegative!==b.isNegative)return negate_1.negate(a),add_1.add(a,b),negate_1.negate(a);intUtils_1.changeBase(a,b.base);var e=compare_1.compare(a,b);return 0===e?(a.base=d,intUtils_1.setZero(a)):(0>e?(negate_1.negate(a),a.digits.length<b.precision&&(a.digits.length=b.precision),a.precision=reverseSubtraction_1.reverseSubtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=subtraction_1.subtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,d))}exports.subtract=subtract;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var intUtils_1=__webpack_require__(12),compare_1=__webpack_require__(14);function compare(a,b){if(a===b)return 0;if(a.isNegative!==b.isNegative)return a.isNegative?-1:1;if(a.base!==b.base){var c=Math.log(a.base)/Math.log(b.base);if(Math.ceil(a.precision*c)>b.base)return 1;if(Math.ceil((a.precision+1)*c)<b.precision)return-1}var d=a.base;intUtils_1.changeBase(a,b.base);var e=compare_1.compare(a.digits,0,a.precision,b.digits,0,b.precision);return intUtils_1.changeBase(a,d),e}exports.compare=compare;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var setBase_1=__webpack_require__(13);function changeBase(a,b){return c=setBase_1.setBase(a.digits,0,a.precision,a.base,b),a.digits=c[0],a.precision=c[1],a.base=b,a;var c}exports.changeBase=changeBase;function setOne(a){return a.precision=1,a.digits=[1],a.isNegative=!1,a}exports.setOne=setOne;function setZero(a){return a.precision=0,a.digits=[],a.isNegative=!1,a}exports.setZero=setZero;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function setBase(a,b,c,d,e){if(c===b||d===e)return[a,c];var f=0,g=Array(Math.ceil((c-b)*Math.log(d)/Math.log(e)));do{var h=0;for(var j=c;j>b;h%=e)h=h*d+a[--j],a[j]=0|h/e;for(g[f++]=h;0===a[c-1];)if(--c===b)return[g,f]}while(!0)}exports.setBase=setBase;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function compare(a,b,c,e,f,g){var h=c-b-g+f;if(0!==h)return 0>h?-1:1;for(;c>b;)if(a[--c]!==e[--g])return a[c]<e[g]?-1:1;return 0}exports.compare=compare;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function reverseSubtraction(a,b,c,d,e,f,g){for(var h=0;b<c;){var i=d[e++]-h-a[b];0>i?(h=1,i+=g):h=0,a[b++]=i}if(0<h){for(h=g-1;0===d[e];++e)a[b++]=h;a[b++]=d[e++]-1}if(e<f)do a[b++]=d[e++];while(e<f);else for(;0===a[b-1];)--b;return b}exports.reverseSubtraction=reverseSubtraction;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(17);function subtraction(b,c,d,e,f,g,h){for(var i=c,j=0;f<g;){var k=b[i]-j-e[f++];0>k?(j=1,k+=h):j=0,b[i++]=k}if(0<j)return decrement_1.decrement(b,i,d,h);if(i===d){for(;i-->c&&0===b[i];);d=i+1}return d}exports.subtraction=subtraction;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function decrement(a,b,c,d){for(;0===a[b];a[b++]=d-1);return--a[b],b+1===c&&0===a[b]?c-1:c}exports.decrement=decrement;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var increment_1=__webpack_require__(19);function addition(a,b,c,d,e,f,g){for(var h=0;e<f;){var i=a[b]+d[e++]+h;i<g?h=0:(h=1,i-=g),a[b++]=i}return 0<h?increment_1.increment(a,b,c,g):c}exports.addition=addition;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function increment(a,b,c,d){for(--d;b<c&&a[b]===d;a[b++]=0);return b===c?a[c++]=1:++a[b],c}exports.increment=increment;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(18);function reverseAddition(a,c,d,e,f,g,h){var i=f-c+d;for(var j=i;j<g;a[d++]=e[j++]);return addition_1.addition(a,c,d,e,f,i,h)}exports.reverseAddition=reverseAddition;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(17),increment_1=__webpack_require__(19),intUtils_1=__webpack_require__(12);function decrement(a){return a.isNegative?a.precision=increment_1.increment(a.digits,0,a.precision,a.base):0===a.precision?(intUtils_1.setOne(a),a.isNegative=!0):a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),a}exports.decrement=decrement;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var assign_1=__webpack_require__(6),basicDivision_1=__webpack_require__(23),singleDigitDivision_1=__webpack_require__(26),intUtils_1=__webpack_require__(12);function divideAndRemainder(a,b){if(0===b.precision)throw new EvalError(\"Divide by zero\");if(a===b)return[intUtils_1.setOne(a),intUtils_1.setZero({base:a.base})];if(0===a.precision)return[a,intUtils_1.setZero({base:a.base})];if(a.isNegative=a.isNegative!==b.isNegative,1===b.precision&&1===b.digits[0])return[a,intUtils_1.setZero({base:a.base})];if(1===a.precision&&1===a.digits[0])return[intUtils_1.setZero(a),intUtils_1.setOne({base:a.base})];var c=a.base;if(c!==b.base){var d=Math.log(b.base)/Math.log(c);if(a.precision<Math.ceil(b.precision*d)){var e=assign_1.assign({},a);return[intUtils_1.setZero(a),e]}intUtils_1.changeBase(a,b.base)}if(a.precision<b.precision){intUtils_1.changeBase(a,c);var e=assign_1.assign({},a);return[intUtils_1.setZero(a),e]}var f=intUtils_1.setOne({base:a.base});return 2>b.precision?(g=singleDigitDivision_1.singleDigitDivision(a.digits,0,a.precision,b.digits[0],a.base),a.precision=g[0],f.digits[0]=g[1]):(h=basicDivision_1.basicDivision(a.digits,0,a.precision,b.digits,0,b.precision,a.base),a.digits=h[0],f.digits=h[1],a.precision=h[2],f.precision=h[3]),intUtils_1.changeBase(a,c),intUtils_1.changeBase(f,c),[a,f];var g,h}exports.divideAndRemainder=divideAndRemainder;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(14),singleDigitMultiplication_1=__webpack_require__(24),subtraction_1=__webpack_require__(16),arrayUtils_1=__webpack_require__(25);function basicDivision(a,b,c,d,e,f,g){var h=f-e,j=c-b-h,k=Array(j+1);arrayUtils_1.set(k,0,j+1,0);for(var l=c;0<=compare_1.compare(a,b+j,l,d,e,f);)++k[j],l=subtraction_1.subtraction(a,b+j,l,d,e,f,g);var m=d[f-1],n=d[f-2],o=Array(h+1);for(var p=c-1,s=j;0<s--;--p)if(k[s]=divThreeHalvesByTwo(a[p],a[p-1],a[p-2],m,n,g),0!==k[s]){arrayUtils_1.copy(o,0,d,e,f);var t=singleDigitMultiplication_1.singleDigitMultiplication(o,0,h,k[s],g);0<compare_1.compare(o,0,t,a,b+s,l)&&(--k[s],t=subtraction_1.subtraction(o,0,t,d,e,f,g)),l=subtraction_1.subtraction(a,b+s,l,o,0,t,g)}for(;l>b&&0===a[l-1];)--l;return[k,a,0===k[j]?j:j+1,l]}exports.basicDivision=basicDivision;function divThreeHalvesByTwo(a,b,c,d,e,f){var g=a*f+b,h=g%d;return g=0|g/d,h=h*f-g*e+c,0>h&&(h=h+d*f+e,g=0>h?g-2:g-1),g}\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitMultiplication(a,b,c,d,e){for(var f=0;b<c;){var g=a[b]*d+f;g<e?f=0:(f=0|g/e,g%=e),a[b++]=g}return 0<f&&(a[b++]=f),b}exports.singleDigitMultiplication=singleDigitMultiplication;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function unsafeShiftUp(a,b,c,d){for(var e=b+d;b<c;a[e++]=a[b++]);}exports.unsafeShiftUp=unsafeShiftUp;function safeShiftUp(a,b,c,d){for(var e=c+d;c>b;a[--e]=a[--c]);}exports.safeShiftUp=safeShiftUp;function copy(a,b,c,d,e){for(;d<e;)a[b++]=c[d++]}exports.copy=copy;function set(a,b,c,d){for(;b<c;)a[b++]=d}exports.set=set;function printArr(a,b,c,d,e){function f(g){return g.forEach(function(h,j,k){(null==h||h!==h)&&(k[j]=h+\"\")}),g}return void 0===d&&(d=b),void 0===e&&(e=c),\"[\"+f(a.slice(b,d)).join(\", \")+\"|\"+f(a.slice(d,e)).join(\", \")+\"|\"+f(a.slice(e,c)).join(\", \")+\"]\"}exports.printArr=printArr;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitDivision(b,c,d,e,f){var g=0;for(var h=d;h-->c;g%=e)g=g*f+b[h],b[h]=0|g/e;return 0===b[d-1]&&--d,[d,g]}exports.singleDigitDivision=singleDigitDivision;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(5),steinGCD_1=__webpack_require__(28),intUtils_1=__webpack_require__(12);function gcd(a,b){if(a.isNegative=!1,a===b||0===b.precision)return a;var c=a.base;return 0===a.precision?(copy_1.copy(a,b),a.isNegative=!1):(intUtils_1.changeBase(a,b.base),d=steinGCD_1.steinGCD(a.digits,0,a.precision,b.digits,0,b.precision,a.base),a.digits=d[0],a.precision=d[2]),intUtils_1.changeBase(a,c);var d}exports.gcd=gcd;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(14),double_1=__webpack_require__(8),halve_1=__webpack_require__(29),isEven_1=__webpack_require__(30),subtraction_1=__webpack_require__(16);function steinGCD(a,b,d,e,f,g,h){for(var i=0;isEven_1.isEven(a,b,d,h)&&isEven_1.isEven(e,f,g,h);)d=halve_1.halve(a,b,d,h)[0],g=halve_1.halve(e,f,g,h)[0],++i;for(;isEven_1.isEven(a,b,d,h);)d=halve_1.halve(a,b,d,h)[0];do{for(;isEven_1.isEven(e,f,g,h);)g=halve_1.halve(e,f,g,h)[0];var j=compare_1.compare(a,b,d,e,f,g);if(0===j)break;if(0<j){var k=a;a=e,e=k,j=b,b=f,f=j,j=d,d=g,g=j}g=subtraction_1.subtraction(e,f,g,a,b,d,h),g=halve_1.halve(e,f,g,h)[0]}while(!0);for(;0<i--;)d=double_1.double(a,b,d,h);return[a,b,d]}exports.steinGCD=steinGCD;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function halve(a,b,c,d){var e=0;for(var f=c;f-->b;a[f]>>>=1)a[f]+=d&-e,e=1&a[f];return 0===a[c-1]&&--c,[c,e]}exports.halve=halve;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function isEven(a,b,c,d){if(b===c)return!0;if(0==(1&d))return 0==(1&a[b]);for(var e=0;b<c;)e^=a[b++];return 0==(1&e)}exports.isEven=isEven;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(21),halve_1=__webpack_require__(29),intUtils_1=__webpack_require__(12);function halve(a){var b={base:a.base};return 0===a.precision?[a,intUtils_1.setZero(b)]:(c=halve_1.halve(a.digits,0,a.precision,a.base),a.precision=c[0],b.precision=c[1],0===b.precision)?[a,intUtils_1.setZero(b)]:(a.isNegative&&decrement_1.decrement(a),[a,intUtils_1.setOne(b)]);var c}exports.halve=halve;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(17),increment_1=__webpack_require__(19);function increment(a){return a.isNegative?(a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),0===a.precision&&(a.isNegative=!1)):a.precision=increment_1.increment(a.digits,0,a.precision,a.base),a}exports.increment=increment;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var isEven_1=__webpack_require__(30);function isEven(a){return isEven_1.isEven(a.digits,0,a.precision,a.base)}exports.isEven=isEven;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t'use strict';function isInteger(a){return a.hasOwnProperty('base')&&a.hasOwnProperty('digits')&&a.hasOwnProperty('precision')&&a.hasOwnProperty('isNegative')}exports.isInteger=isInteger;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(5),lcm_1=__webpack_require__(36),intUtils_1=__webpack_require__(12);function lcm(a,b){if(a.isNegative=!1,a===b||0===a.precision||1===b.precision&&1===b.digits[0])return a;if(0===b.precision)return intUtils_1.setZero(a);var c=a.base;return 1===a.precision&&1===a.digits[0]?(copy_1.copy(a,b),a.isNegative=!1):(intUtils_1.changeBase(a,b.base),d=lcm_1.lcm(a.digits,0,a.precision,b.digits,0,b.precision,a.base),a.digits=d[0],a.precision=d[1]),intUtils_1.changeBase(a,c);var d}exports.lcm=lcm;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var basicDivision_1=__webpack_require__(23),arrayUtils_1=__webpack_require__(25),karatsubaMultiplication_1=__webpack_require__(37),steinGCD_1=__webpack_require__(28);function lcm(a,b,c,d,e,f,g){var h=c-b,i=Array(h);arrayUtils_1.copy(i,0,a,b,c);var j=f-e,k=Array(j);return arrayUtils_1.copy(k,0,d,e,f),l=steinGCD_1.steinGCD(i,0,h,k,0,j,g),i=l[0],h=l[2],m=basicDivision_1.basicDivision(a,b,c,i,0,h,g),i=m[0],h=m[2],h=karatsubaMultiplication_1.karatsubaMultiplication(i,0,h,d,e,f,g),[i,h];var l,m}exports.lcm=lcm;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(18),reverseAddition_1=__webpack_require__(20),subtraction_1=__webpack_require__(16),numUtils_1=__webpack_require__(38),arrayUtils_1=__webpack_require__(25);function karatsubaMultiplication(a,b,c,d,e,f,g){var h=numUtils_1.max(c-b,f-e);if(2>h)return h=a[b]*d[e],h<g?a[c]=0:(a[c++]=0|h/g,h%=g),a[b]=h,c;h=h+1>>>1;var i=b+h,j=numUtils_1.min(i,c),k=numUtils_1.min(e+h,f),l=Array(k-e+1);arrayUtils_1.copy(l,0,d,e,k);var m=addition_1.addition(l,0,k-e,d,k,f,g),n=Array(j-b+1+m);arrayUtils_1.copy(n,0,a,b,j);var o=addition_1.addition(n,0,j-b,a,j,c,g);o=karatsubaMultiplication(n,0,o,l,0,m,g),a[c]=0,arrayUtils_1.unsafeShiftUp(a,j,c,h);var p=karatsubaMultiplication(a,b,j,d,e,k,g);if(o=subtraction_1.subtraction(n,0,o,a,b,p,g),j===c||k===f)return p<=i?(c=i+o,arrayUtils_1.set(a,p,i,0),arrayUtils_1.copy(a,i,n,0,o)):o>p-i?c=reverseAddition_1.reverseAddition(a,i,p,n,0,o,g):c=addition_1.addition(a,i,p,n,0,o,g),c;arrayUtils_1.set(a,p,c,0);var q=j+h;return c=karatsubaMultiplication(a,q,c+h,d,k,f,g),o=subtraction_1.subtraction(n,0,o,a,q,c,g),c=addition_1.addition(a,i,c,n,0,o,g),c}exports.karatsubaMultiplication=karatsubaMultiplication;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function max(c,d){return c<d?d:c}exports.max=max;function min(c,d){return c>d?d:c}exports.min=min;function strToDigits(c){if(c=c.trim(),1>c.length)throw new TypeError(\"NaN\");var d=\"-\"===c[0];if(c=c.replace(/^[-+]?0*/,\"\").replace(/\\.[0-9]+$/,\"\"),c.match(/[^\\d]/))throw new TypeError(\"NaN\");var e=c.length;if(0===e)return[[],!1];var f=Array(e);for(var g=0,h=e;0<h;++g)f[g]=0|c[--h];return[f,d]}exports.strToDigits=strToDigits;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(11);function max(a,b){return 0>compare_1.compare(a,b)?b:a}exports.max=max;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(11);function min(a,b){return 0<compare_1.compare(a,b)?b:a}exports.min=min;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var square_1=__webpack_require__(42),karatsubaMultiplication_1=__webpack_require__(37),longMultiplication_1=__webpack_require__(45),singleDigitMultiplication_1=__webpack_require__(24),intUtils_1=__webpack_require__(12);function multiply(a,b){if(a===b)return square_1.square(a);if(0===a.precision)return a;if(0===b.precision)return intUtils_1.setZero(a);a.isNegative=a.isNegative!==b.isNegative;var c=a.base;if(intUtils_1.changeBase(a,b.base),1===b.precision)return a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,a.precision,b.digits[0],a.base),intUtils_1.changeBase(a,c);if(1===a.precision){var d=a.digits[0];return a.digits=b.digits.slice(0),a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,b.precision,d,a.base),intUtils_1.changeBase(a,c)}var e=a.precision+b.precision;return a.digits.length<e&&(a.digits.length=e),a.precision=100>a.precision&&100>b.precision?longMultiplication_1.longMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base):karatsubaMultiplication_1.karatsubaMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,c)}exports.multiply=multiply;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var karatsubaSquare_1=__webpack_require__(43),longSquare_1=__webpack_require__(44);function square(a){if(0===a.precision)return a;a.isNegative=!1;var b=2*a.precision;return a.digits.length<b&&(a.digits.length=b),a.precision=500>a.precision?longSquare_1.longSquare(a.digits,0,a.precision,a.base):karatsubaSquare_1.karatsubaSquare(a.digits,0,a.precision,a.base),a}exports.square=square;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(18),subtraction_1=__webpack_require__(16),arrayUtils_1=__webpack_require__(25);function karatsubaSquare(a,b,c,d){var e=c-b;if(2>e)return e=a[b]*a[b],e<d?a[c]=0:(a[c++]=0|e/d,e%=d),a[b]=e,c;e=e+1>>>1;var f=b+e,g=Array(2*e+2);arrayUtils_1.copy(g,0,a,b,f);var h=addition_1.addition(g,0,e,a,f,c,d);a[c]=0,arrayUtils_1.unsafeShiftUp(a,f,c,e);var i=karatsubaSquare(a,b,f,d);arrayUtils_1.set(a,i,c,0);var j=f+e;return c=karatsubaSquare(a,j,c+e,d),h=karatsubaSquare(g,0,h,d),h=subtraction_1.subtraction(g,0,h,a,b,i,d),h=subtraction_1.subtraction(g,0,h,a,j,c,d),addition_1.addition(a,f,c,g,0,h,d)}exports.karatsubaSquare=karatsubaSquare;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(25),arrayUtils_2=__webpack_require__(25);function longSquare(a,b,c,e){var f=c-b;arrayUtils_2.unsafeShiftUp(a,b,c,f),arrayUtils_1.set(a,b,c,0),f+=c;for(var g=b,h=c;g<f;g+=2){var i=a[h++],j=0;a[g]+=i*i,a[g]>=e&&(j=0|a[g]/e,a[g]%=e);var k=g+1;for(var l=h;l<f;++k){var n=0,p=a[l++]*i;p>=e&&(n=0|p/e,p%=e),n<<=1,p<<=1,a[k]=a[k]+p+j,j=n,a[k]>=e&&(j+=0|a[k]/e,a[k]%=e)}a[k]=j}return 0===a[f-1]?f-1:f}exports.longSquare=longSquare;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(25),arrayUtils_2=__webpack_require__(25);function longMultiplication(c,d,e,f,g,h,j){var k=h-g,l=d+k;arrayUtils_2.safeShiftUp(c,d,e,k),arrayUtils_1.set(c,d,l,0);var m=e+k;for(var n=l;n<m;++n){var o=0,p=n-k;for(var q=g;q<h;++q){var r=c[n]*f[q]+c[p]+o;r<j?o=0:(o=0|r/j,r%=j),c[p++]=r}c[p]=o}return 0===c[m-1]?m-1:m}exports.longMultiplication=longMultiplication;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(5),isEven_1=__webpack_require__(33),exponentiation_1=__webpack_require__(47),intUtils_1=__webpack_require__(12);function pow(a,b){if(0===b.precision)return intUtils_1.setOne(a);if(b.isNegative){if(0===a.precision)throw new EvalError(\"Divide by zero\");return intUtils_1.setZero(a)}return 0===a.precision?a:(a.isNegative&&isEven_1.isEven(b)&&(a.isNegative=!1),1===a.precision&&1===a.digits[0])?a:(b=copy_1.copy({},b),a.precision=exponentiation_1.exponentiation(a.digits,0,a.precision,a.base,b.digits,0,b.precision,b.base),a)}exports.pow=pow;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var halve_1=__webpack_require__(29),karatsubaSquare_1=__webpack_require__(43),karatsubaMultiplication_1=__webpack_require__(37);function exponentiation(a,b,c,d,e,f,g,h){for(var i=1,j=[1];f+1<g||1<e[f];){var k=void 0;l=halve_1.halve(e,f,g,h),g=l[0],k=l[1],0<k&&(j.length=i+c,i=karatsubaMultiplication_1.karatsubaMultiplication(j,0,i,a,b,c,d)),c=karatsubaSquare_1.karatsubaSquare(a,b,c,d)}return 1<j.length&&(c=karatsubaMultiplication_1.karatsubaMultiplication(a,b,c,j,0,i,d)),c;var l}exports.exponentiation=exponentiation;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function signum(a){return a.isNegative?-1:0===a.precision?0:1}exports.signum=signum;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(2),intUtils_1=__webpack_require__(12);function setBase(a,b){if(b=0|b,a.base===b)return a;if(b<constants_1.MIN_BASE)throw RangeError(b+\" < MIN_BASE (\"+constants_1.MIN_BASE+\")\");if(b>constants_1.MAX_BASE)throw RangeError(b+\" > MAX_BASE (\"+constants_1.MAX_BASE+\")\");return intUtils_1.changeBase(a,b)}exports.setBase=setBase;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(2),setBase_1=__webpack_require__(49),isInteger_1=__webpack_require__(34),intUtils_1=__webpack_require__(12),numUtils_1=__webpack_require__(38);function toInteger(a,b){if(void 0===b&&(b=constants_1.DEFAULT_BASE),isInteger_1.isInteger(a))return a;if(\"number\"==typeof a)a=\"\"+a;else if(\"string\"!=typeof a)throw TypeError(\"Expecting type Integer | string | number\");var c=intUtils_1.setZero({base:10});return d=numUtils_1.strToDigits(a),c.digits=d[0],c.isNegative=d[1],c.precision=c.digits.length,setBase_1.setBase(c,b),c;var d}exports.toInteger=toInteger;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(2);function toString(a,b,c){void 0===b&&(b=null),void 0===c&&(c=null);var d=a.isNegative?\"-\":\"\";if(null==c){if(constants_1.CIPHER.length<a.base)return b=null==b?\":\":b,d+a.digits.slice(0).reverse().join(b);c=constants_1.CIPHER}return b=null==b?\"\":b,d+a.digits.map(function(e){return c[e]}).reverse().join(b)}exports.toString=toString;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// big.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c83055977cb80ce8cf1f","export {BigInt as Int} from './oop/bigInt';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import * as Constants from '../constants';\nimport {Integer} from '../integer';\nimport {abs} from '../functional/abs';\nimport {add} from '../functional/add';\nimport {assign} from '../functional/assign';\nimport {compare} from '../functional/compare';\nimport {copy} from '../functional/copy';\nimport {decrement} from '../functional/decrement';\nimport {divideAndRemainder} from '../functional/divideAndRemainder';\nimport {double} from '../functional/double';\nimport {gcd} from '../functional/gcd';\nimport {halve} from '../functional/halve';\nimport {increment} from '../functional/increment';\nimport {isEven} from '../functional/isEven';\nimport {isInteger} from '../functional/isInteger';\nimport {lcm} from '../functional/lcm';\nimport {max} from '../functional/max';\nimport {min} from '../functional/min';\nimport {multiply} from '../functional/multiply';\nimport {negate} from '../functional/negate';\nimport {pow} from '../functional/pow';\nimport {signum} from '../functional/signum';\nimport {setBase} from '../functional/setBase';\nimport {subtract} from '../functional/subtract';\nimport {square} from '../functional/square';\nimport {toInteger} from '../functional/toInteger';\nimport {toString} from '../functional/toString';\n\nexport class BigInt {\n\n  public static readonly MIN_BASE: number = Constants.MIN_BASE;\n  public static readonly MAX_BASE: number = Constants.MAX_BASE;\n  public static readonly DEFAULT_BASE: number = Constants.DEFAULT_BASE;\n  public static readonly MAX_PRECISION: number = Constants.MAX_PRECISION;\n\n  public static get MINUS_ONE(): BigInt {return new BigInt(-1)};\n  public static get ZERO(): BigInt {return new BigInt(0)};\n  public static get ONE(): BigInt {return new BigInt(1)};\n\n  public base: number;\n  public digits: number[];\n  public precision: number;\n  public isNegative: boolean;\n\n  constructor(input: Integer | number | string) {\n    if(isInteger(input)){\n      this.copy(input);\n    } else {\n      assign(this, toInteger(input, BigInt.DEFAULT_BASE));\n    }\n    this.digits.length = this.precision;\n  }\n\n  public abs(): BigInt {\n    abs(this);\n    return this;\n  };\n\n  public add(addend: Integer): BigInt {\n    add(this, addend);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public clone(): BigInt {\n    return new BigInt(this);\n  }\n\n  public compareTo(B: Integer): number {\n    return compare(this, B);\n  }\n\n  public copy(source: Integer): BigInt {\n    copy(this, source);\n    return this;\n  }\n\n  public divide(divisor: Integer): BigInt {\n    this.divideAndRemainder(divisor);\n    return this;\n  }\n\n  public divideAndRemainder(divisor: Integer): [BigInt, BigInt] {\n    let Q: Integer;\n    let R: Integer;\n    [Q, R] = divideAndRemainder(this, divisor);\n    Q.digits.length = Q.precision;\n    R.digits.length = R.precision;\n    return [<BigInt>assign(this, Q), <BigInt>assign(BigInt.ZERO, R)];\n  }\n\n  public double(): BigInt {\n    double(this);\n    return this;\n  }\n\n  public gcd(B: Integer): BigInt {\n    gcd(this, B);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public getBase(): number {\n    return this.base;\n  }\n\n  public half(): [BigInt, BigInt] {\n    let remainder: Integer;\n    [,remainder] = halve(this);\n    this.digits.length = this.precision;\n    return [this, (remainder.precision === 0) ? BigInt.ZERO : BigInt.ONE];\n  }\n\n  public static isBigInt(n: any): n is BigInt {\n    return n instanceof BigInt;\n  }\n\n  public isEven(): boolean {\n    return isEven(this);\n  }\n\n  public isOdd(): boolean {\n    return !this.isEven();\n  }\n\n  //See: https://en.wikipedia.org/wiki/Least_common_multiple\n  public lcm(B: Integer): BigInt {\n    lcm(this, B);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public static max(A: Integer, B: Integer): BigInt {\n    return BigInt.toBigInt(max(A, B));\n  }\n\n  public static min(A: Integer, B: Integer): BigInt {\n    return BigInt.toBigInt(min(A, B));\n  }\n\n  public minusminus(): BigInt {\n    decrement(this);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public multiply(multiplier: Integer): BigInt {\n    multiply(this, multiplier);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public negate(): BigInt {\n    negate(this);\n    return this;\n  };\n\n  public plusplus(): BigInt {\n    increment(this);\n    return this;\n  }\n\n  public pow(power: Integer): BigInt {\n    pow(this, power);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public remainder(divisor: Integer): BigInt {\n    assign(this, this.divideAndRemainder(divisor)[1]);\n    return this;\n  }\n\n  public setBase(base: number): BigInt {\n    setBase(this, base);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public signum(): number {\n    return signum(this);\n  };\n\n  public square(): BigInt {\n    square(this);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public subtract(subtrahend: Integer): BigInt {\n    subtract(this, subtrahend);\n    this.digits.length = this.precision;\n    return this;\n  }\n\n  public static toBigInt(input: Integer | number | string): BigInt {\n    return BigInt.isBigInt(input) ? input : new BigInt(input);\n  }\n\n  public toString(sep: string = null, cipher: ReadonlyArray<string> = null): string {\n    return toString(this, sep, cipher);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/oop/bigInt.ts","export const MIN_BASE: number = 2;\nexport const MAX_BASE: number = 94906265; //2^26 < sqrt(Number.MAX_SAFE_INTEGER) < 2^27\nexport const DEFAULT_BASE: number = 94906264;\nexport const MAX_PRECISION: number = 4294967295; //2^32 - 1\nexport const CIPHER: ReadonlyArray<string> = Object.freeze([\n  '0','1','2','3','4','5','6','7','8','9',\n  'A','B','C','D','E','F','G','H','I','J',\n  'K','L','M','N','O','P','Q','R','S','T',\n  'U','V','W','X','Y','Z'\n]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants.ts","import {Integer} from '../integer';\n\nexport function abs(A: Integer): Integer {\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/abs.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {double} from './double';\nimport {negate} from './negate';\nimport {subtract} from './subtract';\nimport {addition} from '../algorithm/addition';\nimport {reverseAddition} from '../algorithm/reverseAddition';\nimport {changeBase} from '../util/intUtils';\n\nexport function add(A: Integer, B: Integer): Integer {\n\n  //If self\n  if(A === B){\n    return double(A);\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A is zero\n  if(A.precision === 0){\n    copy(A, B);\n    return changeBase(A, base);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, subtract, change sign again\n    negate(A);\n    subtract(A, B);\n    negate(A);\n\n  //If A < B\n} else if(A.precision < B.precision){\n\n    //Make room for addition\n    if(A.digits.length <= B.precision){\n      A.digits.length = B.precision + 1;\n    }\n\n    //Add\n    A.precision = reverseAddition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A >= B\n  } else {\n\n    //Add\n    A.precision = addition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  //Change A back to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/add.ts","import {Integer} from '../integer';\nimport {assign} from './assign';\n\nexport function copy(target: any, source: Integer): Integer {\n  assign(target, source);\n  target.digits = target.digits.slice(0, target.precision);\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/copy.ts","import {Integer} from '../integer';\n\nexport function assign(target: any, source: Integer): Integer {\n  target.base = source.base;\n  target.digits = source.digits;\n  target.precision = source.precision;\n  target.isNegative = source.isNegative;\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/assign.ts","import {Integer} from '../integer';\nimport {double as _double} from '../algorithm/double';\n\nexport function double(A: Integer): Integer {\n  A.precision = _double(A.digits, 0, A.precision, A.base);\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/double.ts","/*\nf(A) = A + A\nOverwrites A\n*/\nexport function double(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Double\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] << 1) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add carry\n  if (carry > 0){\n    A[minA++] = 1;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/double.ts","import {Integer} from '../integer';\n\nexport function negate(A: Integer): Integer {\n  if(A.precision > 0){\n    A.isNegative = !A.isNegative;\n  }\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/negate.ts","import {Integer} from '../integer';\nimport {add} from './add';\nimport {compare} from './compare';\nimport {copy} from './copy';\nimport {negate} from './negate';\nimport {reverseSubtraction} from '../algorithm/reverseSubtraction';\nimport {subtraction} from '../algorithm/subtraction';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function subtract(A: Integer, B: Integer): Integer {\n\n  //If subtracting itself\n  if(A === B){\n    return setZero(A);\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A is zero\n  if(A.precision === 0){\n\n    //Copy B\n    copy(A, B);\n    negate(A);\n    return changeBase(A, base);\n  }\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, add, change sign again\n    negate(A);\n    add(A, B);\n    return negate(A);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //Compare A and B\n  const c: number = compare(A, B);\n\n  //If A == B\n  if(c === 0){\n    A.base = base;\n    return setZero(A);\n  }\n\n  //If A < B\n  if(c < 0){\n\n    //Switch sign\n    negate(A);\n    \n    //Make room for subtraction\n    if(A.digits.length < B.precision){\n      A.digits.length = B.precision;\n    }\n\n    //Subtract\n    A.precision = reverseSubtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A > B\n  } else {\n    A.precision = subtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/subtract.ts","import {Integer} from '../integer';\nimport {changeBase} from '../util/intUtils';\nimport {compare as _compare} from '../algorithm/compare';\n\nexport function compare(A: Integer, B: Integer): number {\n\n  //If self\n  if(A === B){\n    return 0;\n  }\n\n  //Check if different signs\n  if(A.isNegative !== B.isNegative){\n    return (A.isNegative) ? -1 : 1;\n  }\n\n  //If not same base\n  if(A.base !== B.base){\n\n    //Estimate number of digits of A if converted to B's base\n    const ratio: number = Math.log(A.base) / Math.log(B.base);\n    if(Math.ceil(A.precision * ratio) > B.base){\n      return 1;\n    }\n    if(Math.ceil((A.precision + 1) * ratio) < B.precision){\n      return -1\n    }\n  }\n\n  //Convert A to B's base\n  const base: number = A.base;\n  changeBase(A, B.base);\n\n  //Compare A and B\n  const out: number = _compare(\n    A.digits, 0, A.precision,\n    B.digits, 0, B.precision\n  );\n\n  //Change A back to original base\n  changeBase(A, base);\n\n  //Return result\n  return out;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/compare.ts","import {Integer} from '../integer';\nimport {setBase} from '../algorithm/setBase';\n\nexport function changeBase(A: Integer, base: number): Integer {\n  [A.digits, A.precision] = setBase(\n    A.digits, 0, A.precision, A.base, base\n  );\n  A.base = base;\n  return A;\n}\n\nexport function setOne(A: any): Integer {\n  A.precision = 1;\n  A.digits = [1];\n  A.isNegative = false;\n  return A;\n}\n\nexport function setZero(A: any): Integer {\n  A.precision = 0;\n  A.digits = [];\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/intUtils.ts","//Assumes valid inputs\nexport function setBase(A: number[], minA: number, maxA: number, curBase: number, newBase: number): [number[], number] {\n\n  //If zero or same base\n  if(maxA === minA || curBase === newBase){\n    return [A, maxA];\n  }\n\n  //Create new array\n  let maxB: number = 0;\n  const B: number[] = new Array(Math.ceil(\n    (maxA - minA) * Math.log(curBase) / Math.log(newBase)\n  ));\n\n  //Return number in newBase\n  do {\n    let remainder: number = 0;\n    for(let i: number = maxA; i > minA; remainder = remainder % newBase){\n      remainder = remainder*curBase + A[--i];\n      A[i] = 0 | (remainder / newBase);\n    }\n    B[maxB++] = remainder;\n    while(A[maxA - 1] === 0){\n      if(--maxA === minA){\n        return [B, maxB];\n      }\n    }\n  } while(true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/setBase.ts","//Assumes valid inputs\n//Assumes numbers are in same base\nexport function compare(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number): number {\n\n  //Compare number of digits\n  const d: number = maxA - minA - maxB + minB;\n  if(d !== 0){\n    return d < 0 ? -1 : 1;\n  }\n\n  //Compare digits\n  while(maxA > minA){\n    if(A[--maxA] !== B[--maxB]){\n      return A[maxA] < B[maxB] ? -1 : 1;\n    }\n  }\n\n  //Numbers are equal\n  return 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/compare.ts","/*\n  f(A, B) = A - B\n  Overwrites A\n  Assumes B > A\n*/\nexport function reverseSubtraction(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n\n  //Subtract common digits\n  let borrow: number = 0;\n  while(minA < maxA){\n    let v: number = B[minB++] - borrow - A[minA];\n    if (v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[minA++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    for(borrow = base - 1; B[minB] === 0; ++minB){\n      A[minA++] = borrow;\n    }\n    A[minA++] = B[minB++] - 1;\n  }\n\n  //Copy extra digits\n  if(minB < maxB){\n    do {\n      A[minA++] = B[minB++];\n    } while (minB < maxB);\n\n  //Check for new length\n  } else {\n    while(A[minA-1] === 0){\n      --minA;\n    }\n  }\n\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseSubtraction.ts","import {decrement} from './decrement';\n\n/*\n  f(A, B) = A - B\n  Assumes\n     A >= B\n  Note\n     Overwrites A\n*/\nexport function subtraction(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n  let a: number = minA;\n  let borrow: number = 0;\n\n  //Subtract common digits\n  while(minB < maxB){\n    let v: number = A[a] - borrow - B[minB++];\n    if(v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[a++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    return decrement(A, a, maxA, base);\n  }\n\n  //Find new length\n  if(a === maxA){\n    while(a-- > minA && A[a] === 0){\n    }\n    maxA = a + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/subtraction.ts","/*\n  f(A) = A - 1\n  Overwrites A\n  Assumes A > 0\n*/\nexport function decrement(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any borrows\n  for(const borrow = base - 1; A[minA] === 0; A[minA++] = borrow){\n  }\n\n  //Subtract one\n  A[minA] = A[minA] - 1;\n\n  //Return length\n  return (minA+1 === maxA && A[minA] === 0) ? maxA - 1 : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/decrement.ts","import {increment} from './increment';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A.length >= B.length\n    A and B not same array or non-intersecting segments\n*/\nexport function addition(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number{\n  let carry: number = 0;\n\n  //Add common digits\n  while (minB < maxB){\n    let v: number = A[minA] + B[minB++] + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Return length\n  return (carry > 0) ? increment(A, minA, maxA, base) : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/addition.ts","/*\n  f(A) = A + 1\n  Overwrites A\n  Assumes A >= 0\n*/\n\nexport function increment(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any carries\n  for(--base; minA < maxA && A[minA] === base; A[minA++] = 0){\n  }\n\n  //Add one\n  if(minA === maxA){\n    A[maxA++] = 1;\n  } else {\n    A[minA] = A[minA] + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/increment.ts","import {addition} from './addition';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A < B\n    A and B not overlapping array segments\n*/\nexport function reverseAddition(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number{\n\n  //Add extra digits to A\n  const newMaxB: number = minB - minA + maxA;\n  for(let b: number = newMaxB; b < maxB; A[maxA++] = B[b++]){\n  }\n\n  //Do normal addition\n  return addition(A, minA, maxA, B, minB, newMaxB, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseAddition.ts","import {Integer} from '../integer';\nimport {decrement as _decrement} from '../algorithm/decrement';\nimport {increment} from '../algorithm/increment';\nimport {setOne} from '../util/intUtils';\n\nexport function decrement(A: Integer): Integer {\n\n  //If negative\n  if(A.isNegative){\n    A.precision = increment(A.digits, 0, A.precision, A.base);\n\n  //If zero\n  } else if (A.precision === 0){\n    setOne(A);\n    A.isNegative = true;\n\n  //If positive\n  } else {\n    A.precision = _decrement(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/decrement.ts","import {Integer} from '../integer';\nimport {assign} from './assign';\nimport {basicDivision} from '../algorithm/basicDivision';\nimport {singleDigitDivision} from '../algorithm/singleDigitDivision';\nimport {changeBase, setOne, setZero} from '../util/intUtils';\n\nexport function divideAndRemainder(A: Integer, B: Integer): [Integer, Integer] {\n\n  //If A / 0\n  if(B.precision === 0){\n    throw new EvalError(\"Divide by zero\");\n  }\n\n  //If self\n  if(A === B){\n    return [setOne(A), setZero({base: A.base})];\n  }\n\n  //If 0 / B\n  if(A.precision === 0){\n    return [A, setZero({base: A.base})];\n  }\n\n  //Divide signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //If B = 1\n  if(B.precision === 1 && B.digits[0] === 1){\n    return [A, setZero({base: A.base})];\n  }\n\n  //If A = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    return [setZero(A), setOne({base: A.base})];\n  }\n\n  //If different bases\n  const base: number = A.base;\n  if(base !== B.base){\n\n    //If A's length < the least possible length of B if converted to A's base\n    const ratio: number = Math.log(B.base) / Math.log(base);\n    if(A.precision < Math.ceil(B.precision * ratio)){\n      const remainder: Integer = assign({}, A);\n      return [setZero(A), remainder];\n    }\n\n    //Normalize bases\n    changeBase(A, B.base);\n  }\n\n  //If A's length < B's length\n  if(A.precision < B.precision){\n    changeBase(A, base);\n    const remainder: Integer = assign({}, A);\n    return [setZero(A), remainder];\n  }\n\n  //Choose best algorithm\n  let R: Integer = setOne({base: A.base});\n  if(B.precision < 2){\n    let r: number;\n    [A.precision, R.digits[0]] = singleDigitDivision(\n      A.digits, 0, A.precision, B.digits[0], A.base\n    );\n    if(r === 0){\n      setZero(R);\n    }\n  } else {\n    [\n      A.digits, R.digits, A.precision, R.precision\n    ] = basicDivision(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Return A and R\n  changeBase(A, base);\n  changeBase(R, base);\n  return [A, R];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/divideAndRemainder.ts","import {compare} from './compare';\nimport {singleDigitMultiplication} from './singleDigitMultiplication';\nimport {subtraction} from './subtraction';\nimport {copy, set} from '../util/arrayUtils';\n\n/*\n  f(X, Y) = X / Y\n  Overwrites X\n  Assumes no leading zeros\n  Assumes X.length >= Y.length >= 2\n  See: http://cacr.uwaterloo.ca/hac/about/chap14.pdf\n\n  INPUT: positive integers x = (xn ··· x1x0)b, y = (yt ··· y1y0)b with n ≥ t ≥ 1, yt != 0\n  OUTPUT: the quotient q = (qn−t ··· q1q0)b and remainder r = (rt ··· r1r0)b such that x = qy + r, 0 ≤ r < y\n*/\nexport function basicDivision(X: number[], minX: number, maxX: number, Y: number[], minY: number, maxY: number, base: number): [number[], number[], number, number] {\n\n  //1. Initialize the quotient\n  const lenY: number = maxY - minY;\n  const nMt: number = maxX - minX - lenY;\n  const Q: number[] = new Array(nMt + 1);\n  set(Q, 0, nMt + 1, 0);\n\n  //2. While X ≥ Yb^(n−t)\n  let maxR: number = maxX;\n  while(compare(X, minX + nMt, maxR, Y, minY, maxY) >= 0){\n\n    //Q[n−t] ← Q[n−t] + 1\n    ++Q[nMt];\n\n    //x ← x − Bb^(n−t)\n    maxR = subtraction(X, minX + nMt, maxR, Y, minY, maxY, base);\n  }\n\n  //3. For i from n down to (t + 1)\n  const yt: number = Y[maxY-1];\n  const ytm1: number = Y[maxY-2];\n  const QY: number[] = new Array(lenY + 1);\n  for(let i: number = maxX - 1, iMt: number = nMt; iMt-- > 0; --i){\n\n    //3.1 If x[i] = y[t] then set q[i−t−1] ← b − 1; otherwise set q[i−t−1] ← (x[i]b + x[i−1]) / y[t]\n    //3.2 While q[i−t−1] * (y[t]b + y[t−1]) > x[i]b^2 + x[i−1]b + x[i−2]\n    Q[iMt] = divThreeHalvesByTwo(X[i], X[i-1], X[i-2], yt, ytm1, base);\n\n    //3.3 x ← x − q[i−t−1] * yb^(i−t−1)\n    //3.4 If x < 0 then set x ← x + yb^(i−t−1) and q[i−t−1] ← q[i−t−1] − 1\n    if(Q[iMt] === 0){\n      continue;\n    }\n    copy(QY, 0, Y, minY, maxY);\n    let maxQY: number = singleDigitMultiplication(QY, 0, lenY, Q[iMt], base);\n    if(compare(QY, 0, maxQY, X, minX + iMt, maxR) > 0){\n      --Q[iMt];\n      maxQY = subtraction(QY, 0, maxQY, Y, minY, maxY, base);\n    }\n    maxR = subtraction(X, minX + iMt, maxR, QY, 0, maxQY, base);\n  }\n\n  //4. r ← x\n  //Adjust length of remainder\n  while(maxR > minX && X[maxR - 1] === 0){\n    --maxR;\n  }\n\n  //5. Return(q,r)\n  return [Q, X, (Q[nMt] === 0) ? nMt : nMt + 1, maxR];\n}\n\n/*\n  See: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.565&rep=rep1&type=pdf\n*/\nfunction divThreeHalvesByTwo(a1: number, a2: number, a3: number, b1: number, b2: number, base: number): number {\n  let q: number = a1*base + a2;\n  let r: number = q % b1;\n  q = 0 | (q / b1);\n  r = r*base - q*b2 + a3;\n  if(r < 0){\n    r = r + b1*base + b2;\n    q = (r < 0) ? q - 2 : q - 1;\n  }\n  return q;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/basicDivision.ts","/*\n  f(A,B) = A*B\n  Overwrites A\n  Assumes B > 0\n*/\nexport function singleDigitMultiplication(A: number[], minA: number, maxA: number, multiplier: number, base: number): number {\n\n  //Multiply multiplicand by multiplier\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] * multiplier) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 0 | (v / base);\n      v = v % base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add remaining carry\n  if(carry > 0){\n    A[minA++] = carry;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitMultiplication.ts","\n//Assumes shifts >= max - min, shifts > 0\nexport function unsafeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = min + shifts; min < max; A[i++] = A[min++]){\n  }\n}\n\nexport function safeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = max + shifts; max > min; A[--i] = A[--max]){\n  }\n}\n\n//Assumes A and B not same array or sections A and B do not intersect\nexport function copy<T>(to: T[], minTo: number, from: T[], minFrom: number, maxFrom: number): void {\n  while(minFrom < maxFrom){\n    to[minTo++] = from[minFrom++];\n  }\n}\n\n//Sets indices between [min, max) to v\nexport function set<T>(A: T[], min: number, max: number, v: T): void {\n  while(min < max){\n    A[min++] = v;\n  }\n}\n\nexport function printArr(A: any[], min: number, max: number, minSub: number = min, maxSub: number = max): string {\n  function format(A: any[]): any[] {\n    A.forEach((v: any, i: number, A: any[]) => {\n      if(v == null || v !== v){\n        A[i] = v + '';\n      }\n    });\n    return A;\n  }\n  return \"[\" +\n    format(A.slice(min,minSub)).join(', ') +\n    \"|\" + format(A.slice(minSub,maxSub)).join(', ') +\n    \"|\" + format(A.slice(maxSub,max)).join(', ') +\n  \"]\";\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/arrayUtils.ts","/*\n  f(A, B) = A / B\n  Overwrites A\n  Assumes B > 0\n  Assumes A > 0\n  Assumes no leading zeros\n*/\nexport function singleDigitDivision(A: number[], minA: number, maxA: number, B: number, base: number): [number, number] {\n  let remainder: number = 0;\n  for(let a: number = maxA; a-- > minA; remainder = remainder % B){\n    remainder = remainder * base + A[a];\n    A[a] = 0 | (remainder / B);\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitDivision.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {steinGCD} from '../algorithm/steinGCD';\nimport {changeBase} from '../util/intUtils';\n\nexport function gcd(A: Integer, B: Integer): Integer {\n\n  //Make A positive\n  A.isNegative = false;\n\n  //If GCD of self or B = 0\n  if(A === B || B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A = 0\n  if(A.precision === 0){\n    copy(A, B);\n    A.isNegative = false;\n\n  //If |A| > 0 && |B| > 0\n  } else {\n\n    //Normalize the bases\n    changeBase(A, B.base);\n\n    //Calculate GCD\n    [A.digits,,A.precision] = steinGCD(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Return A to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/gcd.ts","import {compare} from './compare';\nimport {double} from './double';\nimport {halve} from './halve';\nimport {isEven} from './isEven';\nimport {subtraction} from './subtraction';\n\n/*\nf(A, B) = GCD(A, B)\nOverwrites A, B\nExpects A > 0, B > 0\nSee: https://en.wikipedia.org/wiki/Binary_GCD_algorithm\n*/\nexport function steinGCD(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number, number] {\n\n  //Count and remove common factors of 2\n  let shifts: number = 0;\n  while(isEven(A, minA, maxA, base) && isEven(B, minB, maxB, base)){\n    [maxA] = halve(A, minA, maxA, base);\n    [maxB] = halve(B, minB, maxB, base);\n    ++shifts;\n  }\n\n  //Remove extra factors of 2 in A\n  while(isEven(A, minA, maxA, base)){\n    [maxA] = halve(A, minA, maxA, base);\n  }\n\n  //A will always be odd from now on\n  do {\n\n    //Remove extra factors of 2 in B\n    while(isEven(B, minB, maxB, base)){\n      [maxB] = halve(B, minB, maxB, base);\n    }\n\n    //B is now odd\n    //Compare A and B\n    let c: number = compare(A, minA, maxA, B, minB, maxB);\n\n    //End loop iff B - A === 0\n    if(c === 0){\n      break;\n    }\n\n    //Switch A and B iff A > B\n    if(c > 0){\n      const C: number[] = A;\n      A = B;\n      B = C;\n      c = minA;\n      minA = minB;\n      minB = c;\n      c = maxA;\n      maxA = maxB;\n      maxB = c;\n    }\n\n    //B = B - A\n    maxB = subtraction(B, minB, maxB, A, minA, maxA, base);\n\n    //B is now even since B and A were both odd\n    [maxB] = halve(B, minB, maxB, base);\n  } while (true);\n\n  //Restore common factors of 2 (A = A << shifts)\n  while(shifts-- > 0){\n    maxA = double(A, minA, maxA, base);\n  }\n\n  return [A, minA, maxA];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/steinGCD.ts","/*\n  f(A) = A / 2\n  Overwrites A\n  Assumes A > 0\n*/\nexport function halve(A: number[], minA: number, maxA: number, base: number): [number, number] {\n\n  //Halve\n  let remainder: number = 0;\n  for(let i: number = maxA; i-- > minA; A[i] = A[i] >>> 1){\n    A[i] = A[i] + (base & -remainder);\n    remainder = A[i] & 1;\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/halve.ts","export function isEven(A: number[], minA: number, maxA: number, base: number): boolean {\n\n  //If zero\n  if(minA === maxA){\n    return true;\n  }\n\n  //If even base\n  if((base & 1) === 0){\n    return (A[minA] & 1) === 0;\n  }\n\n  //If odd base\n  let xor: number = 0;\n  while(minA < maxA){\n    xor = xor ^ A[minA++];\n  }\n  return (xor & 1) === 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/isEven.ts","import {Integer} from '../integer';\nimport {decrement} from './decrement';\nimport {halve as _halve} from '../algorithm/halve';\nimport {setZero, setOne} from '../util/intUtils';\n\nexport function halve(A: Integer): [Integer, Integer] {\n  const remainder: Integer = <Integer>{base: A.base};\n\n  //If zero\n  if(A.precision === 0){\n    return [A, setZero(remainder)];\n  }\n\n  //Halve\n  [A.precision, remainder.precision] = _halve(A.digits, 0, A.precision, A.base);\n\n  //If no remainder\n  if(remainder.precision === 0){\n    return [A, setZero(remainder)];\n  }\n\n  //If remainder and A is negative\n  if(A.isNegative){\n\n    //Round down (e.g. Math.floor(-49.5) = -50)\n    decrement(A);\n  }\n\n  return [A, setOne(remainder)];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/halve.ts","import {Integer} from '../integer';\nimport {decrement} from '../algorithm/decrement';\nimport {increment as _increment} from '../algorithm/increment';\n\n\nexport function increment(A: Integer): Integer {\n\n  //If negative\n  if(A.isNegative){\n    A.precision = decrement(A.digits, 0, A.precision, A.base);\n\n    //If now zero\n    if(A.precision === 0){\n      A.isNegative = false;\n    }\n\n  //If positive\n  } else {\n    A.precision = _increment(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/increment.ts","import {Integer} from '../integer';\nimport {isEven as _isEven} from '../algorithm/isEven';\n\nexport function isEven(A: Integer): boolean {\n  return _isEven(A.digits, 0, A.precision, A.base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isEven.ts","import {Integer} from '../integer';\n\nexport function isInteger(A: any): A is Integer {\n  return A.hasOwnProperty('base')\n  && A.hasOwnProperty('digits')\n  && A.hasOwnProperty('precision')\n  && A.hasOwnProperty('isNegative');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isInteger.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {lcm as _lcm} from '../algorithm/lcm';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function lcm(A: Integer, B: Integer): Integer {\n\n  //Make A positive\n  A.isNegative = false;\n\n  //If LCM of self or A = 0 or B = 1\n  if(A === B || A.precision === 0 || (B.precision === 1 && B.digits[0] === 1)){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  const base: number = A.base;\n\n  //If A = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    copy(A, B);\n    A.isNegative = false;\n\n  //If A > 1 and B > 1\n  } else {\n\n    //Normalize bases\n    changeBase(A, B.base);\n\n    //Calculate LCM\n    [A.digits, A.precision] = _lcm(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  //Change A to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/lcm.ts","import {basicDivision} from './basicDivision';\nimport {copy} from '../util/arrayUtils';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\nimport {steinGCD} from './steinGCD';\n\n/*\n  f(A, B) = lcm(A, B)\n  Overwrites A\n  Asumes A > 0, B > 0\n  See: https://en.wikipedia.org/wiki/Least_common_multiple\n*/\nexport function lcm(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number] {\n\n  //Copy A\n  let maxC: number = maxA - minA;\n  let C: number[] = new Array(maxC);\n  copy(C, 0, A, minA, maxA);\n\n  //Copy B\n  const maxD: number = maxB - minB;\n  const D: number[] = new Array(maxD);\n  copy(D, 0, B, minB, maxB);\n\n  //Get gcd(A, B)\n  [C,,maxC] = steinGCD(C, 0, maxC, D, 0, maxD, base);\n  [C,,maxC] = basicDivision(A, minA, maxA, C, 0, maxC, base);\n  maxC = karatsubaMultiplication(C, 0, maxC, B, minB, maxB, base);\n  return [C, maxC];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/lcm.ts","import {addition} from './addition';\nimport {reverseAddition} from './reverseAddition';\nimport {subtraction} from './subtraction';\nimport {min, max} from '../util/numUtils';\nimport {copy, set, unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n  Explanation: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaMultiplication(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n  let halfLen: number = max(maxA - minA, maxB - minB);\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[minA] * B[minB];\n    if(halfLen < base){\n      A[maxA] = 0;\n    } else {\n      A[maxA++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[minA] = halfLen;\n    return maxA;\n  }\n\n  //Split the numbers in half\n  halfLen = (halfLen + 1) >>> 1;\n  const halfA: number = minA + halfLen;\n  const midA: number = min(halfA, maxA);\n  const midB: number = min(minB + halfLen, maxB);\n\n  //mediumB = lowB + highB\n  const mediumB: number[] = new Array(midB - minB + 1);\n  copy(mediumB, 0, B, minB, midB);\n  const mediumMaxB: number = addition(mediumB, 0, midB - minB, B, midB, maxB, base);\n\n  //medium = lowA + highA\n  const medium: number[] = new Array(midA - minA + 1 + mediumMaxB);\n  copy(medium, 0, A, minA, midA);\n  let mediumMax: number = addition(medium, 0, midA - minA, A, midA, maxA, base);\n\n  //medium = medium * mediumB\n  mediumMax = karatsubaMultiplication(medium, 0, mediumMax, mediumB, 0, mediumMaxB, base);\n\n  //Shift highA left\n  A[maxA] = 0;\n  unsafeShiftUp(A, midA, maxA, halfLen);\n\n  //lowA = lowA * lowB\n  const lowMax: number = karatsubaMultiplication(A, minA, midA, B, minB, midB, base);\n\n  //medium = medium - lowA\n  mediumMax = subtraction(medium, 0, mediumMax, A, minA, lowMax, base);\n\n  //A = medium*(base^halfLen) + lowA\n  if(midA === maxA || midB === maxB){\n    if(lowMax <= halfA){\n      maxA = halfA + mediumMax;\n      set(A, lowMax, halfA, 0);\n      copy(A, halfA, medium, 0, mediumMax);\n    } else if(mediumMax > lowMax - halfA){\n      maxA = reverseAddition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    } else {\n      maxA = addition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    }\n    return maxA;\n  }\n\n  //Fill unused space with zero\n  set(A, lowMax, maxA, 0);\n\n  //highA = highA * highB\n  const highMin: number = midA + halfLen;\n  maxA = karatsubaMultiplication(A, highMin, maxA + halfLen, B, midB, maxB, base);\n\n  //medium = medium - highA\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, maxA, base);\n\n  //A = highA*(base^len) + medium*(base^halfLen) + lowA\n  maxA = addition(A, halfA, maxA, medium, 0, mediumMax, base);\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaMultiplication.ts","export function max(a: number, b: number): number {\n  return (a < b) ? b : a;\n}\n\nexport function min(a: number, b: number): number {\n  return (a > b) ? b : a;\n}\n\nexport function strToDigits(s: String): [number[], boolean] {\n  s = s.trim();\n\n  //Check if empty string\n  if(s.length < 1){\n    throw new TypeError(\"NaN\");\n  }\n\n  //Check for leading sign\n  const isNegative: boolean = s[0] === '-';\n\n  //Trim signs, leading zeros and decimal part\n  s = s.replace(/^[-+]?0*/, '').replace(/\\.[0-9]+$/, '');\n\n  //Check if string is not a number\n  if(s.match(/[^\\d]/)){\n    throw new TypeError(\"NaN\");\n  }\n\n  //If zero\n  const precision: number = s.length;\n  if(precision === 0){\n    return [[], false];\n  }\n\n  //Convert to decimal array\n  const digits: number[] = new Array<number>(precision);\n  for(let i = 0, j = precision; j > 0; ++i){\n    digits[i] = 0 | <any>s[--j];\n  }\n\n  return [digits, isNegative];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/numUtils.ts","import {Integer} from '../integer';\nimport {compare} from './compare';\n\nexport function max(A: Integer, B: Integer): Integer {\n  return (compare(A, B) < 0) ? B : A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/max.ts","import {Integer} from '../integer';\nimport {compare} from './compare';\n\nexport function min(A: Integer, B: Integer): Integer {\n  return (compare(A, B) > 0) ? B : A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/min.ts","import {Integer} from '../integer';\nimport {square} from './square';\nimport {karatsubaMultiplication} from '../algorithm/karatsubaMultiplication';\nimport {longMultiplication} from '../algorithm/longMultiplication';\nimport {singleDigitMultiplication} from '../algorithm/singleDigitMultiplication';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function multiply(A: Integer, B: Integer): Integer {\n\n  //If self\n  if(A === B){\n    return square(A);\n  }\n\n  //If A is zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  //Multiply signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //Normalize to B's base\n  const base: number = A.base;\n  changeBase(A, B.base);\n\n  //If B is single digit\n  if(B.precision === 1){\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, A.precision, B.digits[0], A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //If A is single digit\n  if(A.precision === 1){\n    const multiplicand: number = A.digits[0];\n    A.digits = B.digits.slice(0);\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, B.precision, multiplicand, A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //Make room for multiplication\n  const maxNewLen: number = A.precision + B.precision;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 100 && B.precision < 100){\n    A.precision = longMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  } else {\n    A.precision = karatsubaMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/multiply.ts","import {Integer} from '../integer';\nimport {karatsubaSquare} from '../algorithm/karatsubaSquare';\nimport {longSquare} from '../algorithm/longSquare';\n\nexport function square(A: Integer): Integer {\n\n  //If zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //Make positive\n  A.isNegative = false;\n\n  //Make room for squaring\n  const maxNewLen: number = 2*A.precision;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 500){\n    A.precision = longSquare(A.digits, 0, A.precision, A.base);\n  } else {\n    A.precision = karatsubaSquare(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/square.ts","import {addition} from './addition';\nimport {subtraction} from './subtraction';\nimport {copy, set, unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n  Assumes A > 0\n  See: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaSquare(A: number[], min: number, max: number, base: number): number {\n  let halfLen: number = max - min;\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[min] * A[min];\n    if(halfLen < base){\n      A[max] = 0;\n    } else {\n      A[max++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[min] = halfLen;\n    return max;\n  }\n\n  //Split the number in half\n  halfLen = (halfLen + 1) >>> 1;\n  const mid: number = min + halfLen;\n\n  //medium = low + high\n  const medium: number[] = new Array(2*halfLen + 2);\n  copy(medium, 0, A, min, mid);\n  let mediumMax: number = addition(medium, 0, halfLen, A, mid, max, base);\n\n  //Shift high left\n  A[max] = 0;\n  unsafeShiftUp(A, mid, max, halfLen);\n\n  //low * low\n  const lowMax: number = karatsubaSquare(A, min, mid, base);\n\n  //Fill unused space with zero\n  set(A, lowMax, max, 0);\n\n  //high * high\n  const highMin = mid + halfLen;\n  max = karatsubaSquare(A, highMin, max + halfLen, base);\n\n  //medium = medium * medium - low - high\n  mediumMax = karatsubaSquare(medium, 0, mediumMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, min, lowMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, max, base);\n\n  //A = high*(base^len) + medium*(base ^ halfLen) + low\n  return addition(A, mid, max, medium, 0, mediumMax, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaSquare.ts","import {set} from '../util/arrayUtils';\nimport {unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n\n  Explanation:\n      a   b   c   d   e   f   g   _   _   _   _   _   _   _\n    *\n      a   b   c   d   e   f   g\n    -------------------------------------------------------\n                                 ag  bg  cg  dg  eg  fg  gg\n                             af  bf  cf  df  ef  ff  fg\n                         ae  be  ce  de  ee  ef  eg\n                     ad  bd  cd  dd  de  df  dg\n                 ac  bc  cc  cd  ce  cf  cg\n             ab  bb  bc  bd  be  bf  bg\n         aa  ab  ac  ad  ae  af  ag\n    -------------------------------------------------------\n                                2ag 2bg 2cg 2dg 2eg 2fg  gg\n                            2af 2bf 2cf 2df 2ef  ff\n                        2ae 2be 2ce 2de  ee\n                    2ad 2bd 2cd  dd\n                2ac 2bc  cc\n            2ab  bb\n         aa\n    -------------------------------------------------------\n      h   i   j   k   l   m   n   o   p   q   r   s   t   u\n*/\nexport function longSquare(A: number[], min: number, max: number, base: number): number {\n\n  //Move digits to the left\n  let newMax: number = max - min;\n  unsafeShiftUp(A, min, max, newMax);\n  set(A, min, max, 0);\n\n  //For every digit\n  newMax = newMax + max;\n  for(let d: number = min, s: number = max; d < newMax; d = d + 2){\n    const digit: number = A[s++];\n\n    //Square the digit\n    let carry: number = 0;\n    A[d] = A[d] + digit * digit;\n    if(A[d] >= base){\n      carry = 0 | (A[d] / base);\n      A[d] = A[d] % base;\n    }\n\n    //Multiply by higher digits twice\n    let o: number = d + 1;\n    for(let m: number = s; m < newMax; ++o){\n\n      //Multiply\n      let quotient: number = 0;\n      let product: number = A[m++] * digit;\n      if(product >= base){\n        quotient = 0 | (product / base);\n        product = product % base;\n      }\n\n      //Double\n      quotient = quotient << 1;\n      product = product << 1;\n\n      //Add\n      A[o] = A[o] + product + carry;\n      carry = quotient;\n      if(A[o] >= base){\n        carry = carry + (0 | (A[o] / base));\n        A[o] = A[o] % base;\n      }\n    }\n\n    //Place remaining carry\n    A[o] = carry;\n  }\n\n  //Return new length\n  return A[newMax - 1] === 0 ? newMax - 1 : newMax;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longSquare.ts","import {set} from '../util/arrayUtils';\nimport {safeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A, B) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n\n  Explanation:\n      a  b  c  _  _  _\n    *\n      d  e  f\n    ------------------\n              cd ce cf\n           bd be bf\n        ad ae af\n    ------------------\n      g  h  i  j  k  l\n\n*/\nexport function longMultiplication(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n\n  //Shift A to the left\n  const lenB: number = maxB - minB;\n  const minC: number = minA + lenB;\n  safeShiftUp(A, minA, maxA, lenB);\n  set(A, minA, minC, 0);\n\n  //For each digit in multiplicand\n  const maxC: number = maxA + lenB;\n  for(let a: number = minC; a < maxC; ++a){\n    let carry: number = 0;\n    let i: number = a - lenB;\n\n    //Multiply by multiplier\n    for(let b: number = minB; b < maxB; ++b){\n      let v: number = A[a] * B[b] + A[i] + carry;\n      if(v < base){\n        carry = 0;\n      } else {\n        carry = 0 | (v / base);\n        v = v % base;\n      }\n      A[i++] = v;\n    }\n\n    //Add remaining carry\n    A[i] = carry;\n  }\n\n  //Return new length\n  return (A[maxC - 1] === 0) ? maxC - 1 : maxC;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longMultiplication.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\nimport {isEven} from './isEven';\nimport {exponentiation} from '../algorithm/exponentiation';\nimport {setOne, setZero} from '../util/intUtils';\n\nexport function pow(A: Integer, B: Integer): Integer {\n\n  //A^0 = 1\n  if(B.precision === 0){\n    return setOne(A);\n  }\n\n  //If negative power\n  if(B.isNegative){\n\n    //If 1 / 0\n    if(A.precision === 0){\n      throw new EvalError(\"Divide by zero\");\n    }\n\n    return setZero(A);\n  }\n\n  //0^B = zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If negative base and even power\n  if(A.isNegative && isEven(B)){\n    A.isNegative = false;\n  }\n\n  //1^B = 1\n  if(A.precision === 1 && A.digits[0] === 1){\n    return A;\n  }\n\n  //Copy B\n  B = copy({}, B);\n\n  //Make room for exponentiation\n  /*const minNewLen: number = Math.floor(\n    (A.precision-1) * (\n      (B.precision) * Math.log2(B.base) + Math.log2(B.digits[B.precision-1]\n    ))\n  );\n  console.log(\"PREDICTED LENGTH: \", minNewLen);\n  if(A.digits.length < minNewLen){\n    A.digits.length = minNewLen;\n  }\n  */\n\n  //A = A^B\n  A.precision = exponentiation(\n    A.digits, 0, A.precision, A.base, B.digits, 0, B.precision, B.base\n  );\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/pow.ts","import {halve} from './halve';\nimport {karatsubaSquare} from './karatsubaSquare';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\n\n/*\n  f(A, B) = A^B = Math.pow(A, B)\n  Overwrites A\n  Overwrites B\n  Assumes A > 0\n  Assumes B > 0\n*/\nexport function exponentiation(A: number[], minA: number, maxA: number, baseA: number, B: number[], minB: number, maxB: number, baseB: number): number {\n  let maxC: number = 1;\n  const C: number[] = [1];\n\n  //Until power is 1\n  while(minB + 1 < maxB || B[minB] > 1){\n\n    //Divide the power in half\n    let remainder: number;\n    [maxB, remainder] = halve(B, minB, maxB, baseB);\n\n    //If remainder\n    if(remainder > 0){\n      C.length = maxC + maxA;\n      maxC = karatsubaMultiplication(C, 0, maxC, A, minA, maxA, baseA);\n    }\n\n    //Square the base\n    maxA = karatsubaSquare(A, minA, maxA, baseA);\n  }\n\n  if(C.length > 1){\n    maxA = karatsubaMultiplication(A, minA, maxA, C, 0, maxC, baseA);\n  }\n\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/exponentiation.ts","import {Integer} from '../integer';\n\nexport function signum(A: Integer): number {\n  return A.isNegative ? -1 : A.precision === 0 ? 0 : 1;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/signum.ts","import {MIN_BASE, MAX_BASE} from '../constants';\nimport {Integer} from '../integer';\nimport {changeBase} from '../util/intUtils';\n\nexport function setBase(A: Integer, base: number): Integer {\n\n  //Sanitize base\n  base = 0 | base;\n\n  //Check if already in base\n  if(A.base === base){\n    return A;\n  }\n\n  //If new base too low\n  if(base < MIN_BASE){\n    throw RangeError(base + \" < MIN_BASE (\" + MIN_BASE + \")\");\n  }\n\n  //If new base too high\n  if(base > MAX_BASE){\n    throw RangeError(base + \" > MAX_BASE (\" + MAX_BASE + \")\");\n  }\n\n  //Convert to base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/setBase.ts","import {DEFAULT_BASE} from '../constants';\nimport {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {isInteger} from './isInteger';\nimport {setZero} from '../util/intUtils';\nimport {strToDigits} from '../util/numUtils';\n\nexport function toInteger(A: Integer | number | string, base: number = DEFAULT_BASE): Integer {\n\n  //If already an integer\n  if(isInteger(A)){\n    return A;\n  }\n\n  //Convert numbers to string\n  if(typeof A === \"number\"){\n    A = '' + A;\n\n  //If not an expected type\n  } else if(typeof A !== \"string\"){\n    throw TypeError(\"Expecting type Integer | string | number\");\n  }\n\n  //Convert string to base 10\n  const B: Integer = setZero({base: 10});\n  [B.digits, B.isNegative] = strToDigits(A);\n  B.precision = B.digits.length;\n\n  //Convert to chosen base\n  setBase(B, base);\n\n  return B;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toInteger.ts","import {CIPHER} from '../constants';\nimport {Integer} from '../integer';\n\n//Assumes input cipher is adequate for base\nexport function toString(A: Integer, sep: string = null, cipher: ReadonlyArray<string> = null): string {\n\n  //If negative\n  const sign: string = A.isNegative ? \"-\" : \"\";\n\n  //If no custom cipher\n  if(cipher == null){\n\n    //If default cipher too small for base\n    if(CIPHER.length < A.base){\n\n      //Print without cipher\n      sep = (sep == null) ? \":\": sep;\n      return sign + A.digits.slice(0).reverse().join(sep);\n    }\n\n    //Use default cipher\n    cipher = CIPHER;\n  }\n\n  //Print with cipher\n  sep = (sep == null) ? \"\" : sep;\n  return sign + A.digits.map(v => cipher[v]).reverse().join(sep);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toString.ts"],"sourceRoot":""}