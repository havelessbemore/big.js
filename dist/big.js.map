{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///big.js","webpack:///webpack/bootstrap e4f6dae987e65efd75bb","webpack:///./src/index.ts","webpack:///./src/functional/clone.ts","webpack:///./src/util/intUtils.ts","webpack:///./src/util/arrayUtils.ts","webpack:///./src/functional/copy.ts","webpack:///./src/algorithm/subtraction.ts","webpack:///./src/algorithm/addition.ts","webpack:///./src/constants.ts","webpack:///./src/functional/compare.ts","webpack:///./src/algorithm/compare.ts","webpack:///./src/algorithm/decrement.ts","webpack:///./src/algorithm/halve.ts","webpack:///./src/algorithm/increment.ts","webpack:///./src/algorithm/karatsubaMultiplication.ts","webpack:///./src/functional/negate.ts","webpack:///./src/algorithm/basicDivision.ts","webpack:///./src/algorithm/double.ts","webpack:///./src/algorithm/isEven.ts","webpack:///./src/algorithm/karatsubaSquare.ts","webpack:///./src/algorithm/reverseAddition.ts","webpack:///./src/algorithm/singleDigitMultiplication.ts","webpack:///./src/algorithm/steinGCD.ts","webpack:///./src/functional/add.ts","webpack:///./src/functional/assign.ts","webpack:///./src/functional/decrement.ts","webpack:///./src/functional/double.ts","webpack:///./src/functional/isEven.ts","webpack:///./src/functional/setBase.ts","webpack:///./src/functional/square.ts","webpack:///./src/functional/subtract.ts","webpack:///./src/util/numUtils.ts","webpack:///./src/algorithm/exponentiation.ts","webpack:///./src/algorithm/lcm.ts","webpack:///./src/algorithm/longMultiplication.ts","webpack:///./src/algorithm/longSquare.ts","webpack:///./src/algorithm/reverseSubtraction.ts","webpack:///./src/algorithm/setBase.ts","webpack:///./src/algorithm/singleDigitDivision.ts","webpack:///./src/functional/abs.ts","webpack:///./src/functional/divideAndRemainder.ts","webpack:///./src/functional/gcd.ts","webpack:///./src/functional/halve.ts","webpack:///./src/functional/increment.ts","webpack:///./src/functional/isInteger.ts","webpack:///./src/functional/lcm.ts","webpack:///./src/functional/max.ts","webpack:///./src/functional/min.ts","webpack:///./src/functional/multiply.ts","webpack:///./src/functional/pow.ts","webpack:///./src/functional/signum.ts","webpack:///./src/functional/toInteger.ts","webpack:///./src/functional/toString.ts","webpack:///./src/oop/bigInt.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","bigInt_1","Int","BigInt","clone","a","copy_1","copy","changeBase","b","setBase_1","setBase","digits","precision","base","setOne","isNegative","setZero","unsafeShiftUp","d","e","safeShiftUp","set","printArr","f","g","forEach","h","j","k","slice","join","assign_1","assign","subtraction","i","decrement_1","decrement","addition","increment_1","increment","MIN_BASE","MAX_BASE","DEFAULT_BASE","MAX_PRECISION","CIPHER","Object","freeze","compare","Math","log","ceil","intUtils_1","compare_1","halve","karatsubaMultiplication","numUtils_1","max","min","l","Array","arrayUtils_1","addition_1","n","o","subtraction_1","reverseAddition_1","reverseAddition","q","negate","clone_1","basicDivision","s","divThreeHalvesByTwo","t","singleDigitMultiplication_1","singleDigitMultiplication","double","isEven","karatsubaSquare","steinGCD","isEven_1","halve_1","double_1","add","length","negate_1","subtract_1","subtract","constants_1","RangeError","square","longSquare_1","longSquare","karatsubaSquare_1","add_1","reverseSubtraction_1","reverseSubtraction","strToDigits","trim","TypeError","replace","match","exponentiation","karatsubaMultiplication_1","lcm","steinGCD_1","basicDivision_1","longMultiplication","arrayUtils_2","r","singleDigitDivision","abs","divideAndRemainder","EvalError","singleDigitDivision_1","gcd","isInteger","hasOwnProperty","lcm_1","multiply","square_1","longMultiplication_1","pow","exponentiation_1","signum","toInteger","isInteger_1","toString","reverse","map","Constants","abs_1","divideAndRemainder_1","gcd_1","max_1","min_1","multiply_1","pow_1","signum_1","toInteger_1","toString_1","defineProperty","get","enumerable","configurable","prototype","toBigInt","compareTo","divide","ZERO","getBase","half","isBigInt","isOdd","minusminus","plusplus","remainder"],"mappings":"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","file":"big.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Big\"] = factory();\n\telse\n\t\troot[\"Big\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var bigInt_1=__webpack_require__(52);exports.Int=bigInt_1.BigInt;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var copy_1=__webpack_require__(4);function clone(a){return copy_1.copy({},a)}exports.clone=clone;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var setBase_1=__webpack_require__(36);function changeBase(a,b){return c=setBase_1.setBase(a.digits,0,a.precision,a.base,b),a.digits=c[0],a.precision=c[1],a.base=b,a;var c}exports.changeBase=changeBase;function setOne(a){return a.precision=1,a.digits=[1],a.isNegative=!1,a}exports.setOne=setOne;function setZero(a){return a.precision=0,a.digits=[],a.isNegative=!1,a}exports.setZero=setZero;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function unsafeShiftUp(a,b,c,d){for(var e=b+d;b<c;a[e++]=a[b++]);}exports.unsafeShiftUp=unsafeShiftUp;function safeShiftUp(a,b,c,d){for(var e=c+d;c>b;a[--e]=a[--c]);}exports.safeShiftUp=safeShiftUp;function copy(a,b,c,d,e){for(;d<e;)a[b++]=c[d++]}exports.copy=copy;function set(a,b,c,d){for(;b<c;)a[b++]=d}exports.set=set;function printArr(a,b,c,d,e){function f(g){return g.forEach(function(h,j,k){(null==h||h!==h)&&(k[j]=h+\"\")}),g}return void 0===d&&(d=b),void 0===e&&(e=c),\"[\"+f(a.slice(b,d)).join(\", \")+\"|\"+f(a.slice(d,e)).join(\", \")+\"|\"+f(a.slice(e,c)).join(\", \")+\"]\"}exports.printArr=printArr;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var assign_1=__webpack_require__(23);function copy(a,b){return assign_1.assign(a,b),a.digits=a.digits.slice(0,a.precision),a}exports.copy=copy;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var decrement_1=__webpack_require__(10);function subtraction(b,c,d,e,f,g,h){for(var i=c,j=0;f<g;){var k=b[i]-j-e[f++];0>k?(j=1,k+=h):j=0,b[i++]=k}if(0<j)return decrement_1.decrement(b,i,d,h);if(i===d){for(;i-->c&&0===b[i];);d=i+1}return d}exports.subtraction=subtraction;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var increment_1=__webpack_require__(12);function addition(a,b,c,d,e,f,g){for(var h=0;e<f;){var i=a[b]+d[e++]+h;i<g?h=0:(h=1,i-=g),a[b++]=i}return 0<h?increment_1.increment(a,b,c,g):c}exports.addition=addition;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';exports.MIN_BASE=2,exports.MAX_BASE=94906265,exports.DEFAULT_BASE=94906264,exports.MAX_PRECISION=4294967295,exports.CIPHER=Object.freeze(['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']);\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var intUtils_1=__webpack_require__(2),compare_1=__webpack_require__(9);function compare(a,b){if(a===b)return 0;if(a.isNegative!==b.isNegative)return a.isNegative?-1:1;var c=a.base;if(a.base!==b.base){var d=Math.log(a.base)/Math.log(b.base);if(Math.ceil(a.precision*d)>b.base)return 1;if(Math.ceil((a.precision+1)*d)<b.precision)return-1;intUtils_1.changeBase(a,b.base)}var e=compare_1.compare(a.digits,0,a.precision,b.digits,0,b.precision);return intUtils_1.changeBase(a,c),e}exports.compare=compare;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function compare(a,b,c,e,f,g){var h=c-b-g+f;if(0!==h)return 0>h?-1:1;for(;c>b;)if(a[--c]!==e[--g])return a[c]<e[g]?-1:1;return 0}exports.compare=compare;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function decrement(a,b,c,d){for(;0===a[b];a[b++]=d-1);return--a[b],b+1===c&&0===a[b]?c-1:c}exports.decrement=decrement;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function halve(a,b,c,d){var e=0;for(var f=c;f-->b;a[f]>>>=1)a[f]+=d&-e,e=1&a[f];return 0===a[c-1]&&--c,[c,e]}exports.halve=halve;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function increment(a,b,c,d){for(--d;b<c&&a[b]===d;a[b++]=0);return b===c?a[c++]=1:++a[b],c}exports.increment=increment;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(6),reverseAddition_1=__webpack_require__(19),subtraction_1=__webpack_require__(5),numUtils_1=__webpack_require__(30),arrayUtils_1=__webpack_require__(3);function karatsubaMultiplication(a,b,c,d,e,f,g){var h=numUtils_1.max(c-b,f-e);if(2>h)return h=a[b]*d[e],h<g?a[c]=0:(a[c++]=0|h/g,h%=g),a[b]=h,c;h=h+1>>>1;var i=b+h,j=numUtils_1.min(i,c),k=numUtils_1.min(e+h,f),l=Array(k-e+1);arrayUtils_1.copy(l,0,d,e,k);var m=addition_1.addition(l,0,k-e,d,k,f,g),n=Array(j-b+1+m);arrayUtils_1.copy(n,0,a,b,j);var o=addition_1.addition(n,0,j-b,a,j,c,g);o=karatsubaMultiplication(n,0,o,l,0,m,g),a[c]=0,arrayUtils_1.unsafeShiftUp(a,j,c,h);var p=karatsubaMultiplication(a,b,j,d,e,k,g);if(o=subtraction_1.subtraction(n,0,o,a,b,p,g),j===c||k===f)return p<=i?(c=i+o,arrayUtils_1.set(a,p,i,0),arrayUtils_1.copy(a,i,n,0,o)):o>p-i?c=reverseAddition_1.reverseAddition(a,i,p,n,0,o,g):c=addition_1.addition(a,i,p,n,0,o,g),c;arrayUtils_1.set(a,p,c,0);var q=j+h;return c=karatsubaMultiplication(a,q,c+h,d,k,f,g),o=subtraction_1.subtraction(n,0,o,a,q,c,g),c=addition_1.addition(a,i,c,n,0,o,g),c}exports.karatsubaMultiplication=karatsubaMultiplication;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1);function negate(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative=0<a.precision&&!a.isNegative,a}exports.negate=negate;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(9),singleDigitMultiplication_1=__webpack_require__(20),subtraction_1=__webpack_require__(5),arrayUtils_1=__webpack_require__(3);function basicDivision(a,b,c,d,e,f,g){var h=f-e,j=c-b-h,k=Array(j+1);arrayUtils_1.set(k,0,j+1,0);for(var l=c;0<=compare_1.compare(a,b+j,l,d,e,f);)++k[j],l=subtraction_1.subtraction(a,b+j,l,d,e,f,g);var m=d[f-1],n=d[f-2],o=Array(h+1);for(var p=c-1,s=j;0<s--;--p)if(k[s]=divThreeHalvesByTwo(a[p],a[p-1],a[p-2],m,n,g),0!==k[s]){arrayUtils_1.copy(o,0,d,e,f);var t=singleDigitMultiplication_1.singleDigitMultiplication(o,0,h,k[s],g);0<compare_1.compare(o,0,t,a,b+s,l)&&(--k[s],t=subtraction_1.subtraction(o,0,t,d,e,f,g)),l=subtraction_1.subtraction(a,b+s,l,o,0,t,g)}for(;l>b&&0===a[l-1];)--l;return[k,a,0===k[j]?j:j+1,l]}exports.basicDivision=basicDivision;function divThreeHalvesByTwo(a,b,c,d,e,f){var g=a*f+b,h=g%d;return g=0|g/d,h=h*f-g*e+c,0>h&&(h=h+d*f+e,g=0>h?g-2:g-1),g}\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function double(a,b,c,d){for(var e=0;b<c;){var f=(a[b]<<1)+e;f<d?e=0:(e=1,f-=d),a[b++]=f}return 0<e&&(a[b++]=1),b}exports.double=double;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function isEven(a,b,c,d){if(b===c)return!0;if(0==(1&d))return 0==(1&a[b]);for(var e=0;b<c;)e^=a[b++];return 0==(1&e)}exports.isEven=isEven;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(6),subtraction_1=__webpack_require__(5),arrayUtils_1=__webpack_require__(3);function karatsubaSquare(a,b,c,d){var e=c-b;if(2>e)return e=a[b]*a[b],e<d?a[c]=0:(a[c++]=0|e/d,e%=d),a[b]=e,c;e=e+1>>>1;var f=b+e,g=Array(2*e+2);arrayUtils_1.copy(g,0,a,b,f);var h=addition_1.addition(g,0,e,a,f,c,d);a[c]=0,arrayUtils_1.unsafeShiftUp(a,f,c,e);var i=karatsubaSquare(a,b,f,d);arrayUtils_1.set(a,i,c,0);var j=f+e;return c=karatsubaSquare(a,j,c+e,d),h=karatsubaSquare(g,0,h,d),h=subtraction_1.subtraction(g,0,h,a,b,i,d),h=subtraction_1.subtraction(g,0,h,a,j,c,d),addition_1.addition(a,f,c,g,0,h,d)}exports.karatsubaSquare=karatsubaSquare;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var addition_1=__webpack_require__(6);function reverseAddition(a,c,d,e,f,g,h){var i=f-c+d;for(var j=i;j<g;a[d++]=e[j++]);return addition_1.addition(a,c,d,e,f,i,h)}exports.reverseAddition=reverseAddition;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitMultiplication(a,b,c,d,e){for(var f=0;b<c;){var g=a[b]*d+f;g<e?f=0:(f=0|g/e,g%=e),a[b++]=g}return 0<f&&(a[b++]=f),b}exports.singleDigitMultiplication=singleDigitMultiplication;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var compare_1=__webpack_require__(9),double_1=__webpack_require__(16),halve_1=__webpack_require__(11),isEven_1=__webpack_require__(17),subtraction_1=__webpack_require__(5);function steinGCD(a,b,d,e,f,g,h){for(var i=0;isEven_1.isEven(a,b,d,h)&&isEven_1.isEven(e,f,g,h);)d=halve_1.halve(a,b,d,h)[0],g=halve_1.halve(e,f,g,h)[0],++i;for(;isEven_1.isEven(a,b,d,h);)d=halve_1.halve(a,b,d,h)[0];do{for(;isEven_1.isEven(e,f,g,h);)g=halve_1.halve(e,f,g,h)[0];var j=compare_1.compare(a,b,d,e,f,g);if(0===j)break;if(0<j){var k=a;a=e,e=k,j=b,b=f,f=j,j=d,d=g,g=j}g=subtraction_1.subtraction(e,f,g,a,b,d,h),g=halve_1.halve(e,f,g,h)[0]}while(!0);for(;0<i--;)d=double_1.double(a,b,d,h);return[a,b,d]}exports.steinGCD=steinGCD;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(4),double_1=__webpack_require__(25),negate_1=__webpack_require__(14),subtract_1=__webpack_require__(29),addition_1=__webpack_require__(6),reverseAddition_1=__webpack_require__(19),intUtils_1=__webpack_require__(2);function add(a,b,c){if(void 0===c&&(c=!1),a===b)return double_1.double(a,c);if(a=c?a:clone_1.clone(a),0===b.precision)return a;var d=a.base;return 0===a.precision?(a=copy_1.copy(a,b),intUtils_1.changeBase(a,d)):(intUtils_1.changeBase(a,b.base),a.isNegative===b.isNegative?a.precision<b.precision?(a.digits.length<=b.precision&&(a.digits.length=b.precision),a.precision=reverseAddition_1.reverseAddition(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=addition_1.addition(a.digits,0,a.precision,b.digits,0,b.precision,a.base):(a=negate_1.negate(a,!0),a=subtract_1.subtract(a,b,!0),a=negate_1.negate(a,!0)),intUtils_1.changeBase(a,d))}exports.add=add;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function assign(a,b){return a.base=b.base,a.digits=b.digits,a.precision=b.precision,a.isNegative=b.isNegative,a}exports.assign=assign;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),decrement_1=__webpack_require__(10),increment_1=__webpack_require__(12),intUtils_1=__webpack_require__(2);function decrement(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative?a.precision=increment_1.increment(a.digits,0,a.precision,a.base):0===a.precision?(intUtils_1.setOne(a),a.isNegative=!0):a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),a}exports.decrement=decrement;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),double_1=__webpack_require__(16);function double(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.precision=double_1.double(a.digits,0,a.precision,a.base),a}exports.double=double;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var isEven_1=__webpack_require__(17);function isEven(a){return isEven_1.isEven(a.digits,0,a.precision,a.base)}exports.isEven=isEven;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(7),clone_1=__webpack_require__(1),intUtils_1=__webpack_require__(2);function setBase(a,b,c){if(void 0===c&&(c=!1),b=0|b,a.base===b)return c?a:clone_1.clone(a);if(b<constants_1.MIN_BASE)throw RangeError(b+\" < MIN_BASE (\"+constants_1.MIN_BASE+\")\");if(b>constants_1.MAX_BASE)throw RangeError(b+\" > MAX_BASE (\"+constants_1.MAX_BASE+\")\");return intUtils_1.changeBase(c?a:clone_1.clone(a),b)}exports.setBase=setBase;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),karatsubaSquare_1=__webpack_require__(18),longSquare_1=__webpack_require__(34);function square(a,b){if(void 0===b&&(b=!1),a=b?a:clone_1.clone(a),0===a.precision)return a;a.isNegative=!1;var c=2*a.precision-1;return a.digits.length<c&&(a.digits.length=c),a.precision=500>a.precision?longSquare_1.longSquare(a.digits,0,a.precision,a.base):karatsubaSquare_1.karatsubaSquare(a.digits,0,a.precision,a.base),a}exports.square=square;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var add_1=__webpack_require__(22),compare_1=__webpack_require__(8),clone_1=__webpack_require__(1),copy_1=__webpack_require__(4),negate_1=__webpack_require__(14),reverseSubtraction_1=__webpack_require__(35),subtraction_1=__webpack_require__(5),intUtils_1=__webpack_require__(2);function subtract(a,b,d){if(void 0===d&&(d=!1),a===b)return intUtils_1.setZero(d?a:{base:a.base});if(a=d?a:clone_1.clone(a),0===b.precision)return a;var e=a.base;if(0===a.precision)return a=copy_1.copy(a,b),a=negate_1.negate(a,!0),intUtils_1.changeBase(a,e);if(a.isNegative!==b.isNegative)return a=negate_1.negate(a,!0),a=add_1.add(a,b,!0),negate_1.negate(a,!0);intUtils_1.changeBase(a,b.base);var f=compare_1.compare(a,b);return 0===f?(a.base=e,intUtils_1.setZero(a)):(0>f?(negate_1.negate(a,!0),a.digits.length<b.precision&&(a.digits.length=b.precision),a.precision=reverseSubtraction_1.reverseSubtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base)):a.precision=subtraction_1.subtraction(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,e))}exports.subtract=subtract;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function max(c,d){return c<d?d:c}exports.max=max;function min(c,d){return c>d?d:c}exports.min=min;function strToDigits(c){if(c=c.trim(),1>c.length)throw new TypeError(\"NaN\");var d=\"-\"===c[0];if(c=c.replace(/^[-+]?0*/,\"\").replace(/\\.[0-9]+$/,\"\"),c.match(/[^\\d]/))throw new TypeError(\"NaN\");var e=c.length;if(0===e)return[[],!1];var f=Array(e);for(var g=0,h=e;0<h;++g)f[g]=0|c[--h];return[f,d]}exports.strToDigits=strToDigits;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var halve_1=__webpack_require__(11),karatsubaSquare_1=__webpack_require__(18),karatsubaMultiplication_1=__webpack_require__(13);function exponentiation(a,b,c,d,e,f,g,h){for(var i=1,j=[1];f+1<g||1<e[f];){var k=void 0;l=halve_1.halve(e,f,g,h),g=l[0],k=l[1],0<k&&(j.length=i+c,i=karatsubaMultiplication_1.karatsubaMultiplication(j,0,i,a,b,c,d)),c=karatsubaSquare_1.karatsubaSquare(a,b,c,d)}return 1<j.length&&(c=karatsubaMultiplication_1.karatsubaMultiplication(a,b,c,j,0,i,d)),c;var l}exports.exponentiation=exponentiation;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var basicDivision_1=__webpack_require__(15),arrayUtils_1=__webpack_require__(3),karatsubaMultiplication_1=__webpack_require__(13),steinGCD_1=__webpack_require__(21);function lcm(a,b,c,d,e,f,g){var h=c-b,i=Array(h);arrayUtils_1.copy(i,0,a,b,c);var j=f-e,k=Array(j);return arrayUtils_1.copy(k,0,d,e,f),l=steinGCD_1.steinGCD(i,0,h,k,0,j,g),i=l[0],h=l[2],m=basicDivision_1.basicDivision(a,b,c,i,0,h,g),i=m[0],h=m[2],h=karatsubaMultiplication_1.karatsubaMultiplication(i,0,h,d,e,f,g),[i,h];var l,m}exports.lcm=lcm;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(3),arrayUtils_2=__webpack_require__(3);function longMultiplication(c,d,e,f,g,h,j){var k=h-g,l=d+k;arrayUtils_2.safeShiftUp(c,d,e,k),arrayUtils_1.set(c,d,l,0);var m=e+k;for(var n=l;n<m;++n){var o=0,p=n-k;for(var q=g;q<h;++q){var r=c[n]*f[q]+c[p]+o;r<j?o=0:(o=0|r/j,r%=j),c[p++]=r}c[p]=o}return 0===c[m-1]?m-1:m}exports.longMultiplication=longMultiplication;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var arrayUtils_1=__webpack_require__(3),arrayUtils_2=__webpack_require__(3);function longSquare(a,b,c,e){var f=c-b;arrayUtils_2.unsafeShiftUp(a,b,c,f),arrayUtils_1.set(a,b,c,0),f+=c;for(var g=b,h=c;g<f;g+=2){var i=a[h++],j=0;a[g]+=i*i,a[g]>=e&&(j=0|a[g]/e,a[g]%=e);var k=g+1;for(var l=h;l<f;++k){var n=0,p=a[l++]*i;p>=e&&(n=0|p/e,p%=e),n<<=1,p<<=1,a[k]=a[k]+p+j,j=n,a[k]>=e&&(j+=0|a[k]/e,a[k]%=e)}a[k]=j}return 0===a[f-1]?f-1:f}exports.longSquare=longSquare;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function reverseSubtraction(a,b,c,d,e,f,g){for(var h=0;b<c;){var i=d[e++]-h-a[b];0>i?(h=1,i+=g):h=0,a[b++]=i}if(0<h){for(h=g-1;0===d[e];++e)a[b++]=h;a[b++]=d[e++]-1}if(e<f)do a[b++]=d[e++];while(e<f);else for(;0===a[b-1];)--b;return b}exports.reverseSubtraction=reverseSubtraction;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function setBase(a,b,c,d,e){if(c===b||d===e)return[a,c];var f=0,g=Array(Math.ceil((c-b)*Math.log(d)/Math.log(e)));do{var h=0;for(var j=c;j>b;h%=e)h=h*d+a[--j],a[j]=0|h/e;for(g[f++]=h;0===a[c-1];)if(--c===b)return[g,f]}while(!0)}exports.setBase=setBase;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function singleDigitDivision(b,c,d,e,f){var g=0;for(var h=d;h-->c;g%=e)g=g*f+b[h],b[h]=0|g/e;return 0===b[d-1]&&--d,[d,g]}exports.singleDigitDivision=singleDigitDivision;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1);function abs(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative=!1,a}exports.abs=abs;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(4),basicDivision_1=__webpack_require__(15),singleDigitDivision_1=__webpack_require__(37),intUtils_1=__webpack_require__(2);function divideAndRemainder(a,b,c){if(void 0===c&&(c=!1),0===b.precision)throw new EvalError(\"Divide by zero\");var d=c?a:clone_1.clone(a);if(a===b)return[d,intUtils_1.setZero({base:d.base})];if(0===d.precision)return[d,intUtils_1.setZero({base:d.base})];if(d.isNegative=d.isNegative!==b.isNegative,1===b.precision&&1===b.digits[0])return[d,intUtils_1.setZero({base:d.base})];if(1===d.precision&&1===d.digits[0])return[intUtils_1.setZero(d),intUtils_1.setOne({base:d.base})];var e=d.base;if(e!==b.base){var f=Math.log(b.base)/Math.log(e);if(d.precision<Math.ceil(b.precision*f)){var g=c?copy_1.copy({},d):d;return[intUtils_1.setZero({base:d.base}),g]}intUtils_1.changeBase(d,b.base)}if(d.precision<b.precision){d.base=e;var g=c?copy_1.copy({},d):d;return[intUtils_1.setZero({base:d.base}),g]}var h=intUtils_1.setOne({base:d.base});return 2>b.precision?(i=singleDigitDivision_1.singleDigitDivision(d.digits,0,d.precision,b.digits[0],d.base),d.precision=i[0],h.digits[0]=i[1],0===h.digits[0]&&intUtils_1.setZero(h)):(j=basicDivision_1.basicDivision(d.digits,0,d.precision,b.digits,0,b.precision,d.base),d.digits=j[0],h.digits=j[1],d.precision=j[2],h.precision=j[3]),intUtils_1.changeBase(d,e),intUtils_1.changeBase(h,e),[d,h];var i,j}exports.divideAndRemainder=divideAndRemainder;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(4),steinGCD_1=__webpack_require__(21),intUtils_1=__webpack_require__(2);function gcd(a,b,c){void 0===c&&(c=!1);var d=c?a:clone_1.clone(a);if(d.isNegative=!1,a===b||0===b.precision)return d;var e=d.base;return 0===d.precision?(copy_1.copy(d,b),d.isNegative=!1):(intUtils_1.changeBase(d,b.base),f=steinGCD_1.steinGCD(d.digits,0,d.precision,b.digits.slice(0,b.precision),0,b.precision,d.base),d.digits=f[0],d.precision=f[2]),intUtils_1.changeBase(d,e);var f}exports.gcd=gcd;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),decrement_1=__webpack_require__(24),halve_1=__webpack_require__(11),intUtils_1=__webpack_require__(2);function halve(a,b){void 0===b&&(b=!1);var c=intUtils_1.setZero({base:a.base});return(a=b?a:clone_1.clone(a),0===a.precision)?[a,c]:(d=halve_1.halve(a.digits,0,a.precision,a.base),a.precision=d[0],c.precision=d[1],0===c.precision)?[a,c]:(a.isNegative&&decrement_1.decrement(a,!0),[a,intUtils_1.setOne(c)]);var d}exports.halve=halve;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),decrement_1=__webpack_require__(10),increment_1=__webpack_require__(12);function increment(a,b){return void 0===b&&(b=!1),a=b?a:clone_1.clone(a),a.isNegative?(a.precision=decrement_1.decrement(a.digits,0,a.precision,a.base),0===a.precision&&(a.isNegative=!1)):a.precision=increment_1.increment(a.digits,0,a.precision,a.base),a}exports.increment=increment;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n\t'use strict';function isInteger(a){return a.hasOwnProperty('base')&&a.hasOwnProperty('digits')&&a.hasOwnProperty('precision')&&a.hasOwnProperty('isNegative')}exports.isInteger=isInteger;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),copy_1=__webpack_require__(4),lcm_1=__webpack_require__(32),intUtils_1=__webpack_require__(2);function lcm(a,b,c){void 0===c&&(c=!1);var d=c?a:clone_1.clone(a);if(d.isNegative=!1,a===b||0===a.precision||1===b.precision&&1===b.digits[0])return d;if(0===b.precision)return intUtils_1.setZero(d);var e=d.base;return 1===d.precision&&1===d.digits[0]?(copy_1.copy(d,b),d.isNegative=!1):(intUtils_1.changeBase(d,b.base),f=lcm_1.lcm(d.digits,0,d.precision,b.digits,0,b.precision,d.base),d.digits=f[0],d.precision=f[1]),intUtils_1.changeBase(d,e);var f}exports.lcm=lcm;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),compare_1=__webpack_require__(8);function max(a,b,c){return void 0===c&&(c=!1),a=0>compare_1.compare(a,b)?b:a,c?a:clone_1.clone(a)}exports.max=max;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),compare_1=__webpack_require__(8);function min(a,b,c){return void 0===c&&(c=!1),a=0<compare_1.compare(a,b)?b:a,c?a:clone_1.clone(a)}exports.min=min;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),square_1=__webpack_require__(28),karatsubaMultiplication_1=__webpack_require__(13),longMultiplication_1=__webpack_require__(33),singleDigitMultiplication_1=__webpack_require__(20),intUtils_1=__webpack_require__(2);function multiply(a,b,c){if(void 0===c&&(c=!1),a===b)return square_1.square(a,c);if(a=c?a:clone_1.clone(a),0===a.precision)return a;if(0===b.precision)return intUtils_1.setZero(a);a.isNegative=a.isNegative!==b.isNegative;var d=a.base;if(intUtils_1.changeBase(a,b.base),1===b.precision)return a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,a.precision,b.digits[0],a.base),intUtils_1.changeBase(a,d);if(1===a.precision){var e=a.digits[0];return a.digits=b.digits.slice(0,b.precision),a.precision=singleDigitMultiplication_1.singleDigitMultiplication(a.digits,0,b.precision,e,a.base),intUtils_1.changeBase(a,d)}var f=a.precision+b.precision-1;return a.digits.length<f&&(a.digits.length=f),a.precision=100>a.precision&&100>b.precision?longMultiplication_1.longMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base):karatsubaMultiplication_1.karatsubaMultiplication(a.digits,0,a.precision,b.digits,0,b.precision,a.base),intUtils_1.changeBase(a,d)}exports.multiply=multiply;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var clone_1=__webpack_require__(1),isEven_1=__webpack_require__(26),exponentiation_1=__webpack_require__(31),intUtils_1=__webpack_require__(2);function pow(a,b,c){void 0===c&&(c=!1);var d=c?a:clone_1.clone(a);if(0===b.precision)return intUtils_1.setOne(d);if(b.isNegative){if(0===d.precision)throw new EvalError(\"Divide by zero\");return intUtils_1.setZero(d)}return 0===d.precision?d:(d.isNegative=!(d.isNegative&&isEven_1.isEven(b)),1===d.precision&&1===d.digits[0])?d:(d.precision=exponentiation_1.exponentiation(d.digits,0,d.precision,d.base,b.digits.slice(0,b.precision),0,b.precision,b.base),d)}exports.pow=pow;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\t\"use strict\";function signum(a){return a.isNegative?-1:0===a.precision?0:1}exports.signum=signum;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(7),setBase_1=__webpack_require__(27),isInteger_1=__webpack_require__(43),intUtils_1=__webpack_require__(2),numUtils_1=__webpack_require__(30);function toInteger(a,b,c){if(void 0===b&&(b=null),void 0===c&&(c=!1),isInteger_1.isInteger(a))return setBase_1.setBase(a,null==b?a.base:b,c);if(\"number\"==typeof a)a=\"\"+a;else if(\"string\"!=typeof a)throw TypeError(\"Expecting type Integer | string | number\");var d=intUtils_1.setZero({base:10});return e=numUtils_1.strToDigits(a),d.digits=e[0],d.isNegative=e[1],d.precision=d.digits.length,setBase_1.setBase(d,null==b?constants_1.DEFAULT_BASE:b,!0);var e}exports.toInteger=toInteger;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var constants_1=__webpack_require__(7);function toString(a,b,c){void 0===b&&(b=null),void 0===c&&(c=null);var d=a.isNegative?\"-\":\"\";if(null==c){if(constants_1.CIPHER.length<a.base)return b=null==b?\":\":b,d+a.digits.slice(0,a.precision).reverse().join(b);c=constants_1.CIPHER}return b=null==b?\"\":b,d+a.digits.map(function(e){return c[e]}).reverse().join(b)}exports.toString=toString;\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";var Constants=__webpack_require__(7),abs_1=__webpack_require__(38),add_1=__webpack_require__(22),assign_1=__webpack_require__(23),compare_1=__webpack_require__(8),copy_1=__webpack_require__(4),decrement_1=__webpack_require__(24),divideAndRemainder_1=__webpack_require__(39),double_1=__webpack_require__(25),gcd_1=__webpack_require__(40),halve_1=__webpack_require__(41),increment_1=__webpack_require__(42),isEven_1=__webpack_require__(26),lcm_1=__webpack_require__(44),max_1=__webpack_require__(45),min_1=__webpack_require__(46),multiply_1=__webpack_require__(47),negate_1=__webpack_require__(14),pow_1=__webpack_require__(48),signum_1=__webpack_require__(49),setBase_1=__webpack_require__(27),subtract_1=__webpack_require__(29),square_1=__webpack_require__(28),toInteger_1=__webpack_require__(50),toString_1=__webpack_require__(51),BigInt=function(){function a(b){assign_1.assign(this,toInteger_1.toInteger(b,a.DEFAULT_BASE,!1)),this.digits.length=this.precision}return Object.defineProperty(a,\"MINUS_ONE\",{get:function get(){return new a(-1)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ZERO\",{get:function get(){return new a(0)},enumerable:!0,configurable:!0}),Object.defineProperty(a,\"ONE\",{get:function get(){return new a(1)},enumerable:!0,configurable:!0}),a.prototype.abs=function(b){return void 0===b&&(b=!1),a.toBigInt(abs_1.abs(this,b),!0)},a.prototype.add=function(b,c){void 0===c&&(c=!1);var d=add_1.add(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.clone=function(){return new a(this)},a.prototype.compareTo=function(b){return compare_1.compare(this,b)},a.prototype.copy=function(b){return copy_1.copy(this,b),this},a.prototype.divide=function(b,c){return void 0===c&&(c=!1),this.divideAndRemainder(b,c)[0]},a.prototype.divideAndRemainder=function(b,c){void 0===c&&(c=!1);var d,e;return f=divideAndRemainder_1.divideAndRemainder(this,b,c),d=f[0],e=f[1],d.digits.length=d.precision,e.digits.length=e.precision,[a.toBigInt(d,!0),assign_1.assign(a.ZERO,e)];var f},a.prototype.double=function(b){return void 0===b&&(b=!1),a.toBigInt(double_1.double(this,b),!0)},a.prototype.gcd=function(b,c){void 0===c&&(c=!1);var d=gcd_1.gcd(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.getBase=function(){return this.base},a.prototype.half=function(b){void 0===b&&(b=!1);var c,d;return e=halve_1.halve(this,b),c=e[0],d=e[1],c.digits.length=c.precision,[a.toBigInt(c,!0),new a(d.precision)];var e},a.isBigInt=function(b){return b instanceof a},a.prototype.isEven=function(){return isEven_1.isEven(this)},a.prototype.isOdd=function(){return!this.isEven()},a.prototype.lcm=function(b,c){void 0===c&&(c=!1);var d=lcm_1.lcm(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.max=function(b,c,d){return void 0===d&&(d=!1),a.toBigInt(max_1.max(b,c,d),!0)},a.min=function(b,c,d){return void 0===d&&(d=!1),a.toBigInt(min_1.min(b,c,d),!0)},a.prototype.minusminus=function(b){void 0===b&&(b=!1);var c=decrement_1.decrement(this,b);return c.digits.length=c.precision,a.toBigInt(c,!0)},a.prototype.multiply=function(b,c){void 0===c&&(c=!1);var d=multiply_1.multiply(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.negate=function(b){return void 0===b&&(b=!1),a.toBigInt(negate_1.negate(this,b),!0)},a.prototype.plusplus=function(b){return void 0===b&&(b=!1),a.toBigInt(increment_1.increment(this,b),!0)},a.prototype.pow=function(b,c){void 0===c&&(c=!1);var d=pow_1.pow(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.remainder=function(b,c){void 0===c&&(c=!1);var d=this.divideAndRemainder(b,c)[1];return c&&assign_1.assign(this,d),this},a.prototype.setBase=function(b,c){void 0===c&&(c=!1);var d=setBase_1.setBase(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.prototype.signum=function(){return signum_1.signum(this)},(a.prototype.square=function(b){void 0===b&&(b=!1);var c=square_1.square(this,b);return c.digits.length=c.precision,a.toBigInt(c,!0)},a.prototype.subtract=function(b,c){void 0===c&&(c=!1);var d=subtract_1.subtract(this,b,c);return d.digits.length=d.precision,a.toBigInt(d,!0)},a.toBigInt=function(b,c){return void 0===c&&(c=!1),a.isBigInt(b)&&c?b:new a(b)},a.prototype.toString=function(b,c){return void 0===b&&(b=null),void 0===c&&(c=null),toString_1.toString(this,b,c)},a)}();BigInt.MIN_BASE=Constants.MIN_BASE,BigInt.MAX_BASE=Constants.MAX_BASE,BigInt.DEFAULT_BASE=Constants.DEFAULT_BASE,BigInt.MAX_PRECISION=Constants.MAX_PRECISION,exports.BigInt=BigInt;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// big.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e4f6dae987e65efd75bb","export {BigInt as Int} from './oop/bigInt';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import {Integer} from '../integer';\nimport {copy} from './copy';\n\nexport function clone(A: Integer) : Integer {\n  return copy({}, A);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/clone.ts","import {Integer} from '../integer';\nimport {setBase} from '../algorithm/setBase';\n\nexport function changeBase(A: Integer, base: number): Integer {\n  [A.digits, A.precision] = setBase(\n    A.digits, 0, A.precision, A.base, base\n  );\n  A.base = base;\n  return A;\n}\n\nexport function setOne(A: any): Integer {\n  A.precision = 1;\n  A.digits = [1];\n  A.isNegative = false;\n  return A;\n}\n\nexport function setZero(A: any): Integer {\n  A.precision = 0;\n  A.digits = [];\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/intUtils.ts","\n//Assumes shifts >= max - min, shifts > 0\nexport function unsafeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = min + shifts; min < max; A[i++] = A[min++]){\n  }\n}\n\nexport function safeShiftUp(A: any[], min: number, max: number, shifts: number): void {\n  for(let i: number = max + shifts; max > min; A[--i] = A[--max]){\n  }\n}\n\n//Assumes A and B not same array or sections A and B do not intersect\nexport function copy<T>(to: T[], minTo: number, from: T[], minFrom: number, maxFrom: number): void {\n  while(minFrom < maxFrom){\n    to[minTo++] = from[minFrom++];\n  }\n}\n\n//Sets indices between [min, max) to v\nexport function set<T>(A: T[], min: number, max: number, v: T): void {\n  while(min < max){\n    A[min++] = v;\n  }\n}\n\nexport function printArr(A: any[], min: number, max: number, minSub: number = min, maxSub: number = max): string {\n  function format(A: any[]): any[] {\n    A.forEach((v: any, i: number, A: any[]) => {\n      if(v == null || v !== v){\n        A[i] = v + '';\n      }\n    });\n    return A;\n  }\n  return \"[\" +\n    format(A.slice(min,minSub)).join(', ') +\n    \"|\" + format(A.slice(minSub,maxSub)).join(', ') +\n    \"|\" + format(A.slice(maxSub,max)).join(', ') +\n  \"]\";\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/arrayUtils.ts","import {Integer} from '../integer';\nimport {assign} from './assign';\n\nexport function copy(target: any, source: Integer): Integer {\n  assign(target, source);\n  target.digits = target.digits.slice(0, target.precision);\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/copy.ts","import {decrement} from './decrement';\n\n/*\n  f(A, B) = A - B\n  Assumes\n     A >= B\n  Note\n     Overwrites A\n*/\nexport function subtraction(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n  let a: number = minA;\n  let borrow: number = 0;\n\n  //Subtract common digits\n  while(minB < maxB){\n    let v: number = A[a] - borrow - B[minB++];\n    if(v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[a++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    return decrement(A, a, maxA, base);\n  }\n\n  //Find new length\n  if(a === maxA){\n    while(a-- > minA && A[a] === 0){\n    }\n    maxA = a + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/subtraction.ts","import {increment} from './increment';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A.length >= B.length\n    A and B not same array or non-intersecting segments\n*/\nexport function addition(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number{\n  let carry: number = 0;\n\n  //Add common digits\n  while (minB < maxB){\n    let v: number = A[minA] + B[minB++] + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Return length\n  return (carry > 0) ? increment(A, minA, maxA, base) : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/addition.ts","export const MIN_BASE: number = 2;\nexport const MAX_BASE: number = 94906265; //2^26 < sqrt(Number.MAX_SAFE_INTEGER) < 2^27\nexport const DEFAULT_BASE: number = 94906264;\nexport const MAX_PRECISION: number = 4294967295; //2^32 - 1\nexport const CIPHER: ReadonlyArray<string> = Object.freeze([\n  '0','1','2','3','4','5','6','7','8','9',\n  'A','B','C','D','E','F','G','H','I','J',\n  'K','L','M','N','O','P','Q','R','S','T',\n  'U','V','W','X','Y','Z'\n]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants.ts","import {Integer} from '../integer';\nimport {changeBase} from '../util/intUtils';\nimport {compare as _compare} from '../algorithm/compare';\n\nexport function compare(A: Integer, B: Integer): number {\n\n  //If self\n  if(A === B){\n    return 0;\n  }\n\n  //Check if different signs\n  if(A.isNegative !== B.isNegative){\n    return (A.isNegative) ? -1 : 1;\n  }\n\n  const base: number = A.base;\n\n  //If not same base\n  if(A.base !== B.base){\n\n    //Estimate number of digits of A if converted to B's base\n    const ratio: number = Math.log(A.base) / Math.log(B.base);\n    if(Math.ceil(A.precision * ratio) > B.base){\n      return 1;\n    }\n    if(Math.ceil((A.precision + 1) * ratio) < B.precision){\n      return -1\n    }\n\n    //Convert A to B's base\n    changeBase(A, B.base);\n  }\n\n  //Compare A and B\n  const out: number = _compare(\n    A.digits, 0, A.precision,\n    B.digits, 0, B.precision\n  );\n\n  //Change A back to original base (if needed)\n  changeBase(A, base);\n\n  //Return result\n  return out;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/compare.ts","//Assumes valid inputs\n//Assumes numbers are in same base\nexport function compare(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number): number {\n\n  //Compare number of digits\n  const d: number = maxA - minA - maxB + minB;\n  if(d !== 0){\n    return d < 0 ? -1 : 1;\n  }\n\n  //Compare digits\n  while(maxA > minA){\n    if(A[--maxA] !== B[--maxB]){\n      return A[maxA] < B[maxB] ? -1 : 1;\n    }\n  }\n\n  //Numbers are equal\n  return 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/compare.ts","/*\n  f(A) = A - 1\n  Overwrites A\n  Assumes A > 0\n*/\nexport function decrement(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any borrows\n  for(const borrow = base - 1; A[minA] === 0; A[minA++] = borrow){\n  }\n\n  //Subtract one\n  A[minA] = A[minA] - 1;\n\n  //Return length\n  return (minA+1 === maxA && A[minA] === 0) ? maxA - 1 : maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/decrement.ts","/*\n  f(A) = A / 2\n  Overwrites A\n  Assumes A > 0\n*/\nexport function halve(A: number[], minA: number, maxA: number, base: number): [number, number] {\n\n  //Halve\n  let remainder: number = 0;\n  for(let i: number = maxA; i-- > minA; A[i] = A[i] >>> 1){\n    A[i] = A[i] + (base & -remainder);\n    remainder = A[i] & 1;\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/halve.ts","/*\n  f(A) = A + 1\n  Overwrites A\n  Assumes A >= 0\n*/\n\nexport function increment(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Deal with any carries\n  for(--base; minA < maxA && A[minA] === base; A[minA++] = 0){\n  }\n\n  //Add one\n  if(minA === maxA){\n    A[maxA++] = 1;\n  } else {\n    A[minA] = A[minA] + 1;\n  }\n\n  //Return length\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/increment.ts","import {addition} from './addition';\nimport {reverseAddition} from './reverseAddition';\nimport {subtraction} from './subtraction';\nimport {min, max} from '../util/numUtils';\nimport {copy, set, unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n  Explanation: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaMultiplication(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n  let halfLen: number = max(maxA - minA, maxB - minB);\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[minA] * B[minB];\n    if(halfLen < base){\n      A[maxA] = 0;\n    } else {\n      A[maxA++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[minA] = halfLen;\n    return maxA;\n  }\n\n  //Split the numbers in half\n  halfLen = (halfLen + 1) >>> 1;\n  const halfA: number = minA + halfLen;\n  const midA: number = min(halfA, maxA);\n  const midB: number = min(minB + halfLen, maxB);\n\n  //mediumB = lowB + highB\n  const mediumB: number[] = new Array(midB - minB + 1);\n  copy(mediumB, 0, B, minB, midB);\n  const mediumMaxB: number = addition(mediumB, 0, midB - minB, B, midB, maxB, base);\n\n  //medium = lowA + highA\n  const medium: number[] = new Array(midA - minA + 1 + mediumMaxB);\n  copy(medium, 0, A, minA, midA);\n  let mediumMax: number = addition(medium, 0, midA - minA, A, midA, maxA, base);\n\n  //medium = medium * mediumB\n  mediumMax = karatsubaMultiplication(medium, 0, mediumMax, mediumB, 0, mediumMaxB, base);\n\n  //Shift highA left\n  A[maxA] = 0;\n  unsafeShiftUp(A, midA, maxA, halfLen);\n\n  //lowA = lowA * lowB\n  const lowMax: number = karatsubaMultiplication(A, minA, midA, B, minB, midB, base);\n\n  //medium = medium - lowA\n  mediumMax = subtraction(medium, 0, mediumMax, A, minA, lowMax, base);\n\n  //A = medium*(base^halfLen) + lowA\n  if(midA === maxA || midB === maxB){\n    if(lowMax <= halfA){\n      maxA = halfA + mediumMax;\n      set(A, lowMax, halfA, 0);\n      copy(A, halfA, medium, 0, mediumMax);\n    } else if(mediumMax > lowMax - halfA){\n      maxA = reverseAddition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    } else {\n      maxA = addition(A, halfA, lowMax, medium, 0, mediumMax, base);\n    }\n    return maxA;\n  }\n\n  //Fill unused space with zero\n  set(A, lowMax, maxA, 0);\n\n  //highA = highA * highB\n  const highMin: number = midA + halfLen;\n  maxA = karatsubaMultiplication(A, highMin, maxA + halfLen, B, midB, maxB, base);\n\n  //medium = medium - highA\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, maxA, base);\n\n  //A = highA*(base^len) + medium*(base^halfLen) + lowA\n  maxA = addition(A, halfA, maxA, medium, 0, mediumMax, base);\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaMultiplication.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\n\nexport function negate(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n  A.isNegative = A.precision > 0 && !A.isNegative;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/negate.ts","import {compare} from './compare';\nimport {singleDigitMultiplication} from './singleDigitMultiplication';\nimport {subtraction} from './subtraction';\nimport {copy, set} from '../util/arrayUtils';\n\n/*\n  f(X, Y) = X / Y\n  Overwrites X\n  Assumes no leading zeros\n  Assumes X.length >= Y.length >= 2\n  See: http://cacr.uwaterloo.ca/hac/about/chap14.pdf\n\n  INPUT: positive integers x = (xn ··· x1x0)b, y = (yt ··· y1y0)b with n ≥ t ≥ 1, yt != 0\n  OUTPUT: the quotient q = (qn−t ··· q1q0)b and remainder r = (rt ··· r1r0)b such that x = qy + r, 0 ≤ r < y\n*/\nexport function basicDivision(X: number[], minX: number, maxX: number, Y: number[], minY: number, maxY: number, base: number): [number[], number[], number, number] {\n\n  //1. Initialize the quotient\n  const lenY: number = maxY - minY;\n  const nMt: number = maxX - minX - lenY;\n  const Q: number[] = new Array(nMt + 1);\n  set(Q, 0, nMt + 1, 0);\n\n  //2. While X ≥ Yb^(n−t)\n  let maxR: number = maxX;\n  while(compare(X, minX + nMt, maxR, Y, minY, maxY) >= 0){\n\n    //Q[n−t] ← Q[n−t] + 1\n    ++Q[nMt];\n\n    //x ← x − Bb^(n−t)\n    maxR = subtraction(X, minX + nMt, maxR, Y, minY, maxY, base);\n  }\n\n  //3. For i from n down to (t + 1)\n  const yt: number = Y[maxY-1];\n  const ytm1: number = Y[maxY-2];\n  const QY: number[] = new Array(lenY + 1);\n  for(let i: number = maxX - 1, iMt: number = nMt; iMt-- > 0; --i){\n\n    //3.1 If x[i] = y[t] then set q[i−t−1] ← b − 1; otherwise set q[i−t−1] ← (x[i]b + x[i−1]) / y[t]\n    //3.2 While q[i−t−1] * (y[t]b + y[t−1]) > x[i]b^2 + x[i−1]b + x[i−2]\n    Q[iMt] = divThreeHalvesByTwo(X[i], X[i-1], X[i-2], yt, ytm1, base);\n\n    //3.3 x ← x − q[i−t−1] * yb^(i−t−1)\n    //3.4 If x < 0 then set x ← x + yb^(i−t−1) and q[i−t−1] ← q[i−t−1] − 1\n    if(Q[iMt] === 0){\n      continue;\n    }\n    copy(QY, 0, Y, minY, maxY);\n    let maxQY: number = singleDigitMultiplication(QY, 0, lenY, Q[iMt], base);\n    if(compare(QY, 0, maxQY, X, minX + iMt, maxR) > 0){\n      --Q[iMt];\n      maxQY = subtraction(QY, 0, maxQY, Y, minY, maxY, base);\n    }\n    maxR = subtraction(X, minX + iMt, maxR, QY, 0, maxQY, base);\n  }\n\n  //4. r ← x\n  //Adjust length of remainder\n  while(maxR > minX && X[maxR - 1] === 0){\n    --maxR;\n  }\n\n  //5. Return(q,r)\n  return [Q, X, (Q[nMt] === 0) ? nMt : nMt + 1, maxR];\n}\n\n/*\n  See: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.565&rep=rep1&type=pdf\n*/\nfunction divThreeHalvesByTwo(a1: number, a2: number, a3: number, b1: number, b2: number, base: number): number {\n  let q: number = a1*base + a2;\n  let r: number = q % b1;\n  q = 0 | (q / b1);\n  r = r*base - q*b2 + a3;\n  if(r < 0){\n    r = r + b1*base + b2;\n    q = (r < 0) ? q - 2 : q - 1;\n  }\n  return q;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/basicDivision.ts","/*\nf(A) = A + A\nOverwrites A\n*/\nexport function double(A: number[], minA: number, maxA: number, base: number): number {\n\n  //Double\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] << 1) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 1;\n      v = v - base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add carry\n  if (carry > 0){\n    A[minA++] = 1;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/double.ts","export function isEven(A: number[], minA: number, maxA: number, base: number): boolean {\n\n  //If zero\n  if(minA === maxA){\n    return true;\n  }\n\n  //If even base\n  if((base & 1) === 0){\n    return (A[minA] & 1) === 0;\n  }\n\n  //If odd base\n  let xor: number = 0;\n  while(minA < maxA){\n    xor = xor ^ A[minA++];\n  }\n  return (xor & 1) === 0;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/isEven.ts","import {addition} from './addition';\nimport {subtraction} from './subtraction';\nimport {copy, set, unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n  Assumes A > 0\n  See: https://en.wikipedia.org/wiki/Karatsuba_algorithm\n*/\nexport function karatsubaSquare(A: number[], min: number, max: number, base: number): number {\n  let halfLen: number = max - min;\n\n  //Base case\n  if(halfLen < 2){\n    halfLen = A[min] * A[min];\n    if(halfLen < base){\n      A[max] = 0;\n    } else {\n      A[max++] = 0 | (halfLen / base);\n      halfLen = halfLen % base;\n    }\n    A[min] = halfLen;\n    return max;\n  }\n\n  //Split the number in half\n  halfLen = (halfLen + 1) >>> 1;\n  const mid: number = min + halfLen;\n\n  //medium = low + high\n  const medium: number[] = new Array(2*halfLen + 2);\n  copy(medium, 0, A, min, mid);\n  let mediumMax: number = addition(medium, 0, halfLen, A, mid, max, base);\n\n  //Shift high left\n  A[max] = 0;\n  unsafeShiftUp(A, mid, max, halfLen);\n\n  //low * low\n  const lowMax: number = karatsubaSquare(A, min, mid, base);\n\n  //Fill unused space with zero\n  set(A, lowMax, max, 0);\n\n  //high * high\n  const highMin = mid + halfLen;\n  max = karatsubaSquare(A, highMin, max + halfLen, base);\n\n  //medium = medium * medium - low - high\n  mediumMax = karatsubaSquare(medium, 0, mediumMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, min, lowMax, base);\n  mediumMax = subtraction(medium, 0, mediumMax, A, highMin, max, base);\n\n  //A = high*(base^len) + medium*(base ^ halfLen) + low\n  return addition(A, mid, max, medium, 0, mediumMax, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/karatsubaSquare.ts","import {addition} from './addition';\n\n/*\n  f(A, B) = A + B\n  Overwrites A\n  Assumes\n    A < B\n    A and B not overlapping array segments\n*/\nexport function reverseAddition(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number{\n\n  //Add extra digits to A\n  const newMaxB: number = minB - minA + maxA;\n  for(let b: number = newMaxB; b < maxB; A[maxA++] = B[b++]){\n  }\n\n  //Do normal addition\n  return addition(A, minA, maxA, B, minB, newMaxB, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseAddition.ts","/*\n  f(A,B) = A*B\n  Overwrites A\n  Assumes B > 0\n*/\nexport function singleDigitMultiplication(A: number[], minA: number, maxA: number, multiplier: number, base: number): number {\n\n  //Multiply multiplicand by multiplier\n  let carry: number = 0;\n  while(minA < maxA){\n    let v: number = (A[minA] * multiplier) + carry;\n    if(v < base){\n      carry = 0;\n    } else {\n      carry = 0 | (v / base);\n      v = v % base;\n    }\n    A[minA++] = v;\n  }\n\n  //Add remaining carry\n  if(carry > 0){\n    A[minA++] = carry;\n  }\n\n  //Return length\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitMultiplication.ts","import {compare} from './compare';\nimport {double} from './double';\nimport {halve} from './halve';\nimport {isEven} from './isEven';\nimport {subtraction} from './subtraction';\n\n/*\nf(A, B) = GCD(A, B)\nOverwrites A, B\nExpects A > 0, B > 0\nSee: https://en.wikipedia.org/wiki/Binary_GCD_algorithm\n*/\nexport function steinGCD(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number, number] {\n\n  //Count and remove common factors of 2\n  let shifts: number = 0;\n  while(isEven(A, minA, maxA, base) && isEven(B, minB, maxB, base)){\n    [maxA] = halve(A, minA, maxA, base);\n    [maxB] = halve(B, minB, maxB, base);\n    ++shifts;\n  }\n\n  //Remove extra factors of 2 in A\n  while(isEven(A, minA, maxA, base)){\n    [maxA] = halve(A, minA, maxA, base);\n  }\n\n  //A will always be odd from now on\n  do {\n\n    //Remove extra factors of 2 in B\n    while(isEven(B, minB, maxB, base)){\n      [maxB] = halve(B, minB, maxB, base);\n    }\n\n    //B is now odd\n    //Compare A and B\n    let c: number = compare(A, minA, maxA, B, minB, maxB);\n\n    //End loop iff B - A === 0\n    if(c === 0){\n      break;\n    }\n\n    //Switch A and B iff A > B\n    if(c > 0){\n      const C: number[] = A;\n      A = B;\n      B = C;\n      c = minA;\n      minA = minB;\n      minB = c;\n      c = maxA;\n      maxA = maxB;\n      maxB = c;\n    }\n\n    //B = B - A\n    maxB = subtraction(B, minB, maxB, A, minA, maxA, base);\n\n    //B is now even since B and A were both odd\n    [maxB] = halve(B, minB, maxB, base);\n  } while (true);\n\n  //Restore common factors of 2 (A = A << shifts)\n  while(shifts-- > 0){\n    maxA = double(A, minA, maxA, base);\n  }\n\n  return [A, minA, maxA];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/steinGCD.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {double} from './double';\nimport {negate} from './negate';\nimport {subtract} from './subtract';\nimport {addition} from '../algorithm/addition';\nimport {reverseAddition} from '../algorithm/reverseAddition';\nimport {changeBase} from '../util/intUtils';\n\nexport function add(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n\n  //If self\n  if(A === B){\n    return double(A, isMutable);\n  }\n\n  A = (isMutable) ? A : clone(A);\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If C is zero\n  if(A.precision === 0){\n    A = copy(A, B);\n    return changeBase(A, base);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, subtract, change sign again\n    A = negate(A, true);\n    A = subtract(A, B, true);\n    A = negate(A, true);\n\n  //If C < B\n} else if(A.precision < B.precision){\n\n    //Update C's digit array to minimum result size\n    if(A.digits.length <= B.precision){\n      A.digits.length = B.precision;\n    }\n\n    //Add\n    A.precision = reverseAddition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A >= B\n  } else {\n\n    //Add\n    A.precision = addition(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  //Change A back to original base\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/add.ts","import {Integer} from '../integer';\n\nexport function assign(target: any, source: Integer): Integer {\n  target.base = source.base;\n  target.digits = source.digits;\n  target.precision = source.precision;\n  target.isNegative = source.isNegative;\n  return target;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/assign.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {decrement as _decrement} from '../algorithm/decrement';\nimport {increment} from '../algorithm/increment';\nimport {setOne} from '../util/intUtils';\n\nexport function decrement(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n  \n  //If negative\n  if(A.isNegative){\n    A.precision = increment(A.digits, 0, A.precision, A.base);\n\n  //If zero\n} else if (A.precision === 0){\n    setOne(A);\n    A.isNegative = true;\n\n  //If positive\n  } else {\n    A.precision = _decrement(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/decrement.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {double as _double} from '../algorithm/double';\n\nexport function double(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n  A.precision = _double(A.digits, 0, A.precision, A.base);\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/double.ts","import {Integer} from '../integer';\nimport {isEven as _isEven} from '../algorithm/isEven';\n\nexport function isEven(A: Integer): boolean {\n  return _isEven(A.digits, 0, A.precision, A.base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isEven.ts","import {MIN_BASE, MAX_BASE} from '../constants';\nimport {Integer} from '../integer';\nimport {clone} from './clone';\nimport {changeBase} from '../util/intUtils';\n\nexport function setBase(A: Integer, base: number, isMutable: boolean = false): Integer {\n\n  //Sanitize base\n  base = 0 | base;\n\n  //Check if already in base\n  if(A.base === base){\n    return (isMutable) ? A : clone(A);\n  }\n\n  //If new base too low\n  if(base < MIN_BASE){\n    throw RangeError(base + \" < MIN_BASE (\" + MIN_BASE + \")\");\n  }\n\n  //If new base too high\n  if(base > MAX_BASE){\n    throw RangeError(base + \" > MAX_BASE (\" + MAX_BASE + \")\");\n  }\n\n  //Convert to base\n  return changeBase((isMutable) ? A : clone(A), base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/setBase.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {karatsubaSquare} from '../algorithm/karatsubaSquare';\nimport {longSquare} from '../algorithm/longSquare';\n\nexport function square(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n\n  //If zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //Make positive\n  A.isNegative = false;\n\n  //Make minimum room for squaring\n  const maxNewLen: number = 2*A.precision - 1;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 500){\n    A.precision = longSquare(A.digits, 0, A.precision, A.base);\n  } else {\n    A.precision = karatsubaSquare(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/square.ts","import {Integer} from '../integer';\nimport {add} from './add';\nimport {compare} from './compare';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {negate} from './negate';\nimport {reverseSubtraction} from '../algorithm/reverseSubtraction';\nimport {subtraction} from '../algorithm/subtraction';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function subtract(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n\n  //If subtracting itself\n  if(A === B){\n    return setZero((isMutable) ? A : {base: A.base});\n  }\n\n  A = (isMutable) ? A : clone(A);\n\n  //If B is zero\n  if(B.precision === 0){\n    return A;\n  }\n\n  const base: number = A.base;\n\n  //If A is zero\n  if(A.precision === 0){\n\n    //Copy B\n    A = copy(A, B);\n    A = negate(A, true);\n    return changeBase(A, base);\n  }\n\n  //If signs differ\n  if(A.isNegative !== B.isNegative){\n\n    //Change sign, add, change sign again\n    A = negate(A, true);\n    A = add(A, B, true);\n    return negate(A, true);\n  }\n\n  //Normalize to B's base\n  changeBase(A, B.base);\n\n  //Compare A and B\n  const c: number = compare(A, B);\n\n  //If A == B\n  if(c === 0){\n    A.base = base;\n    return setZero(A);\n  }\n\n  //If A < B\n  if(c < 0){\n\n    //Switch sign\n    negate(A, true);\n\n    //Make room for subtraction\n    if(A.digits.length < B.precision){\n      A.digits.length = B.precision;\n    }\n\n    //Subtract\n    A.precision = reverseSubtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n\n  //If A > B\n  } else {\n    A.precision = subtraction(\n      A.digits, 0, A.precision,\n      B.digits, 0, B.precision,\n      A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/subtract.ts","export function max(a: number, b: number): number {\n  return (a < b) ? b : a;\n}\n\nexport function min(a: number, b: number): number {\n  return (a > b) ? b : a;\n}\n\nexport function strToDigits(s: String): [number[], boolean] {\n  s = s.trim();\n\n  //Check if empty string\n  if(s.length < 1){\n    throw new TypeError(\"NaN\");\n  }\n\n  //Check for leading sign\n  const isNegative: boolean = s[0] === '-';\n\n  //Trim signs, leading zeros and decimal part\n  s = s.replace(/^[-+]?0*/, '').replace(/\\.[0-9]+$/, '');\n\n  //Check if string is not a number\n  if(s.match(/[^\\d]/)){\n    throw new TypeError(\"NaN\");\n  }\n\n  //If zero\n  const precision: number = s.length;\n  if(precision === 0){\n    return [[], false];\n  }\n\n  //Convert to decimal array\n  const digits: number[] = new Array<number>(precision);\n  for(let i = 0, j = precision; j > 0; ++i){\n    digits[i] = 0 | <any>s[--j];\n  }\n\n  return [digits, isNegative];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/numUtils.ts","import {halve} from './halve';\nimport {karatsubaSquare} from './karatsubaSquare';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\n\n/*\n  f(A, B) = A^B = Math.pow(A, B)\n  Overwrites A\n  Overwrites B\n  Assumes A > 0\n  Assumes B > 0\n*/\nexport function exponentiation(A: number[], minA: number, maxA: number, baseA: number, B: number[], minB: number, maxB: number, baseB: number): number {\n  let maxC: number = 1;\n  const C: number[] = [1];\n\n  //Until power is 1\n  while(minB + 1 < maxB || B[minB] > 1){\n\n    //Divide the power in half\n    let remainder: number;\n    [maxB, remainder] = halve(B, minB, maxB, baseB);\n\n    //If remainder\n    if(remainder > 0){\n      C.length = maxC + maxA;\n      maxC = karatsubaMultiplication(C, 0, maxC, A, minA, maxA, baseA);\n    }\n\n    //Square the base\n    maxA = karatsubaSquare(A, minA, maxA, baseA);\n  }\n\n  if(C.length > 1){\n    maxA = karatsubaMultiplication(A, minA, maxA, C, 0, maxC, baseA);\n  }\n\n  return maxA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/exponentiation.ts","import {basicDivision} from './basicDivision';\nimport {copy} from '../util/arrayUtils';\nimport {karatsubaMultiplication} from './karatsubaMultiplication';\nimport {steinGCD} from './steinGCD';\n\n/*\n  f(A, B) = lcm(A, B)\n  Overwrites A\n  Asumes A > 0, B > 0\n  See: https://en.wikipedia.org/wiki/Least_common_multiple\n*/\nexport function lcm(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): [number[], number] {\n\n  //Copy A\n  let maxC: number = maxA - minA;\n  let C: number[] = new Array(maxC);\n  copy(C, 0, A, minA, maxA);\n\n  //Copy B\n  const maxD: number = maxB - minB;\n  const D: number[] = new Array(maxD);\n  copy(D, 0, B, minB, maxB);\n\n  //Get gcd(A, B)\n  [C,,maxC] = steinGCD(C, 0, maxC, D, 0, maxD, base);\n  [C,,maxC] = basicDivision(A, minA, maxA, C, 0, maxC, base);\n  maxC = karatsubaMultiplication(C, 0, maxC, B, minB, maxB, base);\n  return [C, maxC];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/lcm.ts","import {set} from '../util/arrayUtils';\nimport {safeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A, B) = A * B\n  Overwrites A\n  Assumes A > 0 and B > 0\n  Assumes A and B are not the same array\n\n  Explanation:\n      a  b  c  _  _  _\n    *\n      d  e  f\n    ------------------\n              cd ce cf\n           bd be bf\n        ad ae af\n    ------------------\n      g  h  i  j  k  l\n\n*/\nexport function longMultiplication(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n\n  //Shift A to the left\n  const lenB: number = maxB - minB;\n  const minC: number = minA + lenB;\n  safeShiftUp(A, minA, maxA, lenB);\n  set(A, minA, minC, 0);\n\n  //For each digit in multiplicand\n  const maxC: number = maxA + lenB;\n  for(let a: number = minC; a < maxC; ++a){\n    let carry: number = 0;\n    let i: number = a - lenB;\n\n    //Multiply by multiplier\n    for(let b: number = minB; b < maxB; ++b){\n      let v: number = A[a] * B[b] + A[i] + carry;\n      if(v < base){\n        carry = 0;\n      } else {\n        carry = 0 | (v / base);\n        v = v % base;\n      }\n      A[i++] = v;\n    }\n\n    //Add remaining carry\n    A[i] = carry;\n  }\n\n  //Return new length\n  return (A[maxC - 1] === 0) ? maxC - 1 : maxC;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longMultiplication.ts","import {set} from '../util/arrayUtils';\nimport {unsafeShiftUp} from '../util/arrayUtils';\n\n/*\n  f(A) = A * A\n  Overwrites A\n\n  Explanation:\n      a   b   c   d   e   f   g   _   _   _   _   _   _   _\n    *\n      a   b   c   d   e   f   g\n    -------------------------------------------------------\n                                 ag  bg  cg  dg  eg  fg  gg\n                             af  bf  cf  df  ef  ff  fg\n                         ae  be  ce  de  ee  ef  eg\n                     ad  bd  cd  dd  de  df  dg\n                 ac  bc  cc  cd  ce  cf  cg\n             ab  bb  bc  bd  be  bf  bg\n         aa  ab  ac  ad  ae  af  ag\n    -------------------------------------------------------\n                                2ag 2bg 2cg 2dg 2eg 2fg  gg\n                            2af 2bf 2cf 2df 2ef  ff\n                        2ae 2be 2ce 2de  ee\n                    2ad 2bd 2cd  dd\n                2ac 2bc  cc\n            2ab  bb\n         aa\n    -------------------------------------------------------\n      h   i   j   k   l   m   n   o   p   q   r   s   t   u\n*/\nexport function longSquare(A: number[], min: number, max: number, base: number): number {\n\n  //Move digits to the left\n  let newMax: number = max - min;\n  unsafeShiftUp(A, min, max, newMax);\n  set(A, min, max, 0);\n\n  //For every digit\n  newMax = newMax + max;\n  for(let d: number = min, s: number = max; d < newMax; d = d + 2){\n    const digit: number = A[s++];\n\n    //Square the digit\n    let carry: number = 0;\n    A[d] = A[d] + digit * digit;\n    if(A[d] >= base){\n      carry = 0 | (A[d] / base);\n      A[d] = A[d] % base;\n    }\n\n    //Multiply by higher digits twice\n    let o: number = d + 1;\n    for(let m: number = s; m < newMax; ++o){\n\n      //Multiply\n      let quotient: number = 0;\n      let product: number = A[m++] * digit;\n      if(product >= base){\n        quotient = 0 | (product / base);\n        product = product % base;\n      }\n\n      //Double\n      quotient = quotient << 1;\n      product = product << 1;\n\n      //Add\n      A[o] = A[o] + product + carry;\n      carry = quotient;\n      if(A[o] >= base){\n        carry = carry + (0 | (A[o] / base));\n        A[o] = A[o] % base;\n      }\n    }\n\n    //Place remaining carry\n    A[o] = carry;\n  }\n\n  //Return new length\n  return A[newMax - 1] === 0 ? newMax - 1 : newMax;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/longSquare.ts","/*\n  f(A, B) = A - B\n  Overwrites A\n  Assumes B > A\n*/\nexport function reverseSubtraction(A: number[], minA: number, maxA: number, B: number[], minB: number, maxB: number, base: number): number {\n\n  //Subtract common digits\n  let borrow: number = 0;\n  while(minA < maxA){\n    let v: number = B[minB++] - borrow - A[minA];\n    if (v < 0){\n      borrow = 1;\n      v = v + base;\n    } else {\n      borrow = 0;\n    }\n    A[minA++] = v;\n  }\n\n  //Subtract borrow\n  if(borrow > 0){\n    for(borrow = base - 1; B[minB] === 0; ++minB){\n      A[minA++] = borrow;\n    }\n    A[minA++] = B[minB++] - 1;\n  }\n\n  //Copy extra digits\n  if(minB < maxB){\n    do {\n      A[minA++] = B[minB++];\n    } while (minB < maxB);\n\n  //Check for new length\n  } else {\n    while(A[minA-1] === 0){\n      --minA;\n    }\n  }\n\n  return minA;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/reverseSubtraction.ts","//Assumes valid inputs\nexport function setBase(A: number[], minA: number, maxA: number, curBase: number, newBase: number): [number[], number] {\n\n  //If zero or same base\n  if(maxA === minA || curBase === newBase){\n    return [A, maxA];\n  }\n\n  //Create new array\n  let maxB: number = 0;\n  const B: number[] = new Array(Math.ceil(\n    (maxA - minA) * Math.log(curBase) / Math.log(newBase)\n  ));\n\n  //Return number in newBase\n  do {\n    let remainder: number = 0;\n    for(let i: number = maxA; i > minA; remainder = remainder % newBase){\n      remainder = remainder*curBase + A[--i];\n      A[i] = 0 | (remainder / newBase);\n    }\n    B[maxB++] = remainder;\n    while(A[maxA - 1] === 0){\n      if(--maxA === minA){\n        return [B, maxB];\n      }\n    }\n  } while(true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/setBase.ts","/*\n  f(A, B) = A / B\n  Overwrites A\n  Assumes B > 0\n  Assumes A > 0\n  Assumes no leading zeros\n*/\nexport function singleDigitDivision(A: number[], minA: number, maxA: number, B: number, base: number): [number, number] {\n  let remainder: number = 0;\n  for(let a: number = maxA; a-- > minA; remainder = remainder % B){\n    remainder = remainder * base + A[a];\n    A[a] = 0 | (remainder / B);\n  }\n\n  //Get new length\n  if(A[maxA - 1] === 0){\n    --maxA;\n  }\n\n  return [maxA, remainder];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/algorithm/singleDigitDivision.ts","import {Integer} from '../integer';\nimport {clone} from '../functional/clone';\n\nexport function abs(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n  A.isNegative = false;\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/abs.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {basicDivision} from '../algorithm/basicDivision';\nimport {singleDigitDivision} from '../algorithm/singleDigitDivision';\nimport {changeBase, setOne, setZero} from '../util/intUtils';\n\nexport function divideAndRemainder(A: Integer, B: Integer, isMutable: boolean = false): [Integer, Integer] {\n\n  //If A / 0\n  if(B.precision === 0){\n    throw new EvalError(\"Divide by zero\");\n  }\n\n  let C: Integer = (isMutable) ? A : clone(A);\n\n  //If self\n  if(A === B){\n    return [C, setZero({base: C.base})];\n  }\n\n  //If 0 / B\n  if(C.precision === 0){\n    return [C, setZero({base: C.base})];\n  }\n\n  //Divide signs\n  C.isNegative = C.isNegative !== B.isNegative;\n\n  //If B = 1\n  if(B.precision === 1 && B.digits[0] === 1){\n    return [C, setZero({base: C.base})];\n  }\n\n  //If C = 1\n  if(C.precision === 1 && C.digits[0] === 1){\n    return [setZero(C), setOne({base: C.base})];\n  }\n\n  //If different bases\n  const base: number = C.base;\n  if(base !== B.base){\n\n    //If C's length < the least possible length of B if converted to C's base\n    const ratio: number = Math.log(B.base) / Math.log(base);\n    if(C.precision < Math.ceil(B.precision * ratio)){\n      const remainder: Integer = (isMutable) ? copy({}, C) : C;\n      return [setZero({base: C.base}), remainder];\n    }\n\n    //Normalize bases\n    changeBase(C, B.base);\n  }\n\n  //If C's length < B's length\n  if(C.precision < B.precision){\n    C.base = base;\n    const remainder: Integer = (isMutable) ? copy({}, C) : C;\n    return [setZero({base: C.base}), remainder];\n  }\n\n  //Choose best algorithm\n  let R: Integer = setOne({base: C.base});\n  if(B.precision < 2){\n    [C.precision, R.digits[0]] = singleDigitDivision(\n      C.digits, 0, C.precision, B.digits[0], C.base\n    );\n    if(R.digits[0] === 0){\n      setZero(R);\n    }\n  } else {\n    [\n      C.digits, R.digits, C.precision, R.precision\n    ] = basicDivision(\n      C.digits, 0, C.precision, B.digits, 0, B.precision, C.base\n    );\n  }\n\n  //Return C and R\n  changeBase(C, base);\n  changeBase(R, base);\n  return [C, R];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/divideAndRemainder.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {steinGCD} from '../algorithm/steinGCD';\nimport {changeBase} from '../util/intUtils';\n\nexport function gcd(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  const C: Integer = (isMutable) ? A : clone(A);\n\n  //Make C positive\n  C.isNegative = false;\n\n  //If GCD of self or B = 0\n  if(A === B || B.precision === 0){\n    return C;\n  }\n\n  const base: number = C.base;\n\n  //If C = 0\n  if(C.precision === 0){\n    copy(C, B);\n    C.isNegative = false;\n\n  //If |C| > 0 && |B| > 0\n  } else {\n\n    //Normalize the bases\n    changeBase(C, B.base);\n\n    //Calculate GCD\n    [C.digits,,C.precision] = steinGCD(\n      C.digits, 0, C.precision, B.digits.slice(0, B.precision), 0, B.precision, C.base\n    );\n  }\n\n  //Return C to original base\n  return changeBase(C, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/gcd.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {decrement} from './decrement';\nimport {halve as _halve} from '../algorithm/halve';\nimport {setZero, setOne} from '../util/intUtils';\n\nexport function halve(A: Integer, isMutable: boolean = false): [Integer, Integer] {\n  const remainder: Integer = setZero({base: A.base});\n  A = (isMutable) ? A : clone(A);\n\n  //If zero\n  if(A.precision === 0){\n    return [A, remainder];\n  }\n\n  //Halve\n  [A.precision, remainder.precision] = _halve(A.digits, 0, A.precision, A.base);\n\n  //If no remainder\n  if(remainder.precision === 0){\n    return [A, remainder];\n  }\n\n  //If remainder and C is negative\n  if(A.isNegative){\n\n    //Round down (e.g. Math.floor(-49.5) = -50)\n    decrement(A, true);\n  }\n\n  return [A, setOne(remainder)];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/halve.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {decrement} from '../algorithm/decrement';\nimport {increment as _increment} from '../algorithm/increment';\n\n\nexport function increment(A: Integer, isMutable: boolean = false): Integer {\n  A = (isMutable) ? A : clone(A);\n\n  //If negative\n  if(A.isNegative){\n    A.precision = decrement(A.digits, 0, A.precision, A.base);\n\n    //If now zero\n    if(A.precision === 0){\n      A.isNegative = false;\n    }\n\n  //If positive\n  } else {\n    A.precision = _increment(A.digits, 0, A.precision, A.base);\n  }\n\n  return A;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/increment.ts","import {Integer} from '../integer';\n\nexport function isInteger(A: any): A is Integer {\n  return A.hasOwnProperty('base')\n  && A.hasOwnProperty('digits')\n  && A.hasOwnProperty('precision')\n  && A.hasOwnProperty('isNegative');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/isInteger.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {copy} from './copy';\nimport {lcm as _lcm} from '../algorithm/lcm';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function lcm(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  const C: Integer = (isMutable) ? A : clone(A);\n\n  //Make C positive\n  C.isNegative = false;\n\n  //If LCM of self or A = 0 or B = 1\n  if(A === B || A.precision === 0 || (B.precision === 1 && B.digits[0] === 1)){\n    return C;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(C);\n  }\n\n  const base: number = C.base;\n\n  //If C = 1\n  if(C.precision === 1 && C.digits[0] === 1){\n    copy(C, B);\n    C.isNegative = false;\n\n  //If C > 1 and B > 1\n  } else {\n\n    //Normalize bases\n    changeBase(C, B.base);\n\n    //Calculate LCM\n    [C.digits, C.precision] = _lcm(\n      C.digits, 0, C.precision, B.digits, 0, B.precision, C.base\n    );\n  }\n\n  //Change C to original base\n  return changeBase(C, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/lcm.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {compare} from './compare';\n\nexport function max(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  A = (compare(A, B) < 0) ? B : A;\n  return (isMutable) ? A : clone(A);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/max.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {compare} from './compare';\n\nexport function min(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  A = (compare(A, B) > 0) ? B : A;\n  return (isMutable) ? A : clone(A);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/min.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {square} from './square';\nimport {karatsubaMultiplication} from '../algorithm/karatsubaMultiplication';\nimport {longMultiplication} from '../algorithm/longMultiplication';\nimport {singleDigitMultiplication} from '../algorithm/singleDigitMultiplication';\nimport {changeBase, setZero} from '../util/intUtils';\n\nexport function multiply(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n\n  //If self\n  if(A === B){\n    return square(A, isMutable);\n  }\n\n  A = (isMutable) ? A : clone(A);\n\n  //If A is zero\n  if(A.precision === 0){\n    return A;\n  }\n\n  //If B is zero\n  if(B.precision === 0){\n    return setZero(A);\n  }\n\n  //Multiply signs\n  A.isNegative = A.isNegative !== B.isNegative;\n\n  //Normalize to B's base\n  const base: number = A.base;\n  changeBase(A, B.base);\n\n  //If B is single digit\n  if(B.precision === 1){\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, A.precision, B.digits[0], A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //If C is single digit\n  if(A.precision === 1){\n    const multiplicand: number = A.digits[0];\n    A.digits = B.digits.slice(0, B.precision);\n    A.precision = singleDigitMultiplication(\n      A.digits, 0, B.precision, multiplicand, A.base\n    );\n    return changeBase(A, base);\n  }\n\n  //Make minimum room for multiplication\n  const maxNewLen: number = A.precision + B.precision - 1;\n  if(A.digits.length < maxNewLen){\n    A.digits.length = maxNewLen;\n  }\n\n  //Choose best performing algorithm\n  if(A.precision < 100 && B.precision < 100){\n    A.precision = longMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  } else {\n    A.precision = karatsubaMultiplication(\n      A.digits, 0, A.precision, B.digits, 0, B.precision, A.base\n    );\n  }\n\n  return changeBase(A, base);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/multiply.ts","import {Integer} from '../integer';\nimport {clone} from './clone';\nimport {isEven} from './isEven';\nimport {exponentiation} from '../algorithm/exponentiation';\nimport {setOne, setZero} from '../util/intUtils';\n\nexport function pow(A: Integer, B: Integer, isMutable: boolean = false): Integer {\n  const C: Integer = (isMutable) ? A : clone(A);\n\n  //C^0 = 1\n  if(B.precision === 0){\n    return setOne(C);\n  }\n\n  //If power is negative\n  if(B.isNegative){\n\n    //If 1 / 0\n    if(C.precision === 0){\n      throw new EvalError(\"Divide by zero\");\n    }\n\n    return setZero(C);\n  }\n\n  //0^B = zero\n  if(C.precision === 0){\n    return C;\n  }\n\n  //If negative base and even power\n  C.isNegative = !(C.isNegative && isEven(B));\n\n  //1^B = 1\n  if(C.precision === 1 && C.digits[0] === 1){\n    return C;\n  }\n\n  //C = C^B\n  C.precision = exponentiation(\n    C.digits, 0, C.precision, C.base, B.digits.slice(0,B.precision), 0, B.precision, B.base\n  );\n\n  return C;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/pow.ts","import {Integer} from '../integer';\n\nexport function signum(A: Integer): number {\n  return A.isNegative ? -1 : A.precision === 0 ? 0 : 1;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/signum.ts","import {DEFAULT_BASE} from '../constants';\nimport {Integer} from '../integer';\nimport {setBase} from './setBase';\nimport {isInteger} from './isInteger';\nimport {setZero} from '../util/intUtils';\nimport {strToDigits} from '../util/numUtils';\n\nexport function toInteger(A: Integer | number | string, base: number = null, isMutable: boolean = false): Integer {\n\n  //If already an integer\n  if(isInteger(A)){\n    return setBase(A, (base == null) ? A.base : base, isMutable);\n  }\n\n  //Convert numbers to string\n  if(typeof A === \"number\"){\n    A = '' + A;\n\n  //If not an expected type\n  } else if(typeof A !== \"string\"){\n    throw TypeError(\"Expecting type Integer | string | number\");\n  }\n\n  //Convert string to base 10\n  const B: Integer = setZero({base: 10});\n  [B.digits, B.isNegative] = strToDigits(A);\n  B.precision = B.digits.length;\n\n  //Convert to chosen base\n  return setBase(B, (base == null) ? DEFAULT_BASE : base, true);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toInteger.ts","import {CIPHER} from '../constants';\nimport {Integer} from '../integer';\n\n//Assumes input cipher is adequate for base\nexport function toString(A: Integer, sep: string = null, cipher: ReadonlyArray<string> = null): string {\n\n  //If negative\n  const sign: string = A.isNegative ? \"-\" : \"\";\n\n  //If no custom cipher\n  if(cipher == null){\n\n    //If default cipher too small for base\n    if(CIPHER.length < A.base){\n\n      //Print without cipher\n      sep = (sep == null) ? \":\": sep;\n      return sign + A.digits.slice(0,A.precision).reverse().join(sep);\n    }\n\n    //Use default cipher\n    cipher = CIPHER;\n  }\n\n  //Print with cipher\n  sep = (sep == null) ? \"\" : sep;\n  return sign + A.digits.map(v => cipher[v]).reverse().join(sep);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/functional/toString.ts","import * as Constants from '../constants';\nimport {Integer} from '../integer';\nimport {abs} from '../functional/abs';\nimport {add} from '../functional/add';\nimport {assign} from '../functional/assign';\nimport {compare} from '../functional/compare';\nimport {copy} from '../functional/copy';\nimport {decrement} from '../functional/decrement';\nimport {divideAndRemainder} from '../functional/divideAndRemainder';\nimport {double} from '../functional/double';\nimport {gcd} from '../functional/gcd';\nimport {halve} from '../functional/halve';\nimport {increment} from '../functional/increment';\nimport {isEven} from '../functional/isEven';\nimport {lcm} from '../functional/lcm';\nimport {max} from '../functional/max';\nimport {min} from '../functional/min';\nimport {multiply} from '../functional/multiply';\nimport {negate} from '../functional/negate';\nimport {pow} from '../functional/pow';\nimport {signum} from '../functional/signum';\nimport {setBase} from '../functional/setBase';\nimport {subtract} from '../functional/subtract';\nimport {square} from '../functional/square';\nimport {toInteger} from '../functional/toInteger';\nimport {toString} from '../functional/toString';\n\nexport class BigInt {\n\n  public static readonly MIN_BASE: number = Constants.MIN_BASE;\n  public static readonly MAX_BASE: number = Constants.MAX_BASE;\n  public static readonly DEFAULT_BASE: number = Constants.DEFAULT_BASE;\n  public static readonly MAX_PRECISION: number = Constants.MAX_PRECISION;\n\n  public static get MINUS_ONE(): BigInt {return new BigInt(-1)};\n  public static get ZERO(): BigInt {return new BigInt(0)};\n  public static get ONE(): BigInt {return new BigInt(1)};\n\n  public base: number;\n  public digits: number[];\n  public precision: number;\n  public isNegative: boolean;\n\n  constructor(input: Integer | number | string) {\n    assign(this, toInteger(input, BigInt.DEFAULT_BASE, false));\n    this.digits.length = this.precision;\n  }\n\n  public abs(isMutable: boolean = false): BigInt {\n    return BigInt.toBigInt(abs(this, isMutable), true);\n  };\n\n  public add(addend: Integer, isMutable: boolean = false): BigInt {\n    const A: Integer = add(this, addend, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public clone(): BigInt {\n    return new BigInt(this);\n  }\n\n  public compareTo(B: Integer): number {\n    return compare(this, B);\n  }\n\n  public copy(source: Integer): BigInt {\n    copy(this, source);\n    return this;\n  }\n\n  public divide(divisor: Integer, isMutable: boolean = false): BigInt {\n    return this.divideAndRemainder(divisor, isMutable)[0];\n  }\n\n  public divideAndRemainder(divisor: Integer, isMutable: boolean = false): [BigInt, BigInt] {\n    let Q: Integer;\n    let R: Integer;\n    [Q, R] = divideAndRemainder(this, divisor, isMutable);\n    Q.digits.length = Q.precision;\n    R.digits.length = R.precision;\n    return [BigInt.toBigInt(Q, true), <BigInt>assign(BigInt.ZERO, R)];\n  }\n\n  public double(isMutable: boolean = false): BigInt {\n    return BigInt.toBigInt(double(this, isMutable), true);\n  }\n\n  public gcd(B: Integer, isMutable: boolean = false): BigInt {\n    const A: Integer = gcd(this, B, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public getBase(): number {\n    return this.base;\n  }\n\n  public half(isMutable: boolean = false): [BigInt, BigInt] {\n    let Q: Integer;\n    let R: Integer;\n    [Q, R] = halve(this, isMutable);\n    Q.digits.length = Q.precision;\n    return [BigInt.toBigInt(Q, true), new BigInt(R.precision)];\n  }\n\n  public static isBigInt(n: any): n is BigInt {\n    return n instanceof BigInt;\n  }\n\n  public isEven(): boolean {\n    return isEven(this);\n  }\n\n  public isOdd(): boolean {\n    return !this.isEven();\n  }\n\n  //See: https://en.wikipedia.org/wiki/Least_common_multiple\n  public lcm(B: Integer, isMutable: boolean = false): BigInt {\n    const A: Integer = lcm(this, B, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public static max(A: Integer, B: Integer, isMutable: boolean = false): BigInt {\n    return BigInt.toBigInt(max(A, B, isMutable), true);\n  }\n\n  public static min(A: Integer, B: Integer, isMutable: boolean = false): BigInt {\n    return BigInt.toBigInt(min(A, B, isMutable), true);\n  }\n\n  public minusminus(isMutable: boolean = false): BigInt {\n    const A: Integer = decrement(this, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public multiply(multiplier: Integer, isMutable: boolean = false): BigInt {\n    const A: Integer = multiply(this, multiplier, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public negate(isMutable: boolean = false): BigInt {\n    return BigInt.toBigInt(negate(this, isMutable), true);\n  };\n\n  public plusplus(isMutable: boolean = false): BigInt {\n    return BigInt.toBigInt(increment(this, isMutable), true);\n  }\n\n  public pow(power: Integer, isMutable: boolean = false): BigInt {\n    const A: Integer = pow(this, power, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public remainder(divisor: Integer, isMutable: boolean = false): BigInt {\n    const R: BigInt = this.divideAndRemainder(divisor, isMutable)[1];\n    if(isMutable){\n      assign(this, R);\n    }\n    return this;\n  }\n\n  public setBase(base: number, isMutable: boolean = false): BigInt {\n    const A: Integer = setBase(this, base, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public signum(): number {\n    return signum(this);\n  };\n\n  public square(isMutable: boolean = false): BigInt {\n    const A: Integer = square(this, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public subtract(subtrahend: Integer, isMutable: boolean = false): BigInt {\n    const A: Integer = subtract(this, subtrahend, isMutable);\n    A.digits.length = A.precision;\n    return BigInt.toBigInt(A, true);\n  }\n\n  public static toBigInt(input: Integer | number | string, isMutable: boolean = false): BigInt {\n    return (BigInt.isBigInt(input) && isMutable) ? input : new BigInt(input);\n  }\n\n  public toString(sep: string = null, cipher: ReadonlyArray<string> = null): string {\n    return toString(this, sep, cipher);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/oop/bigInt.ts"],"sourceRoot":""}