import {assert} from 'chai';
import {exponentiation} from '../../src/algorithm/exponentiation';

function test(
  A: number[], minA: number, maxA: number, baseA: number,
  B: number[], minB: number, maxB: number, baseB: number,
  C: number[], minC: number, maxC: number
): void {
  maxA = exponentiation(A, minA, maxA, baseA, B, minB, maxB, baseB);
  assert.equal(maxA, maxC);
  deepEqual(A, minA, maxA, C, minC, maxC);
}

function deepEqual(A: any[], minA: number, maxA: number, B: any[], minB: number, maxB: number): void {
  if(maxA - minA !== maxB - minB){
    assert.fail(maxA - minA, maxB - minB, "Array lengths are not equal");
  }
  while(minA < maxA && A[minA] === B[minB]){
    ++minA;
    ++minB;
  }
  if(minA !== maxA){
    assert.fail(A[minA], B[minB], "Index values are not equal");
  }
}

describe('exponentiation', function(){

  it('should return X^1 in base 10', () => {
    test(
      [1], 0, 1, 10,
      [1], 0, 1, 10,
      [1], 0, 1
    );

    test(
      [2], 0, 1, 10,
      [1], 0, 1, 10,
      [2], 0, 1
    );

    test(
      [3], 0, 1, 10,
      [1], 0, 1, 10,
      [3], 0, 1
    );

    test(
      [4,3,2,1], 0, 4, 10,
      [1], 0, 1, 10,
      [4,3,2,1], 0, 4
    );

    test(
      [0,0,4,3,2,1], 2, 6, 10,
      [1], 0, 1, 10,
      [0,0,4,3,2,1], 2, 6
    );

    test(
      [4,3,2,1,0,0], 0, 4, 10,
      [1], 0, 1, 10,
      [4,3,2,1,0,0], 0, 4
    );

    test(
      [0,0,0,4,3,2,1,0], 3, 7, 10,
      [1], 0, 1, 10,
      [0,0,0,4,3,2,1,0], 3, 7
    );

    test(
      [4,3,2,1], 0, 4, 10,
      [0,0,1], 2, 3, 10,
      [4,3,2,1], 0, 4
    );

    test(
      [4,3,2,1], 0, 4, 10,
      [1,0,0], 0, 1, 10,
      [4,3,2,1], 0, 4
    );

    test(
      [4,3,2,1], 0, 4, 10,
      [0,1,0,0], 1, 2, 10,
      [4,3,2,1], 0, 4
    );
  });

  it('should return 1^X in base 10', () => {
    test(
      [1], 0, 1, 10,
      [2], 0, 1, 10,
      [1], 0, 1
    );

    test(
      [1], 0, 1, 10,
      [3], 0, 1, 10,
      [1], 0, 1
    );

    test(
      [1], 0, 1, 10,
      [4,2,0,1], 0, 4, 10,
      [1], 0, 1
    );

    test(
      [1], 0, 1, 10,
      [3,2,0,1], 0, 4, 10,
      [1], 0, 1
    );

    test(
      [0,1], 1, 2, 10,
      [3,2,0,1], 0, 4, 10,
      [0,1], 1, 2
    );

    test(
      [1,0], 0, 1, 10,
      [3,2,0,1], 0, 4, 10,
      [1,0], 0, 1
    );

    test(
      [0,1,0], 1, 2, 10,
      [3,2,0,1], 0, 4, 10,
      [0,1,0], 1, 2
    );

    test(
      [1], 0, 1, 10,
      [0,3,2,0,1], 1, 5, 10,
      [1], 0, 1
    );

    test(
      [1], 0, 1, 10,
      [3,2,0,1,0], 0, 4, 10,
      [1], 0, 1
    );

    test(
      [1], 0, 1, 10,
      [0,0,3,2,0,1,0], 2, 6, 10,
      [1], 0, 1
    );
  });

  it('should return 2^2 in base 10', () => {
    test(
      [2], 0, 1, 10,
      [2], 0, 1, 10,
      [4], 0, 1
    )
  });

  it('should return 4^2 in base 10', () => {
    test(
      [4], 0, 1, 10,
      [2], 0, 1, 10,
      [6,1], 0, 2
    )
  });

  it('should return 2^63 in base 10', () => {
    test(
      [2], 0, 1, 10,
      [3,6], 0, 2, 10,
      [8,0,8,5,7,7,4,5,8,6,3,0,2,7,3,3,2,2,9], 0, 19
    )
  });

  it('should return 2^64 in base 10', () => {
    test(
      [2], 0, 1, 10,
      [4,6], 0, 2, 10,
      [6,1,6,1,5,5,9,0,7,3,7,0,4,4,7,6,4,4,8,1], 0, 20
    )
  });

  it('should return 9^2 in base 11', () => {
    test(
      [9], 0, 1, 11,
      [2], 0, 1, 11,
      [4,7], 0, 2
    )
  });

  it('should return 9999999^2 in base 10000000', () => {
    test(
      [9999999], 0, 1, 10000000,
      [2], 0, 1, 10000000,
      [1, 9999998], 0, 2
    )
  });

  it('should return 456^123 in base 10', () => {
    test(
      [6,5,4], 0, 3, 10,
      [3,2,1], 0, 3, 10,
      [
        6,1,4,8,8,1,2,5,3,4,8,2,3,2,4,1,4,5,6,9,1,2,3,9,4,0,3,6,1,5,
        7,4,9,4,7,1,1,7,1,3,4,9,9,0,8,2,6,6,0,3,4,0,3,3,9,0,1,0,0,5,
        4,1,1,5,1,8,9,1,4,7,2,6,6,6,9,7,6,6,8,6,3,8,8,3,8,4,7,5,4,9,
        0,0,9,6,2,1,4,5,7,1,1,8,1,4,6,3,4,5,7,9,3,5,4,5,8,2,8,6,9,9,
        6,4,7,1,3,8,5,4,4,4,3,1,4,4,3,3,1,0,7,1,0,2,1,9,2,7,8,0,6,4,
        5,5,9,2,1,0,1,6,2,8,6,7,3,9,6,4,0,6,7,4,4,6,3,2,4,4,2,3,4,9,
        2,9,8,5,5,0,7,5,0,9,7,6,0,6,1,6,5,6,6,2,0,6,7,2,0,2,9,5,4,0,
        5,4,4,9,2,5,9,1,3,5,6,5,8,9,4,6,7,5,8,8,6,8,6,5,5,3,2,4,4,7,
        1,4,3,4,8,5,1,1,8,2,9,1,7,9,2,1,1,8,4,2,5,5,0,1,2,7,2,1,8,3,
        2,2,0,2,0,3,3,3,8,5,9,9,0,0,1,7,9,6,2,5,0,3,7,9,4,4,4,1,5,5,
        0,9,8,1,8,2,3,9,7,0,9,3,8,9,9,0,6,0,3,4,4,2,5,9,8,2,1,1
      ], 0, 328
    )
  });

  it('should return 456^123 in base 373', () => {
    test(
      [83,1], 0, 2, 373,
      [123], 0, 1, 373,
      [
        318,192,196,188,75,314,108,15,279,142,
        139,227,351,367,259,265,99,306,254,134,
        338,346,69,19,27,170,214,359,58,352,
        30,352,168,168,25,288,301,340,338,269,
        86,226,99,191,142,198,34,59,255,75,
        298,243,262,134,332,89,184,214,300,94,
        233,364,277,242,193,314,316,189,334,9,
        275,188,247,365,336,335,278,344,137,199,
        209,137,19,178,369,319,125,77,276,193,
        105,79,233,129,252,267,349,360,4,154,
        245,84,71,98,194,119,54,59,102,156,
        22,280,175,122,313,313,345,329,52,101,
        192,232,181,205,159,294,294,2
      ], 0, 128
    )
  });
});
